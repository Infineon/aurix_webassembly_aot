Globals:
Word(1048576)
Word(1049805)
Word(1049808)
Data Sections:
(1048576, [3, 0, 0, 0, 12, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 47, 114, 117, 115, 116, 47, 100, 101, 112, 115, 47, 100, 108, 109, 97, 108, 108, 111, 99, 45, 48, 46, 50, 46, 54, 47, 115, 114, 99, 47, 100, 108, 109, 97, 108, 108, 111, 99, 46, 114, 115, 97, 115, 115, 101, 114, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 112, 115, 105, 122, 101, 32, 62, 61, 32, 115, 105, 122, 101, 32, 43, 32, 109, 105, 110, 95, 111, 118, 101, 114, 104, 101, 97, 100, 0, 24, 0, 16, 0, 41, 0, 0, 0, 168, 4, 0, 0, 9, 0, 0, 0, 97, 115, 115, 101, 114, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 112, 115, 105, 122, 101, 32, 60, 61, 32, 115, 105, 122, 101, 32, 43, 32, 109, 97, 120, 95, 111, 118, 101, 114, 104, 101, 97, 100, 0, 0, 24, 0, 16, 0, 41, 0, 0, 0, 174, 4, 0, 0, 13, 0, 0, 0, 109, 101, 109, 111, 114, 121, 32, 97, 108, 108, 111, 99, 97, 116, 105, 111, 110, 32, 111, 102, 32, 32, 98, 121, 116, 101, 115, 32, 102, 97, 105, 108, 101, 100, 0, 0, 192, 0, 16, 0, 21, 0, 0, 0, 213, 0, 16, 0, 13, 0, 0, 0, 108, 105, 98, 114, 97, 114, 121, 47, 115, 116, 100, 47, 115, 114, 99, 47, 97, 108, 108, 111, 99, 46, 114, 115, 244, 0, 16, 0, 24, 0, 0, 0, 98, 1, 0, 0, 9, 0, 0, 0, 108, 105, 98, 114, 97, 114, 121, 47, 115, 116, 100, 47, 115, 114, 99, 47, 112, 97, 110, 105, 99, 107, 105, 110, 103, 46, 114, 115, 28, 1, 16, 0, 28, 0, 0, 0, 139, 2, 0, 0, 30, 0, 0, 0, 3, 0, 0, 0, 12, 0, 0, 0, 4, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 16, 0, 0, 0, 4, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 14, 0, 0, 0, 99, 97, 112, 97, 99, 105, 116, 121, 32, 111, 118, 101, 114, 102, 108, 111, 119, 0, 0, 0, 160, 1, 16, 0, 17, 0, 0, 0, 108, 105, 98, 114, 97, 114, 121, 47, 97, 108, 108, 111, 99, 47, 115, 114, 99, 47, 114, 97, 119, 95, 118, 101, 99, 46, 114, 115, 188, 1, 16, 0, 28, 0, 0, 0, 25, 0, 0, 0, 5, 0, 0, 0, 99, 97, 108, 108, 101, 100, 32, 96, 79, 112, 116, 105, 111, 110, 58, 58, 117, 110, 119, 114, 97, 112, 40, 41, 96, 32, 111, 110, 32, 97, 32, 96, 78, 111, 110, 101, 96, 32, 118, 97, 108, 117, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 15, 0, 0, 0, 48, 48, 48, 49, 48, 50, 48, 51, 48, 52, 48, 53, 48, 54, 48, 55, 48, 56, 48, 57, 49, 48, 49, 49, 49, 50, 49, 51, 49, 52, 49, 53, 49, 54, 49, 55, 49, 56, 49, 57, 50, 48, 50, 49, 50, 50, 50, 51, 50, 52, 50, 53, 50, 54, 50, 55, 50, 56, 50, 57, 51, 48, 51, 49, 51, 50, 51, 51, 51, 52, 51, 53, 51, 54, 51, 55, 51, 56, 51, 57, 52, 48, 52, 49, 52, 50, 52, 51, 52, 52, 52, 53, 52, 54, 52, 55, 52, 56, 52, 57, 53, 48, 53, 49, 53, 50, 53, 51, 53, 52, 53, 53, 53, 54, 53, 55, 53, 56, 53, 57, 54, 48, 54, 49, 54, 50, 54, 51, 54, 52, 54, 53, 54, 54, 54, 55, 54, 56, 54, 57, 55, 48, 55, 49, 55, 50, 55, 51, 55, 52, 55, 53, 55, 54, 55, 55, 55, 56, 55, 57, 56, 48, 56, 49, 56, 50, 56, 51, 56, 52, 56, 53, 56, 54, 56, 55, 56, 56, 56, 57, 57, 48, 57, 49, 57, 50, 57, 51, 57, 52, 57, 53, 57, 54, 57, 55, 57, 56, 57, 57])
Table Elements:
(1, [48, 29, 15, 19, 17, 14, 10, 11, 36, 37, 16, 34, 35, 12, 50])
Start Function:
None
Memory Size:
Some(1114112)
Table Size:
Some(1048576)
Function Labels:
0
17
52
131
220
232
240
253
265
282
292
313
334
355
419
434
446
463
580
641
672
739
882
1074
1199
1462
3186
3321
3329
3373
3429
3445
3496
3871
3901
4012
4075
4109
4124
4236
4247
4260
4269
4302
4333
4346
4356
4388
4424
4437
4668
4689
4702
5018
5349
5387
5546
5650
CFG Label Map:
12
5
43
28
32
62
124
72
76
131
126
212
137
205
148
153
207
220
371
394
385
410
443
460
578
556
545
526
501
533
564
593
616
606
632
654
735
731
726
705
701
698
692
691
701
719
882
861
833
787
767
760
770
813
845
872
1074
928
925
1051
1018
978
964
985
1004
1004
1100
1137
1187
1169
1147
1153
1441
1408
1406
1253
1250
1334
1303
1289
1324
1322
1365
1385
1376
1384
1390
1388
1427
1427
3184
3116
3097
2105
2007
1979
1962
1567
1503
1511
1520
1544
1628
1612
1601
1879
1860
1757
1648
1741
1695
1672
1665
1676
1721
1796
1785
1849
1837
1837
1871
1960
1952
1937
1923
1923
1977
1979
2000
2014
2059
2036
2029
2040
2085
3070
3068
3047
3029
2981
2930
2906
2124
2614
2605
2155
2145
2163
2159
2806
2640
2633
2626
2651
2642
2650
2739
2774
2793
2793
2854
2874
2893
2893
2979
2956
3108
3183
3169
3137
3156
3156
3321
3287
3222
3280
3320
3361
3348
3346
3342
3424
3443
3486
3477
3472
3848
3838
3828
3818
3808
3526
3806
3775
3538
3745
3563
3739
3714
3651
3630
3624
3704
3678
3804
3882
3951
3985
4062
4091
4228
4228
4218
4339
4666
4665
4663
4642
4510
4481
4495
4520
4534
4584
4582
4570
4611
4609
4599
4726
4715
4814
4730
4813
4737
4740
4794
4748
4753
4800
5018
4842
4869
4937
4913
4895
4950
4947
4944
4969
4951
4996
5000
5349
5263
5100
5086
5050
5052
5089
5127
5130
5203
5145
5261
5281
5332
5291
5297
5336
5378
5373
5371
5470
5404
5405
5502
5531
5521
5637
5555
5574
5564
5633
5619
5604
5623
5650
5640
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(0) }
EQ { lhs: DataRegister(0), rhs: Const9(Const9(1)), dest: DataRegister(1) }
JNE { target: 0, lhs: DataRegister(1), rhs: Const4(0) }
MUL { lhs: DataRegister(0), rhs: Const9(Const9(3)), dest: DataRegister(1) }
ADDI { lhs: DataRegister(1), rhs: Const16(1), dest: DataRegister(2) }
SH { src: DataRegister(0), count: Const9(Const9(31)), dest: DataRegister(3) }
AND { lhs: DataRegister(0), rhs: Const9(Const9(1)), dest: DataRegister(4) }
SEL { selector: DataRegister(2), lhs: DataRegister(3), rhs: DataRegister(DataRegister(4)), dest: DataRegister(0) }
NE { lhs: DataRegister(0), rhs: Const9(Const9(1)), dest: DataRegister(1) }
JNE { target: 1, lhs: DataRegister(1), rhs: Const4(0) }
MOVU { src: Const16(1), dest: DataRegister(DataRegister(0)) }
LEA { base: AddressRegister(9), offset: Const16(4), dest: AddressRegister(9) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(4) }
RSLCX
RET
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(1) }
LDW { base: AddressRegister(9), offset: Const16(65532), dest: DataRegister(0) }
NE { lhs: DataRegister(1), rhs: Const9(Const9(1)), dest: DataRegister(5) }
JNE { target: 3, lhs: DataRegister(5), rhs: Const4(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(2)) }
MOVU { src: Const16(4048), dest: DataRegister(DataRegister(3)) }
ADDIH { lhs: DataRegister(3), rhs: Const16(16457), dest: DataRegister(3) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(4)) }
J { target: 2 }
MOVU { src: Const16(4048), dest: DataRegister(DataRegister(3)) }
ADDIH { lhs: DataRegister(3), rhs: Const16(16457), dest: DataRegister(3) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(4)) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(2)) }
MUL { lhs: DataRegister(1), rhs: Const9(Const9(3)), dest: DataRegister(5) }
ADDI { lhs: DataRegister(5), rhs: Const16(1), dest: DataRegister(6) }
SH { src: DataRegister(1), count: Const9(Const9(31)), dest: DataRegister(7) }
AND { lhs: DataRegister(1), rhs: Const9(Const9(1)), dest: DataRegister(8) }
SEL { selector: DataRegister(6), lhs: DataRegister(7), rhs: DataRegister(DataRegister(8)), dest: DataRegister(1) }
ADD { lhs: DataRegister(1), rhs: DataRegister(DataRegister(2)), dest: DataRegister(2) }
ITOF { src: DataRegister(1), dest: DataRegister(5) }
MULF { lhs: DataRegister(3), rhs: DataRegister(5), dest: DataRegister(3) }
ADDI { lhs: DataRegister(4), rhs: Const16(1), dest: DataRegister(4) }
NE { lhs: DataRegister(1), rhs: Const9(Const9(1)), dest: DataRegister(5) }
JNE { target: 4, lhs: DataRegister(5), rhs: Const4(0) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(3), base: AddressRegister(2), offset: Const16(8) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(2), base: AddressRegister(2), offset: Const16(4) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(4), base: AddressRegister(2), offset: Const16(0) }
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(1) }
LDW { base: AddressRegister(9), offset: Const16(65532), dest: DataRegister(0) }
JNE { target: 5, lhs: DataRegister(1), rhs: Const4(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(0)) }
LEA { base: AddressRegister(9), offset: Const16(48), dest: AddressRegister(9) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(4) }
RSLCX
RET
ADDI { lhs: DataRegister(1), rhs: Const16(65535), dest: DataRegister(8) }
MOVU { src: Const16(65535), dest: DataRegister(DataRegister(9)) }
ADDIH { lhs: DataRegister(9), rhs: Const16(16383), dest: DataRegister(9) }
AND { lhs: DataRegister(8), rhs: DataRegister(DataRegister(9)), dest: DataRegister(1) }
ADDI { lhs: DataRegister(1), rhs: Const16(1), dest: DataRegister(2) }
AND { lhs: DataRegister(2), rhs: Const9(Const9(7)), dest: DataRegister(3) }
GEU { lhs: DataRegister(1), rhs: Const9(Const9(7)), dest: DataRegister(8) }
JNE { target: 7, lhs: DataRegister(8), rhs: Const4(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(1)) }
J { target: 6 }
MOVU { src: Const16(65528), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(32767), dest: DataRegister(8) }
AND { lhs: DataRegister(2), rhs: DataRegister(DataRegister(8)), dest: DataRegister(2) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(1)) }
ADDI { lhs: DataRegister(0), rhs: Const16(28), dest: DataRegister(8) }
STWPI { src: DataRegister(4), base: AddressRegister(9), offset: Const10(-4) }
ADDI { lhs: DataRegister(0), rhs: Const16(24), dest: DataRegister(8) }
STWPI { src: DataRegister(5), base: AddressRegister(9), offset: Const10(-4) }
ADDI { lhs: DataRegister(0), rhs: Const16(20), dest: DataRegister(8) }
STWPI { src: DataRegister(6), base: AddressRegister(9), offset: Const10(-4) }
ADDI { lhs: DataRegister(0), rhs: Const16(16), dest: DataRegister(8) }
STWPI { src: DataRegister(7), base: AddressRegister(9), offset: Const10(-4) }
ADDI { lhs: DataRegister(0), rhs: Const16(12), dest: DataRegister(8) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
ADDI { lhs: DataRegister(0), rhs: Const16(8), dest: DataRegister(8) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
ADDI { lhs: DataRegister(0), rhs: Const16(4), dest: DataRegister(8) }
LDW { base: AddressRegister(10), offset: Const16(12), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
LDW { base: AddressRegister(10), offset: Const16(16), dest: DataRegister(8) }
LT { lhs: DataRegister(1), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
LDW { base: AddressRegister(10), offset: Const16(16), dest: DataRegister(9) }
SEL { selector: DataRegister(9), lhs: DataRegister(1), rhs: DataRegister(DataRegister(8)), dest: DataRegister(1) }
LDW { base: AddressRegister(10), offset: Const16(12), dest: DataRegister(8) }
LT { lhs: DataRegister(1), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(9) }
SEL { selector: DataRegister(9), lhs: DataRegister(1), rhs: DataRegister(DataRegister(8)), dest: DataRegister(1) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
LT { lhs: DataRegister(1), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(9) }
SEL { selector: DataRegister(9), lhs: DataRegister(1), rhs: DataRegister(DataRegister(8)), dest: DataRegister(1) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
LT { lhs: DataRegister(1), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(9) }
SEL { selector: DataRegister(9), lhs: DataRegister(1), rhs: DataRegister(DataRegister(8)), dest: DataRegister(1) }
LT { lhs: DataRegister(1), rhs: DataRegister(DataRegister(7)), dest: DataRegister(8) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(9) }
SEL { selector: DataRegister(9), lhs: DataRegister(1), rhs: DataRegister(DataRegister(8)), dest: DataRegister(1) }
LT { lhs: DataRegister(1), rhs: DataRegister(DataRegister(6)), dest: DataRegister(8) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(9) }
SEL { selector: DataRegister(9), lhs: DataRegister(1), rhs: DataRegister(DataRegister(8)), dest: DataRegister(1) }
LT { lhs: DataRegister(1), rhs: DataRegister(DataRegister(5)), dest: DataRegister(8) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(9) }
SEL { selector: DataRegister(9), lhs: DataRegister(1), rhs: DataRegister(DataRegister(8)), dest: DataRegister(1) }
LT { lhs: DataRegister(1), rhs: DataRegister(DataRegister(4)), dest: DataRegister(8) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(9) }
SEL { selector: DataRegister(9), lhs: DataRegister(1), rhs: DataRegister(DataRegister(8)), dest: DataRegister(1) }
ADDI { lhs: DataRegister(0), rhs: Const16(32), dest: DataRegister(0) }
ADDI { lhs: DataRegister(2), rhs: Const16(65528), dest: DataRegister(2) }
JNE { target: 8, lhs: DataRegister(2), rhs: Const4(0) }
EQ { lhs: DataRegister(3), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 9, lhs: DataRegister(8), rhs: Const4(0) }
LT { lhs: DataRegister(1), rhs: DataRegister(DataRegister(2)), dest: DataRegister(8) }
SEL { selector: DataRegister(2), lhs: DataRegister(1), rhs: DataRegister(DataRegister(8)), dest: DataRegister(1) }
ADDI { lhs: DataRegister(0), rhs: Const16(4), dest: DataRegister(0) }
ADDI { lhs: DataRegister(3), rhs: Const16(65535), dest: DataRegister(3) }
JNE { target: 10, lhs: DataRegister(3), rhs: Const4(0) }
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(0) }
JNE { target: 12, lhs: DataRegister(2), rhs: Const4(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(3)) }
J { target: 11 }
ADDI { lhs: DataRegister(2), rhs: Const16(65535), dest: DataRegister(8) }
MOVU { src: Const16(65535), dest: DataRegister(DataRegister(9)) }
ADDIH { lhs: DataRegister(9), rhs: Const16(16383), dest: DataRegister(9) }
AND { lhs: DataRegister(8), rhs: DataRegister(DataRegister(9)), dest: DataRegister(2) }
ADDI { lhs: DataRegister(2), rhs: Const16(1), dest: DataRegister(3) }
AND { lhs: DataRegister(3), rhs: Const9(Const9(7)), dest: DataRegister(4) }
GEU { lhs: DataRegister(2), rhs: Const9(Const9(7)), dest: DataRegister(8) }
JNE { target: 14, lhs: DataRegister(8), rhs: Const4(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(3)) }
MOV { src: DataRegister(DataRegister(1)), dest: DataRegister(DataRegister(2)) }
J { target: 13 }
MOVU { src: Const16(65528), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(32767), dest: DataRegister(8) }
AND { lhs: DataRegister(3), rhs: DataRegister(DataRegister(8)), dest: DataRegister(5) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(3)) }
MOV { src: DataRegister(DataRegister(1)), dest: DataRegister(DataRegister(2)) }
ADDI { lhs: DataRegister(2), rhs: Const16(28), dest: DataRegister(8) }
STWPI { src: DataRegister(6), base: AddressRegister(9), offset: Const10(-4) }
ADDI { lhs: DataRegister(2), rhs: Const16(24), dest: DataRegister(8) }
STWPI { src: DataRegister(7), base: AddressRegister(9), offset: Const10(-4) }
ADDI { lhs: DataRegister(2), rhs: Const16(20), dest: DataRegister(8) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
ADDI { lhs: DataRegister(2), rhs: Const16(16), dest: DataRegister(8) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
ADDI { lhs: DataRegister(2), rhs: Const16(12), dest: DataRegister(8) }
LDW { base: AddressRegister(10), offset: Const16(12), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
ADDI { lhs: DataRegister(2), rhs: Const16(8), dest: DataRegister(8) }
LDW { base: AddressRegister(10), offset: Const16(16), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
ADDI { lhs: DataRegister(2), rhs: Const16(4), dest: DataRegister(8) }
LDW { base: AddressRegister(10), offset: Const16(20), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
LDW { base: AddressRegister(10), offset: Const16(24), dest: DataRegister(8) }
LT { lhs: DataRegister(3), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
LDW { base: AddressRegister(10), offset: Const16(24), dest: DataRegister(9) }
SEL { selector: DataRegister(9), lhs: DataRegister(3), rhs: DataRegister(DataRegister(8)), dest: DataRegister(3) }
LDW { base: AddressRegister(10), offset: Const16(20), dest: DataRegister(8) }
LT { lhs: DataRegister(3), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(9) }
SEL { selector: DataRegister(9), lhs: DataRegister(3), rhs: DataRegister(DataRegister(8)), dest: DataRegister(3) }
LDW { base: AddressRegister(10), offset: Const16(16), dest: DataRegister(8) }
LT { lhs: DataRegister(3), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(9) }
SEL { selector: DataRegister(9), lhs: DataRegister(3), rhs: DataRegister(DataRegister(8)), dest: DataRegister(3) }
LDW { base: AddressRegister(10), offset: Const16(12), dest: DataRegister(8) }
LT { lhs: DataRegister(3), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(9) }
SEL { selector: DataRegister(9), lhs: DataRegister(3), rhs: DataRegister(DataRegister(8)), dest: DataRegister(3) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
LT { lhs: DataRegister(3), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(9) }
SEL { selector: DataRegister(9), lhs: DataRegister(3), rhs: DataRegister(DataRegister(8)), dest: DataRegister(3) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
LT { lhs: DataRegister(3), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(9) }
SEL { selector: DataRegister(9), lhs: DataRegister(3), rhs: DataRegister(DataRegister(8)), dest: DataRegister(3) }
LT { lhs: DataRegister(3), rhs: DataRegister(DataRegister(7)), dest: DataRegister(8) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(9) }
SEL { selector: DataRegister(9), lhs: DataRegister(3), rhs: DataRegister(DataRegister(8)), dest: DataRegister(3) }
LT { lhs: DataRegister(3), rhs: DataRegister(DataRegister(6)), dest: DataRegister(8) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(9) }
SEL { selector: DataRegister(9), lhs: DataRegister(3), rhs: DataRegister(DataRegister(8)), dest: DataRegister(3) }
ADDI { lhs: DataRegister(2), rhs: Const16(32), dest: DataRegister(2) }
ADDI { lhs: DataRegister(5), rhs: Const16(65528), dest: DataRegister(5) }
JNE { target: 15, lhs: DataRegister(5), rhs: Const4(0) }
EQ { lhs: DataRegister(4), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 11, lhs: DataRegister(8), rhs: Const4(0) }
LT { lhs: DataRegister(3), rhs: DataRegister(DataRegister(5)), dest: DataRegister(8) }
SEL { selector: DataRegister(5), lhs: DataRegister(3), rhs: DataRegister(DataRegister(8)), dest: DataRegister(3) }
ADDI { lhs: DataRegister(2), rhs: Const16(4), dest: DataRegister(2) }
ADDI { lhs: DataRegister(4), rhs: Const16(65535), dest: DataRegister(4) }
JNE { target: 16, lhs: DataRegister(4), rhs: Const4(0) }
EQ { lhs: DataRegister(2), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 17, lhs: DataRegister(8), rhs: Const4(0) }
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
SH { src: DataRegister(2), count: Const9(Const9(2)), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(4), dest: DataRegister(DataRegister(8)) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 7 }
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(0) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
SH { src: DataRegister(0), count: Const9(Const9(1)), dest: DataRegister(1) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(2) }
XOR { lhs: DataRegister(2), rhs: DataRegister(DataRegister(1)), dest: DataRegister(2) }
SUB { lhs: DataRegister(2), rhs: DataRegister(1), dest: DataRegister(0) }
LEA { base: AddressRegister(9), offset: Const16(8), dest: AddressRegister(9) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(4) }
RSLCX
RET
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(0) }
RSUB0 { src: DataRegister(0) }
LEA { base: AddressRegister(9), offset: Const16(4), dest: AddressRegister(9) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(4) }
RSLCX
RET
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(1) }
LDW { base: AddressRegister(9), offset: Const16(65532), dest: DataRegister(0) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 30 }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(2) }
MOV { src: DataRegister(DataRegister(2)), dest: DataRegister(DataRegister(0)) }
LEA { base: AddressRegister(9), offset: Const16(12), dest: AddressRegister(9) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(4) }
RSLCX
RET
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(2) }
LDW { base: AddressRegister(9), offset: Const16(65532), dest: DataRegister(1) }
LDW { base: AddressRegister(9), offset: Const16(65528), dest: DataRegister(0) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(2), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 31 }
LEA { base: AddressRegister(9), offset: Const16(12), dest: AddressRegister(9) }
RSLCX
RET
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(3) }
LDW { base: AddressRegister(9), offset: Const16(65532), dest: DataRegister(2) }
LDW { base: AddressRegister(9), offset: Const16(65528), dest: DataRegister(1) }
LDW { base: AddressRegister(9), offset: Const16(65524), dest: DataRegister(0) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(2), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(3), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 32 }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(4) }
MOV { src: DataRegister(DataRegister(4)), dest: DataRegister(DataRegister(0)) }
LEA { base: AddressRegister(9), offset: Const16(20), dest: AddressRegister(9) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(4) }
RSLCX
RET
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(1) }
LDW { base: AddressRegister(9), offset: Const16(65532), dest: DataRegister(0) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 40 }
LEA { base: AddressRegister(9), offset: Const16(8), dest: AddressRegister(9) }
RSLCX
RET
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(1) }
LDW { base: AddressRegister(9), offset: Const16(65532), dest: DataRegister(0) }
MOV { src: Const16(Const16(18992)), dest: ExtendedRegister(ExtendedRegister(2)) }
ADDIH { lhs: DataRegister(2), rhs: Const16(17471), dest: DataRegister(2) }
MOV { src: Const16(Const16(63344)), dest: DataRegister(DataRegister(3)) }
ADDIH { lhs: DataRegister(3), rhs: Const16(17909), dest: DataRegister(3) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STD { src: ExtendedRegister(2), base: AddressRegister(2), offset: Const16(8) }
MOV { src: Const16(Const16(51757)), dest: ExtendedRegister(ExtendedRegister(2)) }
ADDIH { lhs: DataRegister(2), rhs: Const16(3157), dest: DataRegister(2) }
MOV { src: Const16(Const16(4919)), dest: DataRegister(DataRegister(3)) }
ADDIH { lhs: DataRegister(3), rhs: Const16(47397), dest: DataRegister(3) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STD { src: ExtendedRegister(2), base: AddressRegister(2), offset: Const16(0) }
LEA { base: AddressRegister(9), offset: Const16(8), dest: AddressRegister(9) }
RSLCX
RET
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(1) }
LDW { base: AddressRegister(9), offset: Const16(65532), dest: DataRegister(0) }
MOV { src: Const16(Const16(23917)), dest: ExtendedRegister(ExtendedRegister(2)) }
ADDIH { lhs: DataRegister(2), rhs: Const16(54987), dest: DataRegister(2) }
MOV { src: Const16(Const16(20524)), dest: DataRegister(DataRegister(3)) }
ADDIH { lhs: DataRegister(3), rhs: Const16(25579), dest: DataRegister(3) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STD { src: ExtendedRegister(2), base: AddressRegister(2), offset: Const16(8) }
MOV { src: Const16(Const16(16760)), dest: ExtendedRegister(ExtendedRegister(2)) }
ADDIH { lhs: DataRegister(2), rhs: Const16(22438), dest: DataRegister(2) }
MOV { src: Const16(Const16(7025)), dest: DataRegister(DataRegister(3)) }
ADDIH { lhs: DataRegister(3), rhs: Const16(47499), dest: DataRegister(3) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STD { src: ExtendedRegister(2), base: AddressRegister(2), offset: Const16(0) }
LEA { base: AddressRegister(9), offset: Const16(8), dest: AddressRegister(9) }
RSLCX
RET
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(1) }
LDW { base: AddressRegister(9), offset: Const16(65532), dest: DataRegister(0) }
MOV { src: Const16(Const16(30541)), dest: ExtendedRegister(ExtendedRegister(2)) }
ADDIH { lhs: DataRegister(2), rhs: Const16(12380), dest: DataRegister(2) }
MOV { src: Const16(Const16(29002)), dest: DataRegister(DataRegister(3)) }
ADDIH { lhs: DataRegister(3), rhs: Const16(35391), dest: DataRegister(3) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STD { src: ExtendedRegister(2), base: AddressRegister(2), offset: Const16(8) }
MOV { src: Const16(Const16(55517)), dest: ExtendedRegister(ExtendedRegister(2)) }
ADDIH { lhs: DataRegister(2), rhs: Const16(14286), dest: DataRegister(2) }
MOV { src: Const16(Const16(23680)), dest: DataRegister(DataRegister(3)) }
ADDIH { lhs: DataRegister(3), rhs: Const16(41292), dest: DataRegister(3) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STD { src: ExtendedRegister(2), base: AddressRegister(2), offset: Const16(0) }
LEA { base: AddressRegister(9), offset: Const16(8), dest: AddressRegister(9) }
RSLCX
RET
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(2) }
LDW { base: AddressRegister(9), offset: Const16(65532), dest: DataRegister(1) }
LDW { base: AddressRegister(9), offset: Const16(65528), dest: DataRegister(0) }
LDW { base: AddressRegister(1), offset: Const16(0), dest: DataRegister(6) }
ADDI { lhs: DataRegister(6), rhs: Const16(65504), dest: DataRegister(3) }
STW { src: DataRegister(3), base: AddressRegister(1), offset: Const16(0) }
ADD { lhs: DataRegister(1), rhs: DataRegister(DataRegister(2)), dest: DataRegister(2) }
GEU { lhs: DataRegister(2), rhs: DataRegister(DataRegister(1)), dest: DataRegister(6) }
JNE { target: 18, lhs: DataRegister(6), rhs: Const4(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(6)) }
STWPI { src: DataRegister(6), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(6)) }
STWPI { src: DataRegister(6), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 44 }
Trap
MOVU { src: Const16(1), dest: DataRegister(DataRegister(4)) }
SH { src: DataRegister(5), count: Const9(Const9(1)), dest: DataRegister(1) }
LTU { lhs: DataRegister(2), rhs: DataRegister(DataRegister(1)), dest: DataRegister(6) }
SEL { selector: DataRegister(1), lhs: DataRegister(2), rhs: DataRegister(DataRegister(6)), dest: DataRegister(1) }
GEU { lhs: DataRegister(1), rhs: Const9(Const9(9)), dest: DataRegister(6) }
SELN { selector: DataRegister(1), lhs: DataRegister(6), rhs: Const9(Const9(8)), dest: DataRegister(1) }
MOVU { src: Const16(65535), dest: DataRegister(DataRegister(6)) }
ADDIH { lhs: DataRegister(6), rhs: Const16(65535), dest: DataRegister(6) }
XOR { lhs: DataRegister(1), rhs: DataRegister(DataRegister(6)), dest: DataRegister(6) }
SHA { src: DataRegister(6), count: Const9(Const9(1)), dest: DataRegister(2) }
JNE { target: 20, lhs: DataRegister(5), rhs: Const4(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(4)) }
J { target: 19 }
MOVA { src: DataRegister(3), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(5), base: AddressRegister(2), offset: Const16(28) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(4), dest: DataRegister(6) }
MOVA { src: DataRegister(3), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(6), base: AddressRegister(2), offset: Const16(20) }
MOVA { src: DataRegister(3), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(4), base: AddressRegister(2), offset: Const16(24) }
ADDI { lhs: DataRegister(3), rhs: Const16(8), dest: DataRegister(6) }
STWPI { src: DataRegister(6), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(2), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
ADDI { lhs: DataRegister(3), rhs: Const16(20), dest: DataRegister(6) }
STWPI { src: DataRegister(6), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 20 }
MOVA { src: DataRegister(3), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(8), dest: DataRegister(6) }
EQ { lhs: DataRegister(6), rhs: Const9(Const9(0)), dest: DataRegister(6) }
JNE { target: 21, lhs: DataRegister(6), rhs: Const4(0) }
CALL { target: 44 }
Trap
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(1), base: AddressRegister(2), offset: Const16(0) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(2), base: AddressRegister(2), offset: Const16(4) }
ADDI { lhs: DataRegister(3), rhs: Const16(32), dest: DataRegister(6) }
STW { src: DataRegister(6), base: AddressRegister(1), offset: Const16(0) }
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(1) }
LDW { base: AddressRegister(9), offset: Const16(65532), dest: DataRegister(0) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(2)) }
ADDIH { lhs: DataRegister(2), rhs: Const16(16), dest: DataRegister(2) }
STWPI { src: DataRegister(2), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 49 }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(0) }
LEA { base: AddressRegister(9), offset: Const16(8), dest: AddressRegister(9) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(4) }
RSLCX
RET
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(0) }
EQ { lhs: DataRegister(1), rhs: Const9(Const9(0)), dest: DataRegister(2) }
JNE { target: 22, lhs: DataRegister(2), rhs: Const4(0) }
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(1), dest: DataRegister(DataRegister(2)) }
STWPI { src: DataRegister(2), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 7 }
LEA { base: AddressRegister(9), offset: Const16(8), dest: AddressRegister(9) }
RSLCX
RET
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(2)) }
ADDIH { lhs: DataRegister(2), rhs: Const16(32768), dest: DataRegister(2) }
OR { lhs: DataRegister(1), rhs: DataRegister(DataRegister(2)), dest: DataRegister(2) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(3)) }
ADDIH { lhs: DataRegister(3), rhs: Const16(32768), dest: DataRegister(3) }
EQ { lhs: DataRegister(2), rhs: DataRegister(DataRegister(3)), dest: DataRegister(3) }
JNE { target: 23, lhs: DataRegister(3), rhs: Const4(0) }
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(1), dest: DataRegister(DataRegister(2)) }
STWPI { src: DataRegister(2), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 7 }
LEA { base: AddressRegister(9), offset: Const16(8), dest: AddressRegister(9) }
RSLCX
RET
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(1) }
LDW { base: AddressRegister(9), offset: Const16(65532), dest: DataRegister(0) }
LDW { base: AddressRegister(1), offset: Const16(0), dest: DataRegister(4) }
ADDI { lhs: DataRegister(4), rhs: Const16(65520), dest: DataRegister(2) }
STW { src: DataRegister(2), base: AddressRegister(1), offset: Const16(0) }
LTU { lhs: DataRegister(1), rhs: Const9(Const9(128)), dest: DataRegister(4) }
JNE { target: 27, lhs: DataRegister(4), rhs: Const4(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(4)) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(4), base: AddressRegister(2), offset: Const16(12) }
MOVU { src: Const16(2048), dest: DataRegister(DataRegister(4)) }
LTU { lhs: DataRegister(1), rhs: DataRegister(DataRegister(4)), dest: DataRegister(4) }
JNE { target: 26, lhs: DataRegister(4), rhs: Const4(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(4)) }
ADDIH { lhs: DataRegister(4), rhs: Const16(1), dest: DataRegister(4) }
GEU { lhs: DataRegister(1), rhs: DataRegister(DataRegister(4)), dest: DataRegister(4) }
JNE { target: 28, lhs: DataRegister(4), rhs: Const4(0) }
AND { lhs: DataRegister(1), rhs: Const9(Const9(63)), dest: DataRegister(4) }
OR { lhs: DataRegister(4), rhs: Const9(Const9(128)), dest: DataRegister(5) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STB { src: DataRegister(5), base: AddressRegister(2), offset: Const16(14) }
SHA { src: DataRegister(1), count: Const9(Const9(20)), dest: DataRegister(4) }
OR { lhs: DataRegister(4), rhs: Const9(Const9(224)), dest: DataRegister(5) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STB { src: DataRegister(5), base: AddressRegister(2), offset: Const16(12) }
SHA { src: DataRegister(1), count: Const9(Const9(26)), dest: DataRegister(4) }
AND { lhs: DataRegister(4), rhs: Const9(Const9(63)), dest: DataRegister(5) }
OR { lhs: DataRegister(5), rhs: Const9(Const9(128)), dest: DataRegister(6) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STB { src: DataRegister(6), base: AddressRegister(2), offset: Const16(13) }
MOVU { src: Const16(3), dest: DataRegister(DataRegister(1)) }
J { target: 25 }
AND { lhs: DataRegister(1), rhs: Const9(Const9(63)), dest: DataRegister(4) }
OR { lhs: DataRegister(4), rhs: Const9(Const9(128)), dest: DataRegister(5) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STB { src: DataRegister(5), base: AddressRegister(2), offset: Const16(15) }
SHA { src: DataRegister(1), count: Const9(Const9(26)), dest: DataRegister(4) }
AND { lhs: DataRegister(4), rhs: Const9(Const9(63)), dest: DataRegister(5) }
OR { lhs: DataRegister(5), rhs: Const9(Const9(128)), dest: DataRegister(6) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STB { src: DataRegister(6), base: AddressRegister(2), offset: Const16(14) }
SHA { src: DataRegister(1), count: Const9(Const9(20)), dest: DataRegister(4) }
AND { lhs: DataRegister(4), rhs: Const9(Const9(63)), dest: DataRegister(5) }
OR { lhs: DataRegister(5), rhs: Const9(Const9(128)), dest: DataRegister(6) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STB { src: DataRegister(6), base: AddressRegister(2), offset: Const16(13) }
SHA { src: DataRegister(1), count: Const9(Const9(14)), dest: DataRegister(4) }
AND { lhs: DataRegister(4), rhs: Const9(Const9(7)), dest: DataRegister(5) }
OR { lhs: DataRegister(5), rhs: Const9(Const9(240)), dest: DataRegister(6) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STB { src: DataRegister(6), base: AddressRegister(2), offset: Const16(12) }
MOVU { src: Const16(4), dest: DataRegister(DataRegister(1)) }
J { target: 25 }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(0), dest: DataRegister(4) }
NE { lhs: DataRegister(3), rhs: DataRegister(DataRegister(4)), dest: DataRegister(4) }
JNE { target: 29, lhs: DataRegister(4), rhs: Const4(0) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 18 }
ADDI { lhs: DataRegister(3), rhs: Const16(1), dest: DataRegister(4) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(4), base: AddressRegister(2), offset: Const16(8) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(4), dest: DataRegister(4) }
ADD { lhs: DataRegister(4), rhs: DataRegister(DataRegister(3)), dest: DataRegister(4) }
MOVA { src: DataRegister(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STB { src: DataRegister(1), base: AddressRegister(2), offset: Const16(0) }
J { target: 24 }
AND { lhs: DataRegister(1), rhs: Const9(Const9(63)), dest: DataRegister(4) }
OR { lhs: DataRegister(4), rhs: Const9(Const9(128)), dest: DataRegister(5) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STB { src: DataRegister(5), base: AddressRegister(2), offset: Const16(13) }
SHA { src: DataRegister(1), count: Const9(Const9(26)), dest: DataRegister(4) }
OR { lhs: DataRegister(4), rhs: Const9(Const9(192)), dest: DataRegister(5) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STB { src: DataRegister(5), base: AddressRegister(2), offset: Const16(12) }
MOVU { src: Const16(2), dest: DataRegister(DataRegister(1)) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(4) }
SUB { lhs: DataRegister(4), rhs: DataRegister(3), dest: DataRegister(4) }
GEU { lhs: DataRegister(4), rhs: DataRegister(DataRegister(1)), dest: DataRegister(5) }
JNE { target: 30, lhs: DataRegister(5), rhs: Const4(0) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(3), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 13 }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(4), dest: DataRegister(4) }
ADD { lhs: DataRegister(4), rhs: DataRegister(DataRegister(3)), dest: DataRegister(4) }
STWPI { src: DataRegister(4), base: AddressRegister(9), offset: Const10(-4) }
ADDI { lhs: DataRegister(2), rhs: Const16(12), dest: DataRegister(4) }
STWPI { src: DataRegister(4), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 57 }
LEA { base: AddressRegister(9), offset: Const16(4), dest: AddressRegister(9) }
ADD { lhs: DataRegister(3), rhs: DataRegister(DataRegister(1)), dest: DataRegister(4) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(4), base: AddressRegister(2), offset: Const16(8) }
ADDI { lhs: DataRegister(2), rhs: Const16(16), dest: DataRegister(4) }
STW { src: DataRegister(4), base: AddressRegister(1), offset: Const16(0) }
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(0) }
LDW { base: AddressRegister(1), offset: Const16(0), dest: DataRegister(5) }
ADDI { lhs: DataRegister(5), rhs: Const16(65504), dest: DataRegister(1) }
STW { src: DataRegister(1), base: AddressRegister(1), offset: Const16(0) }
ADDI { lhs: DataRegister(2), rhs: Const16(1), dest: DataRegister(3) }
JNE { target: 31, lhs: DataRegister(3), rhs: Const4(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(5)) }
STWPI { src: DataRegister(5), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(5)) }
STWPI { src: DataRegister(5), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 44 }
Trap
SH { src: DataRegister(2), count: Const9(Const9(1)), dest: DataRegister(4) }
LTU { lhs: DataRegister(3), rhs: DataRegister(DataRegister(4)), dest: DataRegister(5) }
SEL { selector: DataRegister(4), lhs: DataRegister(3), rhs: DataRegister(DataRegister(5)), dest: DataRegister(3) }
GEU { lhs: DataRegister(3), rhs: Const9(Const9(9)), dest: DataRegister(5) }
SELN { selector: DataRegister(3), lhs: DataRegister(5), rhs: Const9(Const9(8)), dest: DataRegister(3) }
MOVU { src: Const16(65535), dest: DataRegister(DataRegister(5)) }
ADDIH { lhs: DataRegister(5), rhs: Const16(65535), dest: DataRegister(5) }
XOR { lhs: DataRegister(3), rhs: DataRegister(DataRegister(5)), dest: DataRegister(5) }
SHA { src: DataRegister(5), count: Const9(Const9(1)), dest: DataRegister(4) }
JNE { target: 33, lhs: DataRegister(2), rhs: Const4(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(2)) }
J { target: 32 }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(2), base: AddressRegister(2), offset: Const16(28) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(4), dest: DataRegister(5) }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(5), base: AddressRegister(2), offset: Const16(20) }
MOVU { src: Const16(1), dest: DataRegister(DataRegister(2)) }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(2), base: AddressRegister(2), offset: Const16(24) }
ADDI { lhs: DataRegister(1), rhs: Const16(8), dest: DataRegister(5) }
STWPI { src: DataRegister(5), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(4), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(3), base: AddressRegister(9), offset: Const10(-4) }
ADDI { lhs: DataRegister(1), rhs: Const16(20), dest: DataRegister(5) }
STWPI { src: DataRegister(5), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 20 }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(8), dest: DataRegister(5) }
EQ { lhs: DataRegister(5), rhs: Const9(Const9(0)), dest: DataRegister(5) }
JNE { target: 34, lhs: DataRegister(5), rhs: Const4(0) }
CALL { target: 44 }
Trap
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(3), base: AddressRegister(2), offset: Const16(0) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(2), base: AddressRegister(2), offset: Const16(4) }
ADDI { lhs: DataRegister(1), rhs: Const16(32), dest: DataRegister(5) }
STW { src: DataRegister(5), base: AddressRegister(1), offset: Const16(0) }
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(2) }
LDW { base: AddressRegister(9), offset: Const16(65532), dest: DataRegister(1) }
LDW { base: AddressRegister(9), offset: Const16(65528), dest: DataRegister(0) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(4) }
SUB { lhs: DataRegister(4), rhs: DataRegister(3), dest: DataRegister(4) }
GEU { lhs: DataRegister(4), rhs: DataRegister(DataRegister(2)), dest: DataRegister(5) }
JNE { target: 35, lhs: DataRegister(5), rhs: Const4(0) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(3), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(2), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 13 }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(4), dest: DataRegister(4) }
ADD { lhs: DataRegister(4), rhs: DataRegister(DataRegister(3)), dest: DataRegister(4) }
STWPI { src: DataRegister(4), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(2), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 57 }
LEA { base: AddressRegister(9), offset: Const16(4), dest: AddressRegister(9) }
ADD { lhs: DataRegister(3), rhs: DataRegister(DataRegister(2)), dest: DataRegister(4) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(4), base: AddressRegister(2), offset: Const16(8) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(0)) }
LEA { base: AddressRegister(9), offset: Const16(16), dest: AddressRegister(9) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(4) }
RSLCX
RET
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(3) }
LDW { base: AddressRegister(9), offset: Const16(65532), dest: DataRegister(2) }
LDW { base: AddressRegister(9), offset: Const16(65528), dest: DataRegister(1) }
LDW { base: AddressRegister(9), offset: Const16(65524), dest: DataRegister(0) }
EQ { lhs: DataRegister(1), rhs: Const9(Const9(0)), dest: DataRegister(5) }
JNE { target: 38, lhs: DataRegister(5), rhs: Const4(0) }
LT { lhs: DataRegister(2), rhs: Const9(Const9(0)), dest: DataRegister(5) }
JNE { target: 37, lhs: DataRegister(5), rhs: Const4(0) }
MOVA { src: DataRegister(3), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(4), dest: DataRegister(5) }
EQ { lhs: DataRegister(5), rhs: Const9(Const9(0)), dest: DataRegister(5) }
JNE { target: 41, lhs: DataRegister(5), rhs: Const4(0) }
JNE { target: 42, lhs: DataRegister(4), rhs: Const4(0) }
JNE { target: 43, lhs: DataRegister(2), rhs: Const4(0) }
MOV { src: DataRegister(DataRegister(1)), dest: DataRegister(DataRegister(3)) }
J { target: 39 }
J { target: 40 }
STWPI { src: DataRegister(4), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(2), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 8 }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(3) }
J { target: 39 }
JNE { target: 44, lhs: DataRegister(2), rhs: Const4(0) }
MOV { src: DataRegister(DataRegister(1)), dest: DataRegister(DataRegister(3)) }
J { target: 39 }
STWPI { src: DataRegister(2), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 6 }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(3) }
EQ { lhs: DataRegister(3), rhs: Const9(Const9(0)), dest: DataRegister(5) }
JNE { target: 45, lhs: DataRegister(5), rhs: Const4(0) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(2), base: AddressRegister(2), offset: Const16(8) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(3), base: AddressRegister(2), offset: Const16(4) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(5)) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(5), base: AddressRegister(2), offset: Const16(0) }
RSLCX
RET
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(2), base: AddressRegister(2), offset: Const16(8) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(1), base: AddressRegister(2), offset: Const16(4) }
J { target: 36 }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(5)) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(5), base: AddressRegister(2), offset: Const16(4) }
J { target: 36 }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(5)) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(5), base: AddressRegister(2), offset: Const16(4) }
MOVU { src: Const16(1), dest: DataRegister(DataRegister(5)) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(5), base: AddressRegister(2), offset: Const16(0) }
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(1) }
LDW { base: AddressRegister(9), offset: Const16(65532), dest: DataRegister(0) }
LTU { lhs: DataRegister(1), rhs: Const9(Const9(256)), dest: DataRegister(6) }
JNE { target: 48, lhs: DataRegister(6), rhs: Const4(0) }
NE { lhs: DataRegister(2), rhs: DataRegister(DataRegister(0)), dest: DataRegister(6) }
JNE { target: 51, lhs: DataRegister(6), rhs: Const4(0) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(20), dest: DataRegister(DataRegister(6)) }
STWPI { src: DataRegister(6), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(16), dest: DataRegister(DataRegister(6)) }
STWPI { src: DataRegister(6), base: AddressRegister(9), offset: Const10(-4) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(6) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(6) }
SEL { selector: DataRegister(6), lhs: DataRegister(6), rhs: DataRegister(DataRegister(2)), dest: DataRegister(6) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(7) }
ADD { lhs: DataRegister(7), rhs: DataRegister(DataRegister(6)), dest: DataRegister(7) }
JNE { target: 50, lhs: DataRegister(1), rhs: Const4(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(2)) }
J { target: 49 }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(2), base: AddressRegister(2), offset: Const16(12) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(1), base: AddressRegister(2), offset: Const16(8) }
J { target: 49 }
ADDI { lhs: DataRegister(0), rhs: Const16(20), dest: DataRegister(6) }
ADDI { lhs: DataRegister(0), rhs: Const16(16), dest: DataRegister(7) }
SEL { selector: DataRegister(6), lhs: DataRegister(7), rhs: DataRegister(DataRegister(2)), dest: DataRegister(4) }
MOV { src: DataRegister(DataRegister(4)), dest: DataRegister(DataRegister(5)) }
MOV { src: DataRegister(DataRegister(1)), dest: DataRegister(DataRegister(2)) }
ADDI { lhs: DataRegister(2), rhs: Const16(20), dest: DataRegister(6) }
STWPI { src: DataRegister(6), base: AddressRegister(9), offset: Const10(-4) }
ADDI { lhs: DataRegister(2), rhs: Const16(16), dest: DataRegister(6) }
STWPI { src: DataRegister(6), base: AddressRegister(9), offset: Const10(-4) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(6) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(6) }
SEL { selector: DataRegister(6), lhs: DataRegister(6), rhs: DataRegister(DataRegister(1)), dest: DataRegister(4) }
MOVU { src: Const16(20), dest: DataRegister(DataRegister(6)) }
SELN { selector: DataRegister(6), lhs: DataRegister(1), rhs: Const9(Const9(16)), dest: DataRegister(6) }
ADD { lhs: DataRegister(2), rhs: DataRegister(DataRegister(6)), dest: DataRegister(7) }
JNE { target: 52, lhs: DataRegister(1), rhs: Const4(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(6)) }
MOVA { src: DataRegister(5), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(6), base: AddressRegister(2), offset: Const16(0) }
EQ { lhs: DataRegister(3), rhs: Const9(Const9(0)), dest: DataRegister(6) }
JNE { target: 46, lhs: DataRegister(6), rhs: Const4(0) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(28), dest: DataRegister(6) }
SH { src: DataRegister(6), count: Const9(Const9(2)), dest: DataRegister(6) }
ADDI { lhs: DataRegister(6), rhs: Const16(772), dest: DataRegister(1) }
ADDIH { lhs: DataRegister(1), rhs: Const16(16), dest: DataRegister(1) }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(0), dest: DataRegister(6) }
EQ { lhs: DataRegister(6), rhs: DataRegister(DataRegister(0)), dest: DataRegister(6) }
JNE { target: 53, lhs: DataRegister(6), rhs: Const4(0) }
MOVA { src: DataRegister(3), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(16), dest: DataRegister(6) }
EQ { lhs: DataRegister(6), rhs: DataRegister(DataRegister(0)), dest: DataRegister(6) }
MOVU { src: Const16(16), dest: DataRegister(DataRegister(7)) }
SELN { selector: DataRegister(7), lhs: DataRegister(6), rhs: Const9(Const9(20)), dest: DataRegister(7) }
ADD { lhs: DataRegister(3), rhs: DataRegister(DataRegister(7)), dest: DataRegister(8) }
MOVA { src: DataRegister(8), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(2), base: AddressRegister(2), offset: Const16(0) }
EQ { lhs: DataRegister(2), rhs: Const9(Const9(0)), dest: DataRegister(6) }
JNE { target: 46, lhs: DataRegister(6), rhs: Const4(0) }
J { target: 47 }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(2), base: AddressRegister(2), offset: Const16(0) }
JNE { target: 47, lhs: DataRegister(2), rhs: Const4(0) }
SVLCX
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(28), dest: DataRegister(5) }
MOVU { src: Const16(65534), dest: DataRegister(DataRegister(4)) }
ADDIH { lhs: DataRegister(4), rhs: Const16(65535), dest: DataRegister(4) }
CALLLIBRARY(I32Rotl)
RSLCX
ADDIHA { lhs: AddressRegister(0), rhs: Const16(16), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(1184), dest: DataRegister(6) }
AND { lhs: DataRegister(6), rhs: DataRegister(DataRegister(2)), dest: DataRegister(6) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(6), base: AddressRegister(2), offset: Const16(1184) }
J { target: 46 }
STWPI { src: DataRegister(2), base: AddressRegister(9), offset: Const10(-4) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(6) }
EQ { lhs: DataRegister(6), rhs: DataRegister(DataRegister(4)), dest: DataRegister(6) }
JNE { target: 54, lhs: DataRegister(6), rhs: Const4(0) }
MOVA { src: DataRegister(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(2), base: AddressRegister(2), offset: Const16(12) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(4), base: AddressRegister(2), offset: Const16(8) }
RSLCX
RET
SHA { src: DataRegister(1), count: Const9(Const9(29)), dest: DataRegister(6) }
SVLCX
MOV { src: DataRegister(DataRegister(6)), dest: DataRegister(DataRegister(5)) }
MOVU { src: Const16(65534), dest: DataRegister(DataRegister(4)) }
ADDIH { lhs: DataRegister(4), rhs: Const16(65535), dest: DataRegister(4) }
CALLLIBRARY(I32Rotl)
RSLCX
ADDIHA { lhs: AddressRegister(0), rhs: Const16(16), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(1180), dest: DataRegister(7) }
AND { lhs: DataRegister(7), rhs: DataRegister(DataRegister(2)), dest: DataRegister(7) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(7), base: AddressRegister(2), offset: Const16(1180) }
RSLCX
RET
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(3), base: AddressRegister(2), offset: Const16(24) }
EQ { lhs: DataRegister(1), rhs: Const9(Const9(0)), dest: DataRegister(6) }
JNE { target: 55, lhs: DataRegister(6), rhs: Const4(0) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(1), base: AddressRegister(2), offset: Const16(16) }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(2), base: AddressRegister(2), offset: Const16(24) }
EQ { lhs: DataRegister(1), rhs: Const9(Const9(0)), dest: DataRegister(6) }
JNE { target: 46, lhs: DataRegister(6), rhs: Const4(0) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(1), base: AddressRegister(2), offset: Const16(20) }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(2), base: AddressRegister(2), offset: Const16(24) }
RSLCX
RET
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(1) }
LDW { base: AddressRegister(9), offset: Const16(65532), dest: DataRegister(0) }
ADD { lhs: DataRegister(0), rhs: DataRegister(DataRegister(1)), dest: DataRegister(2) }
AND { lhs: DataRegister(3), rhs: Const9(Const9(1)), dest: DataRegister(4) }
JNE { target: 57, lhs: DataRegister(4), rhs: Const4(0) }
AND { lhs: DataRegister(3), rhs: Const9(Const9(2)), dest: DataRegister(4) }
EQ { lhs: DataRegister(4), rhs: Const9(Const9(0)), dest: DataRegister(5) }
JNE { target: 56, lhs: DataRegister(5), rhs: Const4(0) }
ADD { lhs: DataRegister(3), rhs: DataRegister(DataRegister(1)), dest: DataRegister(1) }
SUB { lhs: DataRegister(0), rhs: DataRegister(3), dest: DataRegister(0) }
ADDIHA { lhs: AddressRegister(0), rhs: Const16(16), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(1196), dest: DataRegister(4) }
NE { lhs: DataRegister(0), rhs: DataRegister(DataRegister(4)), dest: DataRegister(4) }
JNE { target: 58, lhs: DataRegister(4), rhs: Const4(0) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(4), dest: DataRegister(4) }
AND { lhs: DataRegister(4), rhs: Const9(Const9(3)), dest: DataRegister(4) }
NE { lhs: DataRegister(4), rhs: Const9(Const9(3)), dest: DataRegister(5) }
JNE { target: 57, lhs: DataRegister(5), rhs: Const4(0) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(1), base: AddressRegister(2), offset: Const16(1188) }
MOVU { src: Const16(65534), dest: DataRegister(DataRegister(4)) }
ADDIH { lhs: DataRegister(4), rhs: Const16(65535), dest: DataRegister(4) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(4), dest: DataRegister(4) }
AND { lhs: DataRegister(4), rhs: DataRegister(DataRegister(4)), dest: DataRegister(4) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(4), base: AddressRegister(2), offset: Const16(4) }
OR { lhs: DataRegister(1), rhs: Const9(Const9(1)), dest: DataRegister(4) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(4), base: AddressRegister(2), offset: Const16(4) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(1), base: AddressRegister(2), offset: Const16(0) }
J { target: 56 }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(3), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 21 }
AND { lhs: DataRegister(3), rhs: Const9(Const9(2)), dest: DataRegister(4) }
JNE { target: 62, lhs: DataRegister(4), rhs: Const4(0) }
ADDIHA { lhs: AddressRegister(0), rhs: Const16(16), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(1200), dest: DataRegister(4) }
EQ { lhs: DataRegister(2), rhs: DataRegister(DataRegister(4)), dest: DataRegister(4) }
JNE { target: 60, lhs: DataRegister(4), rhs: Const4(0) }
ADDIHA { lhs: AddressRegister(0), rhs: Const16(16), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(1196), dest: DataRegister(4) }
EQ { lhs: DataRegister(2), rhs: DataRegister(DataRegister(4)), dest: DataRegister(4) }
JNE { target: 59, lhs: DataRegister(4), rhs: Const4(0) }
STWPI { src: DataRegister(2), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(65528), dest: DataRegister(DataRegister(4)) }
ADDIH { lhs: DataRegister(4), rhs: Const16(65535), dest: DataRegister(4) }
AND { lhs: DataRegister(3), rhs: DataRegister(DataRegister(4)), dest: DataRegister(3) }
STWPI { src: DataRegister(3), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 21 }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
ADD { lhs: DataRegister(3), rhs: DataRegister(DataRegister(1)), dest: DataRegister(1) }
OR { lhs: DataRegister(1), rhs: Const9(Const9(1)), dest: DataRegister(4) }
LDAPI { base: AddressRegister(9), offset: Const10(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(4), base: AddressRegister(2), offset: Const16(4) }
ADD { lhs: DataRegister(0), rhs: DataRegister(DataRegister(1)), dest: DataRegister(4) }
MOVA { src: DataRegister(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(1), base: AddressRegister(2), offset: Const16(0) }
ADDIHA { lhs: AddressRegister(0), rhs: Const16(16), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(1196), dest: DataRegister(4) }
NE { lhs: DataRegister(0), rhs: DataRegister(DataRegister(4)), dest: DataRegister(4) }
JNE { target: 61, lhs: DataRegister(4), rhs: Const4(0) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(1), base: AddressRegister(2), offset: Const16(1188) }
RSLCX
RET
MOVU { src: Const16(65534), dest: DataRegister(DataRegister(4)) }
ADDIH { lhs: DataRegister(4), rhs: Const16(65535), dest: DataRegister(4) }
AND { lhs: DataRegister(3), rhs: DataRegister(DataRegister(4)), dest: DataRegister(4) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(4), base: AddressRegister(2), offset: Const16(4) }
OR { lhs: DataRegister(1), rhs: Const9(Const9(1)), dest: DataRegister(4) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(4), base: AddressRegister(2), offset: Const16(4) }
ADD { lhs: DataRegister(0), rhs: DataRegister(DataRegister(1)), dest: DataRegister(4) }
MOVA { src: DataRegister(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(1), base: AddressRegister(2), offset: Const16(0) }
LTU { lhs: DataRegister(1), rhs: Const9(Const9(256)), dest: DataRegister(4) }
JNE { target: 63, lhs: DataRegister(4), rhs: Const4(0) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 23 }
RSLCX
RET
MOVU { src: Const16(65528), dest: DataRegister(DataRegister(4)) }
ADDIH { lhs: DataRegister(4), rhs: Const16(65535), dest: DataRegister(4) }
AND { lhs: DataRegister(1), rhs: DataRegister(DataRegister(4)), dest: DataRegister(4) }
ADDI { lhs: DataRegister(4), rhs: Const16(916), dest: DataRegister(2) }
ADDIH { lhs: DataRegister(2), rhs: Const16(16), dest: DataRegister(2) }
STWPI { src: DataRegister(3), base: AddressRegister(9), offset: Const10(-4) }
SHA { src: DataRegister(1), count: Const9(Const9(29)), dest: DataRegister(4) }
MOVU { src: Const16(1), dest: DataRegister(DataRegister(5)) }
SH { src: DataRegister(5), count: DataRegister(DataRegister(4)), dest: DataRegister(1) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(4) }
AND { lhs: DataRegister(4), rhs: DataRegister(DataRegister(1)), dest: DataRegister(4) }
JNE { target: 65, lhs: DataRegister(4), rhs: Const4(0) }
OR { lhs: DataRegister(3), rhs: DataRegister(DataRegister(1)), dest: DataRegister(4) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(4), base: AddressRegister(2), offset: Const16(1180) }
MOV { src: DataRegister(DataRegister(2)), dest: DataRegister(DataRegister(1)) }
J { target: 64 }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(8) }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(12) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(2), base: AddressRegister(2), offset: Const16(12) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(1), base: AddressRegister(2), offset: Const16(8) }
RSLCX
RET
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(1200) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(4)) }
STWPI { src: DataRegister(4), base: AddressRegister(9), offset: Const10(-4) }
ADDIHA { lhs: AddressRegister(0), rhs: Const16(16), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(1192), dest: DataRegister(4) }
ADD { lhs: DataRegister(4), rhs: DataRegister(DataRegister(1)), dest: DataRegister(1) }
LDAPI { base: AddressRegister(9), offset: Const10(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(1), base: AddressRegister(2), offset: Const16(1192) }
OR { lhs: DataRegister(1), rhs: Const9(Const9(1)), dest: DataRegister(4) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(4), base: AddressRegister(2), offset: Const16(4) }
ADDIHA { lhs: AddressRegister(0), rhs: Const16(16), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(1196), dest: DataRegister(4) }
NE { lhs: DataRegister(0), rhs: DataRegister(DataRegister(4)), dest: DataRegister(4) }
JNE { target: 56, lhs: DataRegister(4), rhs: Const4(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(4)) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(4), base: AddressRegister(2), offset: Const16(1188) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(4)) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(4), base: AddressRegister(2), offset: Const16(1196) }
RSLCX
RET
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(1196) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(4)) }
STWPI { src: DataRegister(4), base: AddressRegister(9), offset: Const10(-4) }
ADDIHA { lhs: AddressRegister(0), rhs: Const16(16), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(1188), dest: DataRegister(4) }
ADD { lhs: DataRegister(4), rhs: DataRegister(DataRegister(1)), dest: DataRegister(1) }
LDAPI { base: AddressRegister(9), offset: Const10(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(1), base: AddressRegister(2), offset: Const16(1188) }
OR { lhs: DataRegister(1), rhs: Const9(Const9(1)), dest: DataRegister(4) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(4), base: AddressRegister(2), offset: Const16(4) }
ADD { lhs: DataRegister(0), rhs: DataRegister(DataRegister(1)), dest: DataRegister(4) }
MOVA { src: DataRegister(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(1), base: AddressRegister(2), offset: Const16(0) }
RSLCX
RET
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(1) }
LDW { base: AddressRegister(9), offset: Const16(65532), dest: DataRegister(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(2)) }
LTU { lhs: DataRegister(1), rhs: Const9(Const9(256)), dest: DataRegister(6) }
JNE { target: 66, lhs: DataRegister(6), rhs: Const4(0) }
MOVU { src: Const16(31), dest: DataRegister(DataRegister(2)) }
MOVU { src: Const16(65535), dest: DataRegister(DataRegister(6)) }
ADDIH { lhs: DataRegister(6), rhs: Const16(255), dest: DataRegister(6) }
LTU { lhs: DataRegister(6), rhs: DataRegister(DataRegister(1)), dest: DataRegister(6) }
JNE { target: 66, lhs: DataRegister(6), rhs: Const4(0) }
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(6), dest: DataRegister(DataRegister(6)) }
STWPI { src: DataRegister(6), base: AddressRegister(9), offset: Const10(-4) }
SHA { src: DataRegister(1), count: Const9(Const9(24)), dest: DataRegister(6) }
CLZ { src: DataRegister(6), dest: DataRegister(2) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(6) }
SUB { lhs: DataRegister(6), rhs: DataRegister(2), dest: DataRegister(6) }
RSUB0 { src: DataRegister(6) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(7) }
SHA { src: DataRegister(7), count: DataRegister(DataRegister(6)), dest: DataRegister(7) }
AND { lhs: DataRegister(7), rhs: Const9(Const9(1)), dest: DataRegister(8) }
SH { src: DataRegister(2), count: Const9(Const9(1)), dest: DataRegister(9) }
SUB { lhs: DataRegister(8), rhs: DataRegister(9), dest: DataRegister(10) }
ADDI { lhs: DataRegister(10), rhs: Const16(62), dest: DataRegister(2) }
MOV { src: Const16(Const16(0)), dest: ExtendedRegister(ExtendedRegister(6)) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STD { src: ExtendedRegister(6), base: AddressRegister(2), offset: Const16(16) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(2), base: AddressRegister(2), offset: Const16(28) }
SH { src: DataRegister(2), count: Const9(Const9(2)), dest: DataRegister(6) }
ADDI { lhs: DataRegister(6), rhs: Const16(772), dest: DataRegister(3) }
ADDIH { lhs: DataRegister(3), rhs: Const16(16), dest: DataRegister(3) }
MOVU { src: Const16(1), dest: DataRegister(DataRegister(6)) }
SH { src: DataRegister(6), count: DataRegister(DataRegister(2)), dest: DataRegister(4) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(6) }
AND { lhs: DataRegister(6), rhs: DataRegister(DataRegister(4)), dest: DataRegister(6) }
JNE { target: 67, lhs: DataRegister(6), rhs: Const4(0) }
MOVA { src: DataRegister(3), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(0) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(3), base: AddressRegister(2), offset: Const16(24) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(12) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(8) }
ADDIHA { lhs: AddressRegister(0), rhs: Const16(16), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(1184), dest: DataRegister(6) }
OR { lhs: DataRegister(6), rhs: DataRegister(DataRegister(4)), dest: DataRegister(6) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(6), base: AddressRegister(2), offset: Const16(1184) }
LEA { base: AddressRegister(9), offset: Const16(24), dest: AddressRegister(9) }
RSLCX
RET
MOVU { src: Const16(65528), dest: DataRegister(DataRegister(6)) }
ADDIH { lhs: DataRegister(6), rhs: Const16(65535), dest: DataRegister(6) }
MOVA { src: DataRegister(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(4), dest: DataRegister(6) }
AND { lhs: DataRegister(6), rhs: DataRegister(DataRegister(6)), dest: DataRegister(6) }
NE { lhs: DataRegister(6), rhs: DataRegister(DataRegister(1)), dest: DataRegister(7) }
JNE { target: 70, lhs: DataRegister(7), rhs: Const4(0) }
MOV { src: DataRegister(DataRegister(4)), dest: DataRegister(DataRegister(2)) }
J { target: 69 }
SHA { src: DataRegister(2), count: Const9(Const9(31)), dest: DataRegister(6) }
RSUB { lhs: Const9(25), rhs: DataRegister(6), dest: DataRegister(7) }
EQ { lhs: DataRegister(2), rhs: Const9(Const9(31)), dest: DataRegister(8) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(9)) }
SEL { selector: DataRegister(9), lhs: DataRegister(7), rhs: DataRegister(DataRegister(8)), dest: DataRegister(9) }
SH { src: DataRegister(1), count: DataRegister(DataRegister(9)), dest: DataRegister(3) }
SHA { src: DataRegister(3), count: Const9(Const9(3)), dest: DataRegister(6) }
AND { lhs: DataRegister(6), rhs: Const9(Const9(4)), dest: DataRegister(7) }
ADD { lhs: DataRegister(4), rhs: DataRegister(DataRegister(7)), dest: DataRegister(8) }
ADDI { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(5) }
EQ { lhs: DataRegister(2), rhs: Const9(Const9(0)), dest: DataRegister(6) }
JNE { target: 68, lhs: DataRegister(6), rhs: Const4(0) }
SH { src: DataRegister(3), count: Const9(Const9(1)), dest: DataRegister(3) }
MOV { src: DataRegister(DataRegister(2)), dest: DataRegister(DataRegister(4)) }
MOVU { src: Const16(65528), dest: DataRegister(DataRegister(6)) }
ADDIH { lhs: DataRegister(6), rhs: Const16(65535), dest: DataRegister(6) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(4), dest: DataRegister(6) }
AND { lhs: DataRegister(6), rhs: DataRegister(DataRegister(6)), dest: DataRegister(6) }
NE { lhs: DataRegister(6), rhs: DataRegister(DataRegister(1)), dest: DataRegister(7) }
JNE { target: 71, lhs: DataRegister(7), rhs: Const4(0) }
MOVA { src: DataRegister(3), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(12) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(8) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(6)) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(6), base: AddressRegister(2), offset: Const16(24) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(2), base: AddressRegister(2), offset: Const16(12) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(3), base: AddressRegister(2), offset: Const16(8) }
RSLCX
RET
MOVA { src: DataRegister(5), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(0) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(4), base: AddressRegister(2), offset: Const16(24) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(12) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(8) }
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(0) }
ADDI { lhs: DataRegister(0), rhs: Const16(65528), dest: DataRegister(1) }
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
ADDI { lhs: DataRegister(0), rhs: Const16(65532), dest: DataRegister(6) }
MOVU { src: Const16(65528), dest: DataRegister(DataRegister(6)) }
ADDIH { lhs: DataRegister(6), rhs: Const16(65535), dest: DataRegister(6) }
AND { lhs: DataRegister(2), rhs: DataRegister(DataRegister(6)), dest: DataRegister(0) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(6) }
ADD { lhs: DataRegister(6), rhs: DataRegister(DataRegister(0)), dest: DataRegister(3) }
AND { lhs: DataRegister(2), rhs: Const9(Const9(1)), dest: DataRegister(6) }
JNE { target: 75, lhs: DataRegister(6), rhs: Const4(0) }
AND { lhs: DataRegister(2), rhs: Const9(Const9(2)), dest: DataRegister(6) }
EQ { lhs: DataRegister(6), rhs: Const9(Const9(0)), dest: DataRegister(7) }
JNE { target: 74, lhs: DataRegister(7), rhs: Const4(0) }
ADD { lhs: DataRegister(2), rhs: DataRegister(DataRegister(0)), dest: DataRegister(0) }
SUB { lhs: DataRegister(1), rhs: DataRegister(2), dest: DataRegister(1) }
ADDIHA { lhs: AddressRegister(0), rhs: Const16(16), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(1196), dest: DataRegister(6) }
NE { lhs: DataRegister(1), rhs: DataRegister(DataRegister(6)), dest: DataRegister(6) }
JNE { target: 76, lhs: DataRegister(6), rhs: Const4(0) }
MOVA { src: DataRegister(3), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(4), dest: DataRegister(6) }
AND { lhs: DataRegister(6), rhs: Const9(Const9(3)), dest: DataRegister(6) }
NE { lhs: DataRegister(6), rhs: Const9(Const9(3)), dest: DataRegister(7) }
JNE { target: 75, lhs: DataRegister(7), rhs: Const4(0) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(1188) }
MOVU { src: Const16(65534), dest: DataRegister(DataRegister(6)) }
ADDIH { lhs: DataRegister(6), rhs: Const16(65535), dest: DataRegister(6) }
MOVA { src: DataRegister(3), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(4), dest: DataRegister(6) }
AND { lhs: DataRegister(6), rhs: DataRegister(DataRegister(6)), dest: DataRegister(6) }
MOVA { src: DataRegister(3), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(6), base: AddressRegister(2), offset: Const16(4) }
OR { lhs: DataRegister(0), rhs: Const9(Const9(1)), dest: DataRegister(6) }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(6), base: AddressRegister(2), offset: Const16(4) }
MOVA { src: DataRegister(3), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(0) }
LEA { base: AddressRegister(9), offset: Const16(24), dest: AddressRegister(9) }
RSLCX
RET
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(2), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 21 }
AND { lhs: DataRegister(2), rhs: Const9(Const9(2)), dest: DataRegister(6) }
JNE { target: 79, lhs: DataRegister(6), rhs: Const4(0) }
ADDIHA { lhs: AddressRegister(0), rhs: Const16(16), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(1200), dest: DataRegister(6) }
EQ { lhs: DataRegister(3), rhs: DataRegister(DataRegister(6)), dest: DataRegister(6) }
JNE { target: 77, lhs: DataRegister(6), rhs: Const4(0) }
ADDIHA { lhs: AddressRegister(0), rhs: Const16(16), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(1196), dest: DataRegister(6) }
EQ { lhs: DataRegister(3), rhs: DataRegister(DataRegister(6)), dest: DataRegister(6) }
JNE { target: 72, lhs: DataRegister(6), rhs: Const4(0) }
STWPI { src: DataRegister(3), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(65528), dest: DataRegister(DataRegister(6)) }
ADDIH { lhs: DataRegister(6), rhs: Const16(65535), dest: DataRegister(6) }
AND { lhs: DataRegister(2), rhs: DataRegister(DataRegister(6)), dest: DataRegister(2) }
STWPI { src: DataRegister(2), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 21 }
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
ADD { lhs: DataRegister(2), rhs: DataRegister(DataRegister(0)), dest: DataRegister(0) }
OR { lhs: DataRegister(0), rhs: Const9(Const9(1)), dest: DataRegister(6) }
LDAPI { base: AddressRegister(9), offset: Const10(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(6), base: AddressRegister(2), offset: Const16(4) }
ADD { lhs: DataRegister(1), rhs: DataRegister(DataRegister(0)), dest: DataRegister(6) }
MOVA { src: DataRegister(6), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(0) }
ADDIHA { lhs: AddressRegister(0), rhs: Const16(16), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(1196), dest: DataRegister(6) }
NE { lhs: DataRegister(1), rhs: DataRegister(DataRegister(6)), dest: DataRegister(6) }
JNE { target: 78, lhs: DataRegister(6), rhs: Const4(0) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(1188) }
RSLCX
RET
MOVU { src: Const16(65534), dest: DataRegister(DataRegister(6)) }
ADDIH { lhs: DataRegister(6), rhs: Const16(65535), dest: DataRegister(6) }
AND { lhs: DataRegister(2), rhs: DataRegister(DataRegister(6)), dest: DataRegister(6) }
MOVA { src: DataRegister(3), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(6), base: AddressRegister(2), offset: Const16(4) }
OR { lhs: DataRegister(0), rhs: Const9(Const9(1)), dest: DataRegister(6) }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(6), base: AddressRegister(2), offset: Const16(4) }
ADD { lhs: DataRegister(1), rhs: DataRegister(DataRegister(0)), dest: DataRegister(6) }
MOVA { src: DataRegister(6), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(0) }
LTU { lhs: DataRegister(0), rhs: Const9(Const9(256)), dest: DataRegister(6) }
JNE { target: 73, lhs: DataRegister(6), rhs: Const4(0) }
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 23 }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(1)) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(6)) }
STWPI { src: DataRegister(6), base: AddressRegister(9), offset: Const10(-4) }
ADDIHA { lhs: AddressRegister(0), rhs: Const16(16), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(1220), dest: DataRegister(6) }
ADDI { lhs: DataRegister(6), rhs: Const16(65535), dest: DataRegister(0) }
LDAPI { base: AddressRegister(9), offset: Const10(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(1220) }
JNE { target: 74, lhs: DataRegister(0), rhs: Const4(0) }
EQ { lhs: DataRegister(0), rhs: Const9(Const9(0)), dest: DataRegister(6) }
JNE { target: 80, lhs: DataRegister(6), rhs: Const4(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(1)) }
ADDI { lhs: DataRegister(1), rhs: Const16(1), dest: DataRegister(1) }
JNE { target: 81, lhs: DataRegister(0), rhs: Const4(0) }
MOVU { src: Const16(4095), dest: DataRegister(DataRegister(6)) }
LTU { lhs: DataRegister(6), rhs: DataRegister(DataRegister(1)), dest: DataRegister(6) }
MOVU { src: Const16(4095), dest: DataRegister(DataRegister(7)) }
SEL { selector: DataRegister(1), lhs: DataRegister(7), rhs: DataRegister(DataRegister(6)), dest: DataRegister(7) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(7), base: AddressRegister(2), offset: Const16(1220) }
RSLCX
RET
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(1), base: AddressRegister(2), offset: Const16(1200) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(6)) }
STWPI { src: DataRegister(6), base: AddressRegister(9), offset: Const10(-4) }
ADDIHA { lhs: AddressRegister(0), rhs: Const16(16), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(1192), dest: DataRegister(6) }
ADD { lhs: DataRegister(6), rhs: DataRegister(DataRegister(0)), dest: DataRegister(0) }
LDAPI { base: AddressRegister(9), offset: Const10(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(1192) }
OR { lhs: DataRegister(0), rhs: Const9(Const9(1)), dest: DataRegister(6) }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(6), base: AddressRegister(2), offset: Const16(4) }
ADDIHA { lhs: AddressRegister(0), rhs: Const16(16), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(1196), dest: DataRegister(6) }
NE { lhs: DataRegister(1), rhs: DataRegister(DataRegister(6)), dest: DataRegister(6) }
JNE { target: 82, lhs: DataRegister(6), rhs: Const4(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(6)) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(6), base: AddressRegister(2), offset: Const16(1188) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(6)) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(6), base: AddressRegister(2), offset: Const16(1196) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(6) }
GEU { lhs: DataRegister(4), rhs: DataRegister(DataRegister(6)), dest: DataRegister(6) }
JNE { target: 74, lhs: DataRegister(6), rhs: Const4(0) }
EQ { lhs: DataRegister(3), rhs: Const9(Const9(0)), dest: DataRegister(6) }
JNE { target: 74, lhs: DataRegister(6), rhs: Const4(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(1)) }
LTU { lhs: DataRegister(5), rhs: Const9(Const9(41)), dest: DataRegister(6) }
JNE { target: 83, lhs: DataRegister(6), rhs: Const4(0) }
MOVU { src: Const16(900), dest: DataRegister(DataRegister(0)) }
ADDIH { lhs: DataRegister(0), rhs: Const16(16), dest: DataRegister(0) }
LTU { lhs: DataRegister(3), rhs: DataRegister(DataRegister(2)), dest: DataRegister(6) }
JNE { target: 85, lhs: DataRegister(6), rhs: Const4(0) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(4), dest: DataRegister(6) }
ADD { lhs: DataRegister(2), rhs: DataRegister(DataRegister(6)), dest: DataRegister(6) }
LTU { lhs: DataRegister(3), rhs: DataRegister(DataRegister(6)), dest: DataRegister(7) }
JNE { target: 83, lhs: DataRegister(7), rhs: Const4(0) }
JNE { target: 84, lhs: DataRegister(0), rhs: Const4(0) }
EQ { lhs: DataRegister(0), rhs: Const9(Const9(0)), dest: DataRegister(6) }
JNE { target: 86, lhs: DataRegister(6), rhs: Const4(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(1)) }
ADDI { lhs: DataRegister(1), rhs: Const16(1), dest: DataRegister(1) }
JNE { target: 87, lhs: DataRegister(0), rhs: Const4(0) }
MOVU { src: Const16(4095), dest: DataRegister(DataRegister(6)) }
LTU { lhs: DataRegister(6), rhs: DataRegister(DataRegister(1)), dest: DataRegister(6) }
MOVU { src: Const16(4095), dest: DataRegister(DataRegister(7)) }
SEL { selector: DataRegister(1), lhs: DataRegister(7), rhs: DataRegister(DataRegister(6)), dest: DataRegister(7) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(7), base: AddressRegister(2), offset: Const16(1220) }
GEU { lhs: DataRegister(4), rhs: DataRegister(DataRegister(5)), dest: DataRegister(6) }
JNE { target: 74, lhs: DataRegister(6), rhs: Const4(0) }
MOVU { src: Const16(65535), dest: DataRegister(DataRegister(6)) }
ADDIH { lhs: DataRegister(6), rhs: Const16(65535), dest: DataRegister(6) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(6), base: AddressRegister(2), offset: Const16(1212) }
RSLCX
RET
MOVU { src: Const16(65528), dest: DataRegister(DataRegister(6)) }
ADDIH { lhs: DataRegister(6), rhs: Const16(65535), dest: DataRegister(6) }
AND { lhs: DataRegister(0), rhs: DataRegister(DataRegister(6)), dest: DataRegister(6) }
ADDI { lhs: DataRegister(6), rhs: Const16(916), dest: DataRegister(3) }
ADDIH { lhs: DataRegister(3), rhs: Const16(16), dest: DataRegister(3) }
STWPI { src: DataRegister(2), base: AddressRegister(9), offset: Const10(-4) }
SHA { src: DataRegister(0), count: Const9(Const9(29)), dest: DataRegister(6) }
MOVU { src: Const16(1), dest: DataRegister(DataRegister(7)) }
SH { src: DataRegister(7), count: DataRegister(DataRegister(6)), dest: DataRegister(0) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(6) }
AND { lhs: DataRegister(6), rhs: DataRegister(DataRegister(0)), dest: DataRegister(6) }
JNE { target: 89, lhs: DataRegister(6), rhs: Const4(0) }
OR { lhs: DataRegister(2), rhs: DataRegister(DataRegister(0)), dest: DataRegister(6) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(6), base: AddressRegister(2), offset: Const16(1180) }
MOV { src: DataRegister(DataRegister(3)), dest: DataRegister(DataRegister(0)) }
J { target: 88 }
MOVA { src: DataRegister(3), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(1), base: AddressRegister(2), offset: Const16(8) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(1), base: AddressRegister(2), offset: Const16(12) }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(3), base: AddressRegister(2), offset: Const16(12) }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(8) }
RSLCX
RET
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(1), base: AddressRegister(2), offset: Const16(1196) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(6)) }
STWPI { src: DataRegister(6), base: AddressRegister(9), offset: Const10(-4) }
ADDIHA { lhs: AddressRegister(0), rhs: Const16(16), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(1188), dest: DataRegister(6) }
ADD { lhs: DataRegister(6), rhs: DataRegister(DataRegister(0)), dest: DataRegister(0) }
LDAPI { base: AddressRegister(9), offset: Const10(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(1188) }
OR { lhs: DataRegister(0), rhs: Const9(Const9(1)), dest: DataRegister(6) }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(6), base: AddressRegister(2), offset: Const16(4) }
ADD { lhs: DataRegister(1), rhs: DataRegister(DataRegister(0)), dest: DataRegister(6) }
MOVA { src: DataRegister(6), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(0) }
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(0) }
LDW { base: AddressRegister(1), offset: Const16(0), dest: DataRegister(8) }
ADDI { lhs: DataRegister(8), rhs: Const16(65520), dest: DataRegister(1) }
STW { src: DataRegister(1), base: AddressRegister(1), offset: Const16(0) }
LTU { lhs: DataRegister(0), rhs: Const9(Const9(245)), dest: DataRegister(8) }
JNE { target: 97, lhs: DataRegister(8), rhs: Const4(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(2)) }
MOVU { src: Const16(65485), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(65534), dest: DataRegister(8) }
GEU { lhs: DataRegister(0), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
JNE { target: 90, lhs: DataRegister(8), rhs: Const4(0) }
ADDI { lhs: DataRegister(0), rhs: Const16(11), dest: DataRegister(0) }
MOVU { src: Const16(65528), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(65535), dest: DataRegister(8) }
AND { lhs: DataRegister(0), rhs: DataRegister(DataRegister(8)), dest: DataRegister(3) }
EQ { lhs: DataRegister(4), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 93, lhs: DataRegister(8), rhs: Const4(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(5)) }
LTU { lhs: DataRegister(3), rhs: Const9(Const9(256)), dest: DataRegister(8) }
JNE { target: 98, lhs: DataRegister(8), rhs: Const4(0) }
MOVU { src: Const16(31), dest: DataRegister(DataRegister(5)) }
MOVU { src: Const16(65535), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(255), dest: DataRegister(8) }
LTU { lhs: DataRegister(8), rhs: DataRegister(DataRegister(3)), dest: DataRegister(8) }
JNE { target: 98, lhs: DataRegister(8), rhs: Const4(0) }
STWPI { src: DataRegister(3), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(6), dest: DataRegister(DataRegister(8)) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
SHA { src: DataRegister(0), count: Const9(Const9(24)), dest: DataRegister(8) }
CLZ { src: DataRegister(8), dest: DataRegister(0) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
SUB { lhs: DataRegister(8), rhs: DataRegister(0), dest: DataRegister(8) }
RSUB0 { src: DataRegister(8) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(9) }
SHA { src: DataRegister(9), count: DataRegister(DataRegister(8)), dest: DataRegister(9) }
AND { lhs: DataRegister(9), rhs: Const9(Const9(1)), dest: DataRegister(10) }
SH { src: DataRegister(0), count: Const9(Const9(1)), dest: DataRegister(11) }
SUB { lhs: DataRegister(10), rhs: DataRegister(11), dest: DataRegister(12) }
ADDI { lhs: DataRegister(12), rhs: Const16(62), dest: DataRegister(5) }
RSUB0 { src: DataRegister(2) }
SH { src: DataRegister(5), count: Const9(Const9(2)), dest: DataRegister(8) }
ADDI { lhs: DataRegister(8), rhs: Const16(772), dest: DataRegister(9) }
ADDIH { lhs: DataRegister(9), rhs: Const16(16), dest: DataRegister(9) }
JNE { target: 99, lhs: DataRegister(6), rhs: Const4(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(0)) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(7)) }
J { target: 96 }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(0)) }
SHA { src: DataRegister(5), count: Const9(Const9(31)), dest: DataRegister(8) }
RSUB { lhs: Const9(25), rhs: DataRegister(8), dest: DataRegister(9) }
EQ { lhs: DataRegister(5), rhs: Const9(Const9(31)), dest: DataRegister(10) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(11)) }
SEL { selector: DataRegister(11), lhs: DataRegister(9), rhs: DataRegister(DataRegister(10)), dest: DataRegister(11) }
SH { src: DataRegister(3), count: DataRegister(DataRegister(11)), dest: DataRegister(12) }
STW { src: DataRegister(12), base: AddressRegister(10), offset: Const16(4) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(7)) }
MOVU { src: Const16(65528), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(65535), dest: DataRegister(8) }
MOVA { src: DataRegister(6), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(4), dest: DataRegister(8) }
AND { lhs: DataRegister(8), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(8) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
LTU { lhs: DataRegister(8), rhs: DataRegister(DataRegister(3)), dest: DataRegister(8) }
JNE { target: 101, lhs: DataRegister(8), rhs: Const4(0) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
SUB { lhs: DataRegister(8), rhs: DataRegister(3), dest: DataRegister(8) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(8) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
GEU { lhs: DataRegister(8), rhs: DataRegister(DataRegister(2)), dest: DataRegister(8) }
JNE { target: 101, lhs: DataRegister(8), rhs: Const4(0) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(2) }
MOV { src: DataRegister(DataRegister(6)), dest: DataRegister(DataRegister(7)) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
JNE { target: 101, lhs: DataRegister(8), rhs: Const4(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(2)) }
MOV { src: DataRegister(DataRegister(6)), dest: DataRegister(DataRegister(7)) }
MOV { src: DataRegister(DataRegister(6)), dest: DataRegister(DataRegister(0)) }
J { target: 95 }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
SHA { src: DataRegister(8), count: Const9(Const9(3)), dest: DataRegister(8) }
AND { lhs: DataRegister(8), rhs: Const9(Const9(4)), dest: DataRegister(9) }
ADD { lhs: DataRegister(6), rhs: DataRegister(DataRegister(9)), dest: DataRegister(10) }
ADDI { lhs: DataRegister(10), rhs: Const16(16), dest: DataRegister(11) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
NE { lhs: DataRegister(8), rhs: DataRegister(DataRegister(6)), dest: DataRegister(8) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(9) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(9) }
SEL { selector: DataRegister(9), lhs: DataRegister(9), rhs: DataRegister(DataRegister(8)), dest: DataRegister(9) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(10) }
SEL { selector: DataRegister(9), lhs: DataRegister(0), rhs: DataRegister(DataRegister(10)), dest: DataRegister(0) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
SH { src: DataRegister(8), count: Const9(Const9(1)), dest: DataRegister(8) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(4) }
EQ { lhs: DataRegister(6), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 96, lhs: DataRegister(8), rhs: Const4(0) }
J { target: 100 }
STWPI { src: DataRegister(6), base: AddressRegister(9), offset: Const10(-4) }
ADDI { lhs: DataRegister(0), rhs: Const16(11), dest: DataRegister(8) }
AND { lhs: DataRegister(8), rhs: Const9(Const9(504)), dest: DataRegister(9) }
LTU { lhs: DataRegister(0), rhs: Const9(Const9(11)), dest: DataRegister(10) }
MOVU { src: Const16(16), dest: DataRegister(DataRegister(11)) }
SEL { selector: DataRegister(11), lhs: DataRegister(9), rhs: DataRegister(DataRegister(10)), dest: DataRegister(3) }
SHA { src: DataRegister(3), count: Const9(Const9(29)), dest: DataRegister(2) }
RSUB0 { src: DataRegister(2) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
SHA { src: DataRegister(8), count: DataRegister(DataRegister(2)), dest: DataRegister(0) }
AND { lhs: DataRegister(0), rhs: Const9(Const9(3)), dest: DataRegister(8) }
EQ { lhs: DataRegister(8), rhs: Const9(Const9(0)), dest: DataRegister(9) }
JNE { target: 102, lhs: DataRegister(9), rhs: Const4(0) }
MOVU { src: Const16(65535), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(65535), dest: DataRegister(8) }
XOR { lhs: DataRegister(0), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
AND { lhs: DataRegister(8), rhs: Const9(Const9(1)), dest: DataRegister(9) }
ADD { lhs: DataRegister(9), rhs: DataRegister(DataRegister(2)), dest: DataRegister(3) }
SH { src: DataRegister(3), count: Const9(Const9(3)), dest: DataRegister(0) }
ADDI { lhs: DataRegister(0), rhs: Const16(916), dest: DataRegister(2) }
ADDIH { lhs: DataRegister(2), rhs: Const16(16), dest: DataRegister(2) }
STWPI { src: DataRegister(2), base: AddressRegister(9), offset: Const10(-4) }
ADDI { lhs: DataRegister(0), rhs: Const16(924), dest: DataRegister(8) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
EQ { lhs: DataRegister(8), rhs: DataRegister(DataRegister(7)), dest: DataRegister(8) }
JNE { target: 104, lhs: DataRegister(8), rhs: Const4(0) }
MOVA { src: DataRegister(7), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(2), base: AddressRegister(2), offset: Const16(12) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(7), base: AddressRegister(2), offset: Const16(8) }
J { target: 103 }
SVLCX
MOV { src: DataRegister(DataRegister(3)), dest: DataRegister(DataRegister(5)) }
MOVU { src: Const16(65534), dest: DataRegister(DataRegister(4)) }
ADDIH { lhs: DataRegister(4), rhs: Const16(65535), dest: DataRegister(4) }
CALLLIBRARY(I32Rotl)
RSLCX
AND { lhs: DataRegister(6), rhs: DataRegister(DataRegister(2)), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1180) }
ADDI { lhs: DataRegister(0), rhs: Const16(8), dest: DataRegister(2) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
SH { src: DataRegister(3), count: Const9(Const9(3)), dest: DataRegister(3) }
OR { lhs: DataRegister(3), rhs: Const9(Const9(3)), dest: DataRegister(8) }
LDAPI { base: AddressRegister(9), offset: Const10(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(4) }
ADD { lhs: DataRegister(0), rhs: DataRegister(DataRegister(3)), dest: DataRegister(0) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(4), dest: DataRegister(8) }
OR { lhs: DataRegister(8), rhs: Const9(Const9(1)), dest: DataRegister(8) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(4) }
J { target: 90 }
ADDIHA { lhs: AddressRegister(0), rhs: Const16(16), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(1188), dest: DataRegister(8) }
GEU { lhs: DataRegister(8), rhs: DataRegister(DataRegister(3)), dest: DataRegister(8) }
JNE { target: 93, lhs: DataRegister(8), rhs: Const4(0) }
JNE { target: 107, lhs: DataRegister(0), rhs: Const4(0) }
EQ { lhs: DataRegister(0), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 93, lhs: DataRegister(8), rhs: Const4(0) }
SHUFFLE { src: DataRegister(0), dest: DataRegister(8), mask: Const9(283) }
CLZ { src: DataRegister(8), dest: DataRegister(8) }
SH { src: DataRegister(8), count: Const9(Const9(2)), dest: DataRegister(9) }
ADDI { lhs: DataRegister(9), rhs: Const16(772), dest: DataRegister(10) }
ADDIH { lhs: DataRegister(10), rhs: Const16(16), dest: DataRegister(10) }
MOVU { src: Const16(65528), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(65535), dest: DataRegister(8) }
MOVA { src: DataRegister(7), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(4), dest: DataRegister(8) }
AND { lhs: DataRegister(8), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
SUB { lhs: DataRegister(8), rhs: DataRegister(3), dest: DataRegister(2) }
MOV { src: DataRegister(DataRegister(7)), dest: DataRegister(DataRegister(6)) }
JNE { target: 109, lhs: DataRegister(0), rhs: Const4(0) }
JNE { target: 109, lhs: DataRegister(0), rhs: Const4(0) }
NE { lhs: DataRegister(0), rhs: DataRegister(DataRegister(6)), dest: DataRegister(8) }
JNE { target: 112, lhs: DataRegister(8), rhs: Const4(0) }
STWPI { src: DataRegister(6), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(20), dest: DataRegister(DataRegister(8)) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(16), dest: DataRegister(DataRegister(8)) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
SEL { selector: DataRegister(8), lhs: DataRegister(8), rhs: DataRegister(DataRegister(0)), dest: DataRegister(8) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(9) }
ADD { lhs: DataRegister(9), rhs: DataRegister(DataRegister(8)), dest: DataRegister(9) }
JNE { target: 111, lhs: DataRegister(7), rhs: Const4(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(0)) }
J { target: 110 }
MOVA { src: DataRegister(7), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(12) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(7), base: AddressRegister(2), offset: Const16(8) }
J { target: 110 }
ADDI { lhs: DataRegister(6), rhs: Const16(20), dest: DataRegister(8) }
ADDI { lhs: DataRegister(6), rhs: Const16(16), dest: DataRegister(9) }
SEL { selector: DataRegister(8), lhs: DataRegister(9), rhs: DataRegister(DataRegister(0)), dest: DataRegister(10) }
STW { src: DataRegister(10), base: AddressRegister(10), offset: Const16(4) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(8) }
MOV { src: DataRegister(DataRegister(7)), dest: DataRegister(DataRegister(0)) }
ADDI { lhs: DataRegister(0), rhs: Const16(20), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
ADDI { lhs: DataRegister(0), rhs: Const16(16), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
SEL { selector: DataRegister(8), lhs: DataRegister(8), rhs: DataRegister(DataRegister(7)), dest: DataRegister(8) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(4) }
MOVU { src: Const16(20), dest: DataRegister(DataRegister(8)) }
SELN { selector: DataRegister(8), lhs: DataRegister(7), rhs: Const9(Const9(16)), dest: DataRegister(8) }
ADD { lhs: DataRegister(0), rhs: DataRegister(DataRegister(8)), dest: DataRegister(9) }
JNE { target: 113, lhs: DataRegister(7), rhs: Const4(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(8)) }
LDA { base: AddressRegister(10), offset: Const16(8), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(0) }
EQ { lhs: DataRegister(5), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 105, lhs: DataRegister(8), rhs: Const4(0) }
MOVA { src: DataRegister(6), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(28), dest: DataRegister(8) }
SH { src: DataRegister(8), count: Const9(Const9(2)), dest: DataRegister(8) }
ADDI { lhs: DataRegister(8), rhs: Const16(772), dest: DataRegister(7) }
ADDIH { lhs: DataRegister(7), rhs: Const16(16), dest: DataRegister(7) }
MOVA { src: DataRegister(7), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(0), dest: DataRegister(8) }
EQ { lhs: DataRegister(8), rhs: DataRegister(DataRegister(6)), dest: DataRegister(8) }
JNE { target: 114, lhs: DataRegister(8), rhs: Const4(0) }
MOVA { src: DataRegister(5), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(16), dest: DataRegister(8) }
EQ { lhs: DataRegister(8), rhs: DataRegister(DataRegister(6)), dest: DataRegister(8) }
MOVU { src: Const16(16), dest: DataRegister(DataRegister(9)) }
SELN { selector: DataRegister(9), lhs: DataRegister(8), rhs: Const9(Const9(20)), dest: DataRegister(9) }
ADD { lhs: DataRegister(5), rhs: DataRegister(DataRegister(9)), dest: DataRegister(10) }
MOVA { src: DataRegister(10), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(0) }
EQ { lhs: DataRegister(0), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 105, lhs: DataRegister(8), rhs: Const4(0) }
J { target: 106 }
MOVA { src: DataRegister(7), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(0) }
JNE { target: 106, lhs: DataRegister(0), rhs: Const4(0) }
SVLCX
MOVA { src: DataRegister(6), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(28), dest: DataRegister(5) }
MOVU { src: Const16(65534), dest: DataRegister(DataRegister(4)) }
ADDIH { lhs: DataRegister(4), rhs: Const16(65535), dest: DataRegister(4) }
CALLLIBRARY(I32Rotl)
RSLCX
ADDIHA { lhs: AddressRegister(0), rhs: Const16(16), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(1184), dest: DataRegister(8) }
AND { lhs: DataRegister(8), rhs: DataRegister(DataRegister(2)), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1184) }
J { target: 105 }
MOVU { src: Const16(65528), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(65535), dest: DataRegister(8) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(4), dest: DataRegister(8) }
AND { lhs: DataRegister(8), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
SUB { lhs: DataRegister(8), rhs: DataRegister(3), dest: DataRegister(7) }
STWPI { src: DataRegister(7), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(2), base: AddressRegister(9), offset: Const10(-4) }
LTU { lhs: DataRegister(7), rhs: DataRegister(DataRegister(2)), dest: DataRegister(7) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
SEL { selector: DataRegister(8), lhs: DataRegister(8), rhs: DataRegister(DataRegister(7)), dest: DataRegister(2) }
SEL { selector: DataRegister(0), lhs: DataRegister(6), rhs: DataRegister(DataRegister(7)), dest: DataRegister(6) }
MOV { src: DataRegister(DataRegister(0)), dest: DataRegister(DataRegister(7)) }
J { target: 108 }
SH { src: DataRegister(0), count: DataRegister(DataRegister(2)), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(2), dest: DataRegister(DataRegister(8)) }
SH { src: DataRegister(8), count: DataRegister(DataRegister(2)), dest: DataRegister(0) }
RSUB0 { src: DataRegister(8) }
OR { lhs: DataRegister(0), rhs: DataRegister(DataRegister(8)), dest: DataRegister(9) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(10) }
AND { lhs: DataRegister(10), rhs: DataRegister(DataRegister(9)), dest: DataRegister(10) }
SHUFFLE { src: DataRegister(10), dest: DataRegister(2), mask: Const9(283) }
CLZ { src: DataRegister(2), dest: DataRegister(2) }
SH { src: DataRegister(2), count: Const9(Const9(3)), dest: DataRegister(0) }
ADDI { lhs: DataRegister(0), rhs: Const16(916), dest: DataRegister(7) }
ADDIH { lhs: DataRegister(7), rhs: Const16(16), dest: DataRegister(7) }
STWPI { src: DataRegister(7), base: AddressRegister(9), offset: Const10(-4) }
ADDI { lhs: DataRegister(0), rhs: Const16(924), dest: DataRegister(8) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
EQ { lhs: DataRegister(8), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
JNE { target: 116, lhs: DataRegister(8), rhs: Const4(0) }
LDA { base: AddressRegister(10), offset: Const16(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(7), base: AddressRegister(2), offset: Const16(12) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
MOVA { src: DataRegister(7), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(8) }
J { target: 115 }
SVLCX
MOV { src: DataRegister(DataRegister(2)), dest: DataRegister(DataRegister(5)) }
MOVU { src: Const16(65534), dest: DataRegister(DataRegister(4)) }
ADDIH { lhs: DataRegister(4), rhs: Const16(65535), dest: DataRegister(4) }
CALLLIBRARY(I32Rotl)
RSLCX
AND { lhs: DataRegister(6), rhs: DataRegister(DataRegister(2)), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1180) }
OR { lhs: DataRegister(3), rhs: Const9(Const9(3)), dest: DataRegister(8) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(4) }
ADD { lhs: DataRegister(0), rhs: DataRegister(DataRegister(3)), dest: DataRegister(8) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(4) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
SH { src: DataRegister(2), count: Const9(Const9(3)), dest: DataRegister(2) }
SUB { lhs: DataRegister(2), rhs: DataRegister(3), dest: DataRegister(7) }
OR { lhs: DataRegister(7), rhs: Const9(Const9(1)), dest: DataRegister(8) }
LDAPI { base: AddressRegister(9), offset: Const10(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(4) }
ADD { lhs: DataRegister(0), rhs: DataRegister(DataRegister(2)), dest: DataRegister(8) }
MOVA { src: DataRegister(8), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(7), base: AddressRegister(2), offset: Const16(0) }
EQ { lhs: DataRegister(6), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 117, lhs: DataRegister(8), rhs: Const4(0) }
MOVU { src: Const16(65528), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(65535), dest: DataRegister(8) }
AND { lhs: DataRegister(6), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
ADDI { lhs: DataRegister(8), rhs: Const16(916), dest: DataRegister(2) }
ADDIH { lhs: DataRegister(2), rhs: Const16(16), dest: DataRegister(2) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
SHA { src: DataRegister(6), count: Const9(Const9(29)), dest: DataRegister(8) }
MOVU { src: Const16(1), dest: DataRegister(DataRegister(9)) }
SH { src: DataRegister(9), count: DataRegister(DataRegister(8)), dest: DataRegister(6) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
AND { lhs: DataRegister(8), rhs: DataRegister(DataRegister(6)), dest: DataRegister(8) }
JNE { target: 119, lhs: DataRegister(8), rhs: Const4(0) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
OR { lhs: DataRegister(8), rhs: DataRegister(DataRegister(6)), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1180) }
MOV { src: DataRegister(DataRegister(2)), dest: DataRegister(DataRegister(6)) }
J { target: 118 }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(3), base: AddressRegister(2), offset: Const16(8) }
MOVA { src: DataRegister(6), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(3), base: AddressRegister(2), offset: Const16(12) }
MOVA { src: DataRegister(3), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(2), base: AddressRegister(2), offset: Const16(12) }
MOVA { src: DataRegister(3), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(6), base: AddressRegister(2), offset: Const16(8) }
ADDI { lhs: DataRegister(0), rhs: Const16(8), dest: DataRegister(2) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1196) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(7), base: AddressRegister(2), offset: Const16(1188) }
J { target: 90 }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(5), base: AddressRegister(2), offset: Const16(24) }
EQ { lhs: DataRegister(7), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 120, lhs: DataRegister(8), rhs: Const4(0) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(7), base: AddressRegister(2), offset: Const16(16) }
MOVA { src: DataRegister(7), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(24) }
EQ { lhs: DataRegister(7), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 105, lhs: DataRegister(8), rhs: Const4(0) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(7), base: AddressRegister(2), offset: Const16(20) }
MOVA { src: DataRegister(7), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(24) }
LTU { lhs: DataRegister(2), rhs: Const9(Const9(16)), dest: DataRegister(8) }
JNE { target: 123, lhs: DataRegister(8), rhs: Const4(0) }
OR { lhs: DataRegister(3), rhs: Const9(Const9(3)), dest: DataRegister(8) }
MOVA { src: DataRegister(6), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(4) }
ADD { lhs: DataRegister(6), rhs: DataRegister(DataRegister(3)), dest: DataRegister(3) }
OR { lhs: DataRegister(2), rhs: Const9(Const9(1)), dest: DataRegister(8) }
MOVA { src: DataRegister(3), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(4) }
ADD { lhs: DataRegister(3), rhs: DataRegister(DataRegister(2)), dest: DataRegister(8) }
MOVA { src: DataRegister(8), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(2), base: AddressRegister(2), offset: Const16(0) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
EQ { lhs: DataRegister(8), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 122, lhs: DataRegister(8), rhs: Const4(0) }
MOVU { src: Const16(65528), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(65535), dest: DataRegister(8) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
AND { lhs: DataRegister(8), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
ADDI { lhs: DataRegister(8), rhs: Const16(916), dest: DataRegister(7) }
ADDIH { lhs: DataRegister(7), rhs: Const16(16), dest: DataRegister(7) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
SHA { src: DataRegister(8), count: Const9(Const9(29)), dest: DataRegister(8) }
MOVU { src: Const16(1), dest: DataRegister(DataRegister(9)) }
SH { src: DataRegister(9), count: DataRegister(DataRegister(8)), dest: DataRegister(9) }
STW { src: DataRegister(9), base: AddressRegister(10), offset: Const16(4) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
AND { lhs: DataRegister(8), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
JNE { target: 125, lhs: DataRegister(8), rhs: Const4(0) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
OR { lhs: DataRegister(8), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1180) }
STW { src: DataRegister(7), base: AddressRegister(10), offset: Const16(4) }
J { target: 124 }
MOVA { src: DataRegister(7), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(8) }
LDA { base: AddressRegister(10), offset: Const16(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(12) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(7), base: AddressRegister(2), offset: Const16(12) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(8) }
J { target: 122 }
STWPI { src: DataRegister(6), base: AddressRegister(9), offset: Const10(-4) }
ADD { lhs: DataRegister(2), rhs: DataRegister(DataRegister(3)), dest: DataRegister(0) }
OR { lhs: DataRegister(0), rhs: Const9(Const9(3)), dest: DataRegister(8) }
LDAPI { base: AddressRegister(9), offset: Const10(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(4) }
ADD { lhs: DataRegister(6), rhs: DataRegister(DataRegister(0)), dest: DataRegister(0) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(4), dest: DataRegister(8) }
OR { lhs: DataRegister(8), rhs: Const9(Const9(1)), dest: DataRegister(8) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(4) }
J { target: 121 }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(3), base: AddressRegister(2), offset: Const16(1196) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(2), base: AddressRegister(2), offset: Const16(1188) }
ADDI { lhs: DataRegister(6), rhs: Const16(8), dest: DataRegister(2) }
J { target: 90 }
OR { lhs: DataRegister(0), rhs: DataRegister(DataRegister(7)), dest: DataRegister(8) }
JNE { target: 126, lhs: DataRegister(8), rhs: Const4(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(7)) }
MOVU { src: Const16(2), dest: DataRegister(DataRegister(8)) }
SH { src: DataRegister(8), count: DataRegister(DataRegister(5)), dest: DataRegister(0) }
RSUB0 { src: DataRegister(8) }
OR { lhs: DataRegister(0), rhs: DataRegister(DataRegister(8)), dest: DataRegister(9) }
AND { lhs: DataRegister(9), rhs: DataRegister(DataRegister(4)), dest: DataRegister(0) }
EQ { lhs: DataRegister(0), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 93, lhs: DataRegister(8), rhs: Const4(0) }
SHUFFLE { src: DataRegister(0), dest: DataRegister(8), mask: Const9(283) }
CLZ { src: DataRegister(8), dest: DataRegister(8) }
SH { src: DataRegister(8), count: Const9(Const9(2)), dest: DataRegister(9) }
ADDI { lhs: DataRegister(9), rhs: Const16(772), dest: DataRegister(10) }
ADDIH { lhs: DataRegister(10), rhs: Const16(16), dest: DataRegister(10) }
EQ { lhs: DataRegister(0), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 94, lhs: DataRegister(8), rhs: Const4(0) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(7), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(65528), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(65535), dest: DataRegister(8) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(4), dest: DataRegister(8) }
AND { lhs: DataRegister(8), rhs: DataRegister(DataRegister(8)), dest: DataRegister(6) }
SUB { lhs: DataRegister(6), rhs: DataRegister(3), dest: DataRegister(8) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(8) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
LTU { lhs: DataRegister(8), rhs: DataRegister(DataRegister(2)), dest: DataRegister(5) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
SEL { selector: DataRegister(8), lhs: DataRegister(8), rhs: DataRegister(DataRegister(5)), dest: DataRegister(4) }
LTU { lhs: DataRegister(6), rhs: DataRegister(DataRegister(3)), dest: DataRegister(8) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(4) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
SEL { selector: DataRegister(8), lhs: DataRegister(2), rhs: DataRegister(DataRegister(5)), dest: DataRegister(8) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(8) }
JNE { target: 128, lhs: DataRegister(6), rhs: Const4(0) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
SEL { selector: DataRegister(7), lhs: DataRegister(4), rhs: DataRegister(DataRegister(8)), dest: DataRegister(7) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
SEL { selector: DataRegister(2), lhs: DataRegister(8), rhs: DataRegister(DataRegister(8)), dest: DataRegister(2) }
MOV { src: DataRegister(DataRegister(6)), dest: DataRegister(DataRegister(0)) }
JNE { target: 127, lhs: DataRegister(6), rhs: Const4(0) }
EQ { lhs: DataRegister(7), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 93, lhs: DataRegister(8), rhs: Const4(0) }
LTU { lhs: DataRegister(0), rhs: DataRegister(DataRegister(3)), dest: DataRegister(8) }
JNE { target: 129, lhs: DataRegister(8), rhs: Const4(0) }
SUB { lhs: DataRegister(0), rhs: DataRegister(3), dest: DataRegister(8) }
GEU { lhs: DataRegister(2), rhs: DataRegister(DataRegister(8)), dest: DataRegister(9) }
JNE { target: 93, lhs: DataRegister(9), rhs: Const4(0) }
NE { lhs: DataRegister(0), rhs: DataRegister(DataRegister(7)), dest: DataRegister(8) }
JNE { target: 132, lhs: DataRegister(8), rhs: Const4(0) }
STWPI { src: DataRegister(7), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(20), dest: DataRegister(DataRegister(8)) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(16), dest: DataRegister(DataRegister(8)) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
SEL { selector: DataRegister(8), lhs: DataRegister(8), rhs: DataRegister(DataRegister(0)), dest: DataRegister(8) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(9) }
ADD { lhs: DataRegister(9), rhs: DataRegister(DataRegister(8)), dest: DataRegister(9) }
JNE { target: 131, lhs: DataRegister(6), rhs: Const4(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(0)) }
J { target: 130 }
MOVA { src: DataRegister(6), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(12) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(6), base: AddressRegister(2), offset: Const16(8) }
J { target: 130 }
ADDI { lhs: DataRegister(7), rhs: Const16(20), dest: DataRegister(8) }
ADDI { lhs: DataRegister(7), rhs: Const16(16), dest: DataRegister(9) }
SEL { selector: DataRegister(8), lhs: DataRegister(9), rhs: DataRegister(DataRegister(0)), dest: DataRegister(10) }
STW { src: DataRegister(10), base: AddressRegister(10), offset: Const16(4) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(8) }
MOV { src: DataRegister(DataRegister(6)), dest: DataRegister(DataRegister(0)) }
ADDI { lhs: DataRegister(0), rhs: Const16(20), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
ADDI { lhs: DataRegister(0), rhs: Const16(16), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
SEL { selector: DataRegister(8), lhs: DataRegister(8), rhs: DataRegister(DataRegister(6)), dest: DataRegister(8) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(4) }
MOVU { src: Const16(20), dest: DataRegister(DataRegister(8)) }
SELN { selector: DataRegister(8), lhs: DataRegister(6), rhs: Const9(Const9(16)), dest: DataRegister(8) }
ADD { lhs: DataRegister(0), rhs: DataRegister(DataRegister(8)), dest: DataRegister(9) }
JNE { target: 133, lhs: DataRegister(6), rhs: Const4(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(8)) }
LDA { base: AddressRegister(10), offset: Const16(8), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(0) }
EQ { lhs: DataRegister(5), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 91, lhs: DataRegister(8), rhs: Const4(0) }
MOVA { src: DataRegister(7), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(28), dest: DataRegister(8) }
SH { src: DataRegister(8), count: Const9(Const9(2)), dest: DataRegister(8) }
ADDI { lhs: DataRegister(8), rhs: Const16(772), dest: DataRegister(6) }
ADDIH { lhs: DataRegister(6), rhs: Const16(16), dest: DataRegister(6) }
MOVA { src: DataRegister(6), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(0), dest: DataRegister(8) }
EQ { lhs: DataRegister(8), rhs: DataRegister(DataRegister(7)), dest: DataRegister(8) }
JNE { target: 134, lhs: DataRegister(8), rhs: Const4(0) }
MOVA { src: DataRegister(5), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(16), dest: DataRegister(8) }
EQ { lhs: DataRegister(8), rhs: DataRegister(DataRegister(7)), dest: DataRegister(8) }
MOVU { src: Const16(16), dest: DataRegister(DataRegister(9)) }
SELN { selector: DataRegister(9), lhs: DataRegister(8), rhs: Const9(Const9(20)), dest: DataRegister(9) }
ADD { lhs: DataRegister(5), rhs: DataRegister(DataRegister(9)), dest: DataRegister(10) }
MOVA { src: DataRegister(10), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(0) }
EQ { lhs: DataRegister(0), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 91, lhs: DataRegister(8), rhs: Const4(0) }
J { target: 92 }
MOVA { src: DataRegister(6), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(0) }
JNE { target: 92, lhs: DataRegister(0), rhs: Const4(0) }
SVLCX
MOVA { src: DataRegister(7), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(28), dest: DataRegister(5) }
MOVU { src: Const16(65534), dest: DataRegister(DataRegister(4)) }
ADDIH { lhs: DataRegister(4), rhs: Const16(65535), dest: DataRegister(4) }
CALLLIBRARY(I32Rotl)
RSLCX
ADDIHA { lhs: AddressRegister(0), rhs: Const16(16), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(1184), dest: DataRegister(8) }
AND { lhs: DataRegister(8), rhs: DataRegister(DataRegister(2)), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1184) }
J { target: 91 }
GEU { lhs: DataRegister(0), rhs: DataRegister(DataRegister(3)), dest: DataRegister(8) }
JNE { target: 140, lhs: DataRegister(8), rhs: Const4(0) }
LTU { lhs: DataRegister(3), rhs: DataRegister(DataRegister(0)), dest: DataRegister(8) }
JNE { target: 141, lhs: DataRegister(8), rhs: Const4(0) }
ADDI { lhs: DataRegister(1), rhs: Const16(4), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(1224), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
ADDI { lhs: DataRegister(3), rhs: Const16(47), dest: DataRegister(8) }
ADDIH { lhs: DataRegister(8), rhs: Const16(1), dest: DataRegister(8) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(9)) }
ADDIH { lhs: DataRegister(9), rhs: Const16(65535), dest: DataRegister(9) }
AND { lhs: DataRegister(8), rhs: DataRegister(DataRegister(9)), dest: DataRegister(9) }
STWPI { src: DataRegister(9), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 42 }
JNE { target: 142, lhs: DataRegister(6), rhs: Const4(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(2)) }
J { target: 90 }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(8)) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
ADD { lhs: DataRegister(8), rhs: DataRegister(DataRegister(8)), dest: DataRegister(0) }
LDAPI { base: AddressRegister(9), offset: Const10(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(1204) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(8)) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
LTU { lhs: DataRegister(0), rhs: DataRegister(DataRegister(2)), dest: DataRegister(8) }
SEL { selector: DataRegister(2), lhs: DataRegister(0), rhs: DataRegister(DataRegister(8)), dest: DataRegister(9) }
LDAPI { base: AddressRegister(9), offset: Const10(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(9), base: AddressRegister(2), offset: Const16(1208) }
EQ { lhs: DataRegister(2), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 145, lhs: DataRegister(8), rhs: Const4(0) }
MOVU { src: Const16(900), dest: DataRegister(DataRegister(0)) }
ADDIH { lhs: DataRegister(0), rhs: Const16(16), dest: DataRegister(0) }
STWPI { src: DataRegister(6), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(7), base: AddressRegister(9), offset: Const10(-4) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
ADD { lhs: DataRegister(8), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(9) }
EQ { lhs: DataRegister(9), rhs: DataRegister(DataRegister(8)), dest: DataRegister(9) }
JNE { target: 144, lhs: DataRegister(9), rhs: Const4(0) }
JNE { target: 146, lhs: DataRegister(0), rhs: Const4(0) }
J { target: 143 }
EQ { lhs: DataRegister(0), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 148, lhs: DataRegister(8), rhs: Const4(0) }
GEU { lhs: DataRegister(6), rhs: DataRegister(DataRegister(0)), dest: DataRegister(8) }
JNE { target: 147, lhs: DataRegister(8), rhs: Const4(0) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(6), base: AddressRegister(2), offset: Const16(1216) }
MOVU { src: Const16(4095), dest: DataRegister(DataRegister(8)) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1220) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(5), base: AddressRegister(2), offset: Const16(912) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(904) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(6), base: AddressRegister(2), offset: Const16(900) }
MOVU { src: Const16(916), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(928) }
MOVU { src: Const16(924), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(936) }
MOVU { src: Const16(916), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(924) }
MOVU { src: Const16(932), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(944) }
MOVU { src: Const16(924), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(932) }
MOVU { src: Const16(940), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(952) }
MOVU { src: Const16(932), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(940) }
MOVU { src: Const16(948), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(960) }
MOVU { src: Const16(940), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(948) }
MOVU { src: Const16(956), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(968) }
MOVU { src: Const16(948), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(956) }
MOVU { src: Const16(964), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(976) }
MOVU { src: Const16(956), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(964) }
MOVU { src: Const16(972), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(984) }
MOVU { src: Const16(964), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(972) }
MOVU { src: Const16(980), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(992) }
MOVU { src: Const16(972), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(980) }
MOVU { src: Const16(980), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(988) }
MOVU { src: Const16(988), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1000) }
MOVU { src: Const16(988), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(996) }
MOVU { src: Const16(996), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1008) }
MOVU { src: Const16(996), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1004) }
MOVU { src: Const16(1004), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1016) }
MOVU { src: Const16(1004), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1012) }
MOVU { src: Const16(1012), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1024) }
MOVU { src: Const16(1012), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1020) }
MOVU { src: Const16(1020), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1032) }
MOVU { src: Const16(1020), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1028) }
MOVU { src: Const16(1028), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1040) }
MOVU { src: Const16(1028), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1036) }
MOVU { src: Const16(1036), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1048) }
MOVU { src: Const16(1036), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1044) }
MOVU { src: Const16(1044), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1056) }
MOVU { src: Const16(1052), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1064) }
MOVU { src: Const16(1044), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1052) }
MOVU { src: Const16(1060), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1072) }
MOVU { src: Const16(1052), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1060) }
MOVU { src: Const16(1068), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1080) }
MOVU { src: Const16(1060), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1068) }
MOVU { src: Const16(1076), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1088) }
MOVU { src: Const16(1068), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1076) }
MOVU { src: Const16(1084), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1096) }
MOVU { src: Const16(1076), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1084) }
MOVU { src: Const16(1092), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1104) }
MOVU { src: Const16(1084), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1092) }
MOVU { src: Const16(1100), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1112) }
MOVU { src: Const16(1092), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1100) }
MOVU { src: Const16(1108), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1120) }
MOVU { src: Const16(1100), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1108) }
MOVU { src: Const16(1116), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1128) }
MOVU { src: Const16(1108), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1116) }
MOVU { src: Const16(1124), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1136) }
MOVU { src: Const16(1116), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1124) }
MOVU { src: Const16(1132), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1144) }
MOVU { src: Const16(1124), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1132) }
MOVU { src: Const16(1140), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1152) }
MOVU { src: Const16(1132), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1140) }
MOVU { src: Const16(1148), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1160) }
MOVU { src: Const16(1140), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1148) }
MOVU { src: Const16(1156), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1168) }
MOVU { src: Const16(1148), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1156) }
MOVU { src: Const16(1164), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1176) }
MOVU { src: Const16(1156), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1164) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(8)) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
ADDI { lhs: DataRegister(6), rhs: Const16(15), dest: DataRegister(8) }
MOVU { src: Const16(65528), dest: DataRegister(DataRegister(9)) }
ADDIH { lhs: DataRegister(9), rhs: Const16(65535), dest: DataRegister(9) }
AND { lhs: DataRegister(8), rhs: DataRegister(DataRegister(9)), dest: DataRegister(0) }
ADDI { lhs: DataRegister(0), rhs: Const16(65528), dest: DataRegister(2) }
LDAPI { base: AddressRegister(9), offset: Const10(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(2), base: AddressRegister(2), offset: Const16(1200) }
MOVU { src: Const16(1164), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1172) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(8)) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
SUB { lhs: DataRegister(6), rhs: DataRegister(0), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
ADDI { lhs: DataRegister(8), rhs: Const16(65496), dest: DataRegister(0) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
ADD { lhs: DataRegister(8), rhs: DataRegister(DataRegister(0)), dest: DataRegister(8) }
ADDI { lhs: DataRegister(8), rhs: Const16(8), dest: DataRegister(7) }
LDAPI { base: AddressRegister(9), offset: Const10(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(7), base: AddressRegister(2), offset: Const16(1192) }
OR { lhs: DataRegister(7), rhs: Const9(Const9(1)), dest: DataRegister(8) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(4) }
MOVU { src: Const16(40), dest: DataRegister(DataRegister(8)) }
ADD { lhs: DataRegister(6), rhs: DataRegister(DataRegister(0)), dest: DataRegister(9) }
MOVA { src: DataRegister(9), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(4) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(32), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1212) }
J { target: 135 }
GEU { lhs: DataRegister(2), rhs: DataRegister(DataRegister(6)), dest: DataRegister(8) }
JNE { target: 143, lhs: DataRegister(8), rhs: Const4(0) }
LTU { lhs: DataRegister(2), rhs: DataRegister(DataRegister(7)), dest: DataRegister(8) }
JNE { target: 143, lhs: DataRegister(8), rhs: Const4(0) }
AND { lhs: DataRegister(7), rhs: Const9(Const9(1)), dest: DataRegister(8) }
JNE { target: 143, lhs: DataRegister(8), rhs: Const4(0) }
SHA { src: DataRegister(7), count: Const9(Const9(31)), dest: DataRegister(8) }
EQ { lhs: DataRegister(8), rhs: DataRegister(DataRegister(5)), dest: DataRegister(9) }
JNE { target: 139, lhs: DataRegister(9), rhs: Const4(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(8)) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
LTU { lhs: DataRegister(0), rhs: DataRegister(DataRegister(6)), dest: DataRegister(8) }
SEL { selector: DataRegister(0), lhs: DataRegister(6), rhs: DataRegister(DataRegister(8)), dest: DataRegister(9) }
LDAPI { base: AddressRegister(9), offset: Const10(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(9), base: AddressRegister(2), offset: Const16(1216) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
ADD { lhs: DataRegister(6), rhs: DataRegister(DataRegister(8)), dest: DataRegister(7) }
MOVU { src: Const16(900), dest: DataRegister(DataRegister(0)) }
ADDIH { lhs: DataRegister(0), rhs: Const16(16), dest: DataRegister(0) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(0), dest: DataRegister(8) }
EQ { lhs: DataRegister(8), rhs: DataRegister(DataRegister(7)), dest: DataRegister(8) }
JNE { target: 151, lhs: DataRegister(8), rhs: Const4(0) }
JNE { target: 152, lhs: DataRegister(0), rhs: Const4(0) }
J { target: 150 }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
AND { lhs: DataRegister(8), rhs: Const9(Const9(1)), dest: DataRegister(8) }
JNE { target: 150, lhs: DataRegister(8), rhs: Const4(0) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
SHA { src: DataRegister(8), count: Const9(Const9(31)), dest: DataRegister(8) }
EQ { lhs: DataRegister(8), rhs: DataRegister(DataRegister(5)), dest: DataRegister(9) }
JNE { target: 149, lhs: DataRegister(9), rhs: Const4(0) }
MOVU { src: Const16(900), dest: DataRegister(DataRegister(0)) }
ADDIH { lhs: DataRegister(0), rhs: Const16(16), dest: DataRegister(0) }
LTU { lhs: DataRegister(2), rhs: DataRegister(DataRegister(7)), dest: DataRegister(8) }
JNE { target: 155, lhs: DataRegister(8), rhs: Const4(0) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(4), dest: DataRegister(8) }
ADD { lhs: DataRegister(7), rhs: DataRegister(DataRegister(8)), dest: DataRegister(7) }
LTU { lhs: DataRegister(2), rhs: DataRegister(DataRegister(7)), dest: DataRegister(8) }
JNE { target: 153, lhs: DataRegister(8), rhs: Const4(0) }
J { target: 154 }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(8)) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
ADDI { lhs: DataRegister(6), rhs: Const16(15), dest: DataRegister(8) }
MOVU { src: Const16(65528), dest: DataRegister(DataRegister(9)) }
ADDIH { lhs: DataRegister(9), rhs: Const16(65535), dest: DataRegister(9) }
AND { lhs: DataRegister(8), rhs: DataRegister(DataRegister(9)), dest: DataRegister(0) }
ADDI { lhs: DataRegister(0), rhs: Const16(65528), dest: DataRegister(8) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(4) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
LDAPI { base: AddressRegister(9), offset: Const10(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1200) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(8)) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
SUB { lhs: DataRegister(6), rhs: DataRegister(0), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
ADDI { lhs: DataRegister(8), rhs: Const16(65496), dest: DataRegister(0) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
ADD { lhs: DataRegister(8), rhs: DataRegister(DataRegister(0)), dest: DataRegister(8) }
ADDI { lhs: DataRegister(8), rhs: Const16(8), dest: DataRegister(4) }
LDAPI { base: AddressRegister(9), offset: Const10(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(4), base: AddressRegister(2), offset: Const16(1192) }
OR { lhs: DataRegister(4), rhs: Const9(Const9(1)), dest: DataRegister(8) }
LDA { base: AddressRegister(10), offset: Const16(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(4) }
MOVU { src: Const16(40), dest: DataRegister(DataRegister(8)) }
ADD { lhs: DataRegister(6), rhs: DataRegister(DataRegister(0)), dest: DataRegister(9) }
MOVA { src: DataRegister(9), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(4) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(32), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1212) }
STWPI { src: DataRegister(2), base: AddressRegister(9), offset: Const10(-4) }
ADDI { lhs: DataRegister(7), rhs: Const16(65504), dest: DataRegister(8) }
MOVU { src: Const16(65528), dest: DataRegister(DataRegister(9)) }
ADDIH { lhs: DataRegister(9), rhs: Const16(65535), dest: DataRegister(9) }
AND { lhs: DataRegister(8), rhs: DataRegister(DataRegister(9)), dest: DataRegister(9) }
ADDI { lhs: DataRegister(9), rhs: Const16(65528), dest: DataRegister(0) }
ADDI { lhs: DataRegister(2), rhs: Const16(16), dest: DataRegister(8) }
LTU { lhs: DataRegister(0), rhs: DataRegister(DataRegister(8)), dest: DataRegister(9) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(10) }
SEL { selector: DataRegister(10), lhs: DataRegister(0), rhs: DataRegister(DataRegister(9)), dest: DataRegister(10) }
STW { src: DataRegister(10), base: AddressRegister(10), offset: Const16(4) }
MOVU { src: Const16(27), dest: DataRegister(DataRegister(8)) }
LDA { base: AddressRegister(10), offset: Const16(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(4) }
ADDIHA { lhs: AddressRegister(0), rhs: Const16(16), dest: AddressRegister(2) }
LDD { base: AddressRegister(2), offset: Const16(908), dest: ExtendedRegister(8) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(10) }
ADDI { lhs: DataRegister(10), rhs: Const16(16), dest: DataRegister(10) }
MOVA { src: DataRegister(10), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STD { src: ExtendedRegister(8), base: AddressRegister(2), offset: Const16(0) }
LDD { base: AddressRegister(10), offset: Const16(16), dest: ExtendedRegister(8) }
LDA { base: AddressRegister(10), offset: Const16(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STD { src: ExtendedRegister(8), base: AddressRegister(2), offset: Const16(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(5), base: AddressRegister(2), offset: Const16(912) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(904) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(6), base: AddressRegister(2), offset: Const16(900) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
ADDI { lhs: DataRegister(8), rhs: Const16(8), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(908) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
ADDI { lhs: DataRegister(8), rhs: Const16(28), dest: DataRegister(0) }
MOVU { src: Const16(7), dest: DataRegister(DataRegister(8)) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(0) }
ADDI { lhs: DataRegister(0), rhs: Const16(4), dest: DataRegister(0) }
LTU { lhs: DataRegister(0), rhs: DataRegister(DataRegister(7)), dest: DataRegister(8) }
JNE { target: 156, lhs: DataRegister(8), rhs: Const4(0) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
EQ { lhs: DataRegister(8), rhs: DataRegister(DataRegister(2)), dest: DataRegister(8) }
JNE { target: 135, lhs: DataRegister(8), rhs: Const4(0) }
MOVU { src: Const16(65534), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(65535), dest: DataRegister(8) }
LDA { base: AddressRegister(10), offset: Const16(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(4), dest: DataRegister(8) }
AND { lhs: DataRegister(8), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
LDA { base: AddressRegister(10), offset: Const16(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(4) }
STWPI { src: DataRegister(2), base: AddressRegister(9), offset: Const10(-4) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
SUB { lhs: DataRegister(8), rhs: DataRegister(2), dest: DataRegister(0) }
OR { lhs: DataRegister(0), rhs: Const9(Const9(1)), dest: DataRegister(8) }
LDAPI { base: AddressRegister(9), offset: Const10(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(4) }
LDA { base: AddressRegister(10), offset: Const16(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(0) }
LTU { lhs: DataRegister(0), rhs: Const9(Const9(256)), dest: DataRegister(8) }
JNE { target: 157, lhs: DataRegister(8), rhs: Const4(0) }
STWPI { src: DataRegister(2), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 23 }
J { target: 135 }
MOVU { src: Const16(65528), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(65535), dest: DataRegister(8) }
AND { lhs: DataRegister(0), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
ADDI { lhs: DataRegister(8), rhs: Const16(916), dest: DataRegister(7) }
ADDIH { lhs: DataRegister(7), rhs: Const16(16), dest: DataRegister(7) }
STWPI { src: DataRegister(6), base: AddressRegister(9), offset: Const10(-4) }
SHA { src: DataRegister(0), count: Const9(Const9(29)), dest: DataRegister(8) }
MOVU { src: Const16(1), dest: DataRegister(DataRegister(9)) }
SH { src: DataRegister(9), count: DataRegister(DataRegister(8)), dest: DataRegister(0) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
AND { lhs: DataRegister(8), rhs: DataRegister(DataRegister(0)), dest: DataRegister(8) }
JNE { target: 159, lhs: DataRegister(8), rhs: Const4(0) }
OR { lhs: DataRegister(6), rhs: DataRegister(DataRegister(0)), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1180) }
MOV { src: DataRegister(DataRegister(7)), dest: DataRegister(DataRegister(0)) }
J { target: 158 }
MOVA { src: DataRegister(7), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(2), base: AddressRegister(2), offset: Const16(8) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(2), base: AddressRegister(2), offset: Const16(12) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(7), base: AddressRegister(2), offset: Const16(12) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(8) }
J { target: 135 }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(6), base: AddressRegister(2), offset: Const16(0) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(4), dest: DataRegister(8) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
ADD { lhs: DataRegister(8), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(4) }
ADDI { lhs: DataRegister(6), rhs: Const16(15), dest: DataRegister(8) }
MOVU { src: Const16(65528), dest: DataRegister(DataRegister(9)) }
ADDIH { lhs: DataRegister(9), rhs: Const16(65535), dest: DataRegister(9) }
AND { lhs: DataRegister(8), rhs: DataRegister(DataRegister(9)), dest: DataRegister(9) }
ADDI { lhs: DataRegister(9), rhs: Const16(65528), dest: DataRegister(6) }
OR { lhs: DataRegister(3), rhs: Const9(Const9(3)), dest: DataRegister(8) }
MOVA { src: DataRegister(6), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(4) }
ADDI { lhs: DataRegister(7), rhs: Const16(15), dest: DataRegister(8) }
MOVU { src: Const16(65528), dest: DataRegister(DataRegister(9)) }
ADDIH { lhs: DataRegister(9), rhs: Const16(65535), dest: DataRegister(9) }
AND { lhs: DataRegister(8), rhs: DataRegister(DataRegister(9)), dest: DataRegister(9) }
ADDI { lhs: DataRegister(9), rhs: Const16(65528), dest: DataRegister(2) }
STWPI { src: DataRegister(2), base: AddressRegister(9), offset: Const10(-4) }
ADD { lhs: DataRegister(6), rhs: DataRegister(DataRegister(3)), dest: DataRegister(0) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
SUB { lhs: DataRegister(8), rhs: DataRegister(0), dest: DataRegister(3) }
ADDIHA { lhs: AddressRegister(0), rhs: Const16(16), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(1200), dest: DataRegister(8) }
EQ { lhs: DataRegister(2), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
JNE { target: 138, lhs: DataRegister(8), rhs: Const4(0) }
ADDIHA { lhs: AddressRegister(0), rhs: Const16(16), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(1196), dest: DataRegister(8) }
EQ { lhs: DataRegister(2), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
JNE { target: 137, lhs: DataRegister(8), rhs: Const4(0) }
AND { lhs: DataRegister(7), rhs: Const9(Const9(3)), dest: DataRegister(8) }
NE { lhs: DataRegister(8), rhs: Const9(Const9(1)), dest: DataRegister(9) }
JNE { target: 160, lhs: DataRegister(9), rhs: Const4(0) }
STWPI { src: DataRegister(2), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(65528), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(65535), dest: DataRegister(8) }
AND { lhs: DataRegister(7), rhs: DataRegister(DataRegister(8)), dest: DataRegister(7) }
STWPI { src: DataRegister(7), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 21 }
ADD { lhs: DataRegister(7), rhs: DataRegister(DataRegister(3)), dest: DataRegister(3) }
ADD { lhs: DataRegister(2), rhs: DataRegister(DataRegister(7)), dest: DataRegister(2) }
MOVU { src: Const16(65534), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(65535), dest: DataRegister(8) }
AND { lhs: DataRegister(7), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(4) }
OR { lhs: DataRegister(3), rhs: Const9(Const9(1)), dest: DataRegister(8) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(4) }
ADD { lhs: DataRegister(0), rhs: DataRegister(DataRegister(3)), dest: DataRegister(8) }
MOVA { src: DataRegister(8), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(3), base: AddressRegister(2), offset: Const16(0) }
LTU { lhs: DataRegister(3), rhs: Const9(Const9(256)), dest: DataRegister(8) }
JNE { target: 161, lhs: DataRegister(8), rhs: Const4(0) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(3), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 23 }
J { target: 136 }
MOVU { src: Const16(65528), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(65535), dest: DataRegister(8) }
AND { lhs: DataRegister(3), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
ADDI { lhs: DataRegister(8), rhs: Const16(916), dest: DataRegister(2) }
ADDIH { lhs: DataRegister(2), rhs: Const16(16), dest: DataRegister(2) }
STWPI { src: DataRegister(7), base: AddressRegister(9), offset: Const10(-4) }
SHA { src: DataRegister(3), count: Const9(Const9(29)), dest: DataRegister(8) }
MOVU { src: Const16(1), dest: DataRegister(DataRegister(9)) }
SH { src: DataRegister(9), count: DataRegister(DataRegister(8)), dest: DataRegister(3) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
AND { lhs: DataRegister(8), rhs: DataRegister(DataRegister(3)), dest: DataRegister(8) }
JNE { target: 163, lhs: DataRegister(8), rhs: Const4(0) }
OR { lhs: DataRegister(7), rhs: DataRegister(DataRegister(3)), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1180) }
MOV { src: DataRegister(DataRegister(2)), dest: DataRegister(DataRegister(3)) }
J { target: 162 }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(8) }
MOVA { src: DataRegister(3), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(12) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(2), base: AddressRegister(2), offset: Const16(12) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(3), base: AddressRegister(2), offset: Const16(8) }
J { target: 136 }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(8)) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
SUB { lhs: DataRegister(0), rhs: DataRegister(3), dest: DataRegister(2) }
LDAPI { base: AddressRegister(9), offset: Const10(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(2), base: AddressRegister(2), offset: Const16(1192) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(8)) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
ADD { lhs: DataRegister(0), rhs: DataRegister(DataRegister(3)), dest: DataRegister(7) }
LDAPI { base: AddressRegister(9), offset: Const10(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(7), base: AddressRegister(2), offset: Const16(1200) }
OR { lhs: DataRegister(2), rhs: Const9(Const9(1)), dest: DataRegister(8) }
MOVA { src: DataRegister(7), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(4) }
OR { lhs: DataRegister(3), rhs: Const9(Const9(3)), dest: DataRegister(8) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(4) }
ADDI { lhs: DataRegister(0), rhs: Const16(8), dest: DataRegister(2) }
J { target: 90 }
SUB { lhs: DataRegister(0), rhs: DataRegister(3), dest: DataRegister(7) }
GEU { lhs: DataRegister(7), rhs: Const9(Const9(16)), dest: DataRegister(8) }
JNE { target: 165, lhs: DataRegister(8), rhs: Const4(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(8)) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1196) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(8)) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1188) }
OR { lhs: DataRegister(0), rhs: Const9(Const9(3)), dest: DataRegister(8) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(4) }
ADD { lhs: DataRegister(2), rhs: DataRegister(DataRegister(0)), dest: DataRegister(0) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(4), dest: DataRegister(8) }
OR { lhs: DataRegister(8), rhs: Const9(Const9(1)), dest: DataRegister(8) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(4) }
J { target: 164 }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(7), base: AddressRegister(2), offset: Const16(1188) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(8)) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
ADD { lhs: DataRegister(2), rhs: DataRegister(DataRegister(3)), dest: DataRegister(6) }
LDAPI { base: AddressRegister(9), offset: Const10(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(6), base: AddressRegister(2), offset: Const16(1196) }
OR { lhs: DataRegister(7), rhs: Const9(Const9(1)), dest: DataRegister(8) }
MOVA { src: DataRegister(6), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(4) }
ADD { lhs: DataRegister(2), rhs: DataRegister(DataRegister(0)), dest: DataRegister(8) }
MOVA { src: DataRegister(8), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(7), base: AddressRegister(2), offset: Const16(0) }
OR { lhs: DataRegister(3), rhs: Const9(Const9(3)), dest: DataRegister(8) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(4) }
ADDI { lhs: DataRegister(2), rhs: Const16(8), dest: DataRegister(2) }
J { target: 90 }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
ADD { lhs: DataRegister(8), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(4) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(8)) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
ADDI { lhs: DataRegister(0), rhs: Const16(15), dest: DataRegister(8) }
MOVU { src: Const16(65528), dest: DataRegister(DataRegister(9)) }
ADDIH { lhs: DataRegister(9), rhs: Const16(65535), dest: DataRegister(9) }
AND { lhs: DataRegister(8), rhs: DataRegister(DataRegister(9)), dest: DataRegister(2) }
ADDI { lhs: DataRegister(2), rhs: Const16(65528), dest: DataRegister(7) }
LDAPI { base: AddressRegister(9), offset: Const10(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(7), base: AddressRegister(2), offset: Const16(1200) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(8)) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
SUB { lhs: DataRegister(0), rhs: DataRegister(2), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
ADDIHA { lhs: AddressRegister(0), rhs: Const16(16), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(1192), dest: DataRegister(8) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
ADD { lhs: DataRegister(8), rhs: DataRegister(DataRegister(8)), dest: DataRegister(2) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
ADD { lhs: DataRegister(8), rhs: DataRegister(DataRegister(2)), dest: DataRegister(8) }
ADDI { lhs: DataRegister(8), rhs: Const16(8), dest: DataRegister(6) }
LDAPI { base: AddressRegister(9), offset: Const10(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(6), base: AddressRegister(2), offset: Const16(1192) }
OR { lhs: DataRegister(6), rhs: Const9(Const9(1)), dest: DataRegister(8) }
MOVA { src: DataRegister(7), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(4) }
MOVU { src: Const16(40), dest: DataRegister(DataRegister(8)) }
ADD { lhs: DataRegister(0), rhs: DataRegister(DataRegister(2)), dest: DataRegister(9) }
MOVA { src: DataRegister(9), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(4) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(32), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1212) }
J { target: 135 }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(1200) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(8)) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
ADDIHA { lhs: AddressRegister(0), rhs: Const16(16), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(1192), dest: DataRegister(8) }
ADD { lhs: DataRegister(8), rhs: DataRegister(DataRegister(3)), dest: DataRegister(3) }
LDAPI { base: AddressRegister(9), offset: Const10(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(3), base: AddressRegister(2), offset: Const16(1192) }
OR { lhs: DataRegister(3), rhs: Const9(Const9(1)), dest: DataRegister(8) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(4) }
J { target: 136 }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(1196) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(8)) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
ADDIHA { lhs: AddressRegister(0), rhs: Const16(16), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(1188), dest: DataRegister(8) }
ADD { lhs: DataRegister(8), rhs: DataRegister(DataRegister(3)), dest: DataRegister(3) }
LDAPI { base: AddressRegister(9), offset: Const10(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(3), base: AddressRegister(2), offset: Const16(1188) }
OR { lhs: DataRegister(3), rhs: Const9(Const9(1)), dest: DataRegister(8) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(4) }
ADD { lhs: DataRegister(0), rhs: DataRegister(DataRegister(3)), dest: DataRegister(8) }
MOVA { src: DataRegister(8), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(3), base: AddressRegister(2), offset: Const16(0) }
ADDI { lhs: DataRegister(6), rhs: Const16(8), dest: DataRegister(2) }
J { target: 90 }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(2)) }
GEU { lhs: DataRegister(3), rhs: DataRegister(DataRegister(0)), dest: DataRegister(8) }
JNE { target: 90, lhs: DataRegister(8), rhs: Const4(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(8)) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
SUB { lhs: DataRegister(0), rhs: DataRegister(3), dest: DataRegister(2) }
LDAPI { base: AddressRegister(9), offset: Const10(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(2), base: AddressRegister(2), offset: Const16(1192) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(8)) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
ADD { lhs: DataRegister(0), rhs: DataRegister(DataRegister(3)), dest: DataRegister(7) }
LDAPI { base: AddressRegister(9), offset: Const10(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(7), base: AddressRegister(2), offset: Const16(1200) }
OR { lhs: DataRegister(2), rhs: Const9(Const9(1)), dest: DataRegister(8) }
MOVA { src: DataRegister(7), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(4) }
OR { lhs: DataRegister(3), rhs: Const9(Const9(3)), dest: DataRegister(8) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(4) }
ADDI { lhs: DataRegister(0), rhs: Const16(8), dest: DataRegister(2) }
J { target: 90 }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(5), base: AddressRegister(2), offset: Const16(24) }
EQ { lhs: DataRegister(6), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 166, lhs: DataRegister(8), rhs: Const4(0) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(6), base: AddressRegister(2), offset: Const16(16) }
MOVA { src: DataRegister(6), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(24) }
EQ { lhs: DataRegister(6), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 91, lhs: DataRegister(8), rhs: Const4(0) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(6), base: AddressRegister(2), offset: Const16(20) }
MOVA { src: DataRegister(6), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(24) }
LTU { lhs: DataRegister(2), rhs: Const9(Const9(16)), dest: DataRegister(8) }
JNE { target: 168, lhs: DataRegister(8), rhs: Const4(0) }
OR { lhs: DataRegister(3), rhs: Const9(Const9(3)), dest: DataRegister(8) }
MOVA { src: DataRegister(7), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(4) }
ADD { lhs: DataRegister(7), rhs: DataRegister(DataRegister(3)), dest: DataRegister(0) }
OR { lhs: DataRegister(2), rhs: Const9(Const9(1)), dest: DataRegister(8) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(4) }
ADD { lhs: DataRegister(0), rhs: DataRegister(DataRegister(2)), dest: DataRegister(8) }
MOVA { src: DataRegister(8), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(2), base: AddressRegister(2), offset: Const16(0) }
LTU { lhs: DataRegister(2), rhs: Const9(Const9(256)), dest: DataRegister(8) }
JNE { target: 169, lhs: DataRegister(8), rhs: Const4(0) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(2), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 23 }
J { target: 167 }
MOVU { src: Const16(65528), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(65535), dest: DataRegister(8) }
AND { lhs: DataRegister(2), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
ADDI { lhs: DataRegister(8), rhs: Const16(916), dest: DataRegister(3) }
ADDIH { lhs: DataRegister(3), rhs: Const16(16), dest: DataRegister(3) }
STWPI { src: DataRegister(6), base: AddressRegister(9), offset: Const10(-4) }
SHA { src: DataRegister(2), count: Const9(Const9(29)), dest: DataRegister(8) }
MOVU { src: Const16(1), dest: DataRegister(DataRegister(9)) }
SH { src: DataRegister(9), count: DataRegister(DataRegister(8)), dest: DataRegister(2) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
AND { lhs: DataRegister(8), rhs: DataRegister(DataRegister(2)), dest: DataRegister(8) }
JNE { target: 171, lhs: DataRegister(8), rhs: Const4(0) }
OR { lhs: DataRegister(6), rhs: DataRegister(DataRegister(2)), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1180) }
MOV { src: DataRegister(DataRegister(3)), dest: DataRegister(DataRegister(2)) }
J { target: 170 }
MOVA { src: DataRegister(3), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(8) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(12) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(3), base: AddressRegister(2), offset: Const16(12) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(2), base: AddressRegister(2), offset: Const16(8) }
J { target: 167 }
STWPI { src: DataRegister(7), base: AddressRegister(9), offset: Const10(-4) }
ADD { lhs: DataRegister(2), rhs: DataRegister(DataRegister(3)), dest: DataRegister(0) }
OR { lhs: DataRegister(0), rhs: Const9(Const9(3)), dest: DataRegister(8) }
LDAPI { base: AddressRegister(9), offset: Const10(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(4) }
ADD { lhs: DataRegister(7), rhs: DataRegister(DataRegister(0)), dest: DataRegister(0) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(4), dest: DataRegister(8) }
OR { lhs: DataRegister(8), rhs: Const9(Const9(1)), dest: DataRegister(8) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(4) }
ADDI { lhs: DataRegister(7), rhs: Const16(8), dest: DataRegister(2) }
ADDI { lhs: DataRegister(1), rhs: Const16(16), dest: DataRegister(8) }
STW { src: DataRegister(8), base: AddressRegister(1), offset: Const16(0) }
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(1) }
LDW { base: AddressRegister(9), offset: Const16(65532), dest: DataRegister(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(2)) }
MOVU { src: Const16(65485), dest: DataRegister(DataRegister(7)) }
ADDIH { lhs: DataRegister(7), rhs: Const16(65534), dest: DataRegister(7) }
STWPI { src: DataRegister(7), base: AddressRegister(9), offset: Const10(-4) }
GEU { lhs: DataRegister(0), rhs: Const9(Const9(17)), dest: DataRegister(7) }
SELN { selector: DataRegister(0), lhs: DataRegister(7), rhs: Const9(Const9(16)), dest: DataRegister(0) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(7) }
SUB { lhs: DataRegister(7), rhs: DataRegister(0), dest: DataRegister(7) }
GEU { lhs: DataRegister(1), rhs: DataRegister(DataRegister(7)), dest: DataRegister(8) }
JNE { target: 172, lhs: DataRegister(8), rhs: Const4(0) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
ADDI { lhs: DataRegister(1), rhs: Const16(11), dest: DataRegister(7) }
MOVU { src: Const16(65528), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(65535), dest: DataRegister(8) }
AND { lhs: DataRegister(7), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
LTU { lhs: DataRegister(1), rhs: Const9(Const9(11)), dest: DataRegister(9) }
MOVU { src: Const16(16), dest: DataRegister(DataRegister(10)) }
SEL { selector: DataRegister(10), lhs: DataRegister(8), rhs: DataRegister(DataRegister(9)), dest: DataRegister(3) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(7) }
ADD { lhs: DataRegister(7), rhs: DataRegister(DataRegister(3)), dest: DataRegister(7) }
ADDI { lhs: DataRegister(7), rhs: Const16(12), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 25 }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(1) }
EQ { lhs: DataRegister(1), rhs: Const9(Const9(0)), dest: DataRegister(7) }
JNE { target: 172, lhs: DataRegister(7), rhs: Const4(0) }
ADDI { lhs: DataRegister(1), rhs: Const16(65528), dest: DataRegister(2) }
ADDI { lhs: DataRegister(0), rhs: Const16(65535), dest: DataRegister(4) }
AND { lhs: DataRegister(4), rhs: DataRegister(DataRegister(1)), dest: DataRegister(7) }
JNE { target: 174, lhs: DataRegister(7), rhs: Const4(0) }
MOV { src: DataRegister(DataRegister(2)), dest: DataRegister(DataRegister(0)) }
J { target: 173 }
ADDI { lhs: DataRegister(1), rhs: Const16(65532), dest: DataRegister(5) }
MOVU { src: Const16(65528), dest: DataRegister(DataRegister(7)) }
ADDIH { lhs: DataRegister(7), rhs: Const16(65535), dest: DataRegister(7) }
AND { lhs: DataRegister(6), rhs: DataRegister(DataRegister(7)), dest: DataRegister(7) }
STWPI { src: DataRegister(7), base: AddressRegister(9), offset: Const10(-4) }
ADD { lhs: DataRegister(4), rhs: DataRegister(DataRegister(1)), dest: DataRegister(7) }
RSUB0 { src: DataRegister(8) }
AND { lhs: DataRegister(7), rhs: DataRegister(DataRegister(8)), dest: DataRegister(9) }
ADDI { lhs: DataRegister(9), rhs: Const16(65528), dest: DataRegister(1) }
SUB { lhs: DataRegister(1), rhs: DataRegister(2), dest: DataRegister(7) }
GEU { lhs: DataRegister(7), rhs: Const9(Const9(17)), dest: DataRegister(8) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(9)) }
SEL { selector: DataRegister(9), lhs: DataRegister(0), rhs: DataRegister(DataRegister(8)), dest: DataRegister(9) }
ADD { lhs: DataRegister(1), rhs: DataRegister(DataRegister(9)), dest: DataRegister(0) }
SUB { lhs: DataRegister(0), rhs: DataRegister(2), dest: DataRegister(1) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(7) }
SUB { lhs: DataRegister(7), rhs: DataRegister(1), dest: DataRegister(4) }
AND { lhs: DataRegister(6), rhs: Const9(Const9(3)), dest: DataRegister(7) }
EQ { lhs: DataRegister(7), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 175, lhs: DataRegister(8), rhs: Const4(0) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(4), dest: DataRegister(7) }
AND { lhs: DataRegister(7), rhs: Const9(Const9(1)), dest: DataRegister(7) }
OR { lhs: DataRegister(4), rhs: DataRegister(DataRegister(7)), dest: DataRegister(8) }
OR { lhs: DataRegister(8), rhs: Const9(Const9(2)), dest: DataRegister(9) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(9), base: AddressRegister(2), offset: Const16(4) }
ADD { lhs: DataRegister(0), rhs: DataRegister(DataRegister(4)), dest: DataRegister(4) }
MOVA { src: DataRegister(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(4), dest: DataRegister(7) }
OR { lhs: DataRegister(7), rhs: Const9(Const9(1)), dest: DataRegister(7) }
MOVA { src: DataRegister(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(7), base: AddressRegister(2), offset: Const16(4) }
MOVA { src: DataRegister(5), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(0), dest: DataRegister(7) }
AND { lhs: DataRegister(7), rhs: Const9(Const9(1)), dest: DataRegister(7) }
OR { lhs: DataRegister(1), rhs: DataRegister(DataRegister(7)), dest: DataRegister(8) }
OR { lhs: DataRegister(8), rhs: Const9(Const9(2)), dest: DataRegister(9) }
MOVA { src: DataRegister(5), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(9), base: AddressRegister(2), offset: Const16(0) }
ADD { lhs: DataRegister(2), rhs: DataRegister(DataRegister(1)), dest: DataRegister(4) }
MOVA { src: DataRegister(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(4), dest: DataRegister(7) }
OR { lhs: DataRegister(7), rhs: Const9(Const9(1)), dest: DataRegister(7) }
MOVA { src: DataRegister(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(7), base: AddressRegister(2), offset: Const16(4) }
STWPI { src: DataRegister(2), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 22 }
J { target: 173 }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(4), base: AddressRegister(2), offset: Const16(4) }
ADD { lhs: DataRegister(2), rhs: DataRegister(DataRegister(1)), dest: DataRegister(7) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(7), base: AddressRegister(2), offset: Const16(0) }
AND { lhs: DataRegister(1), rhs: Const9(Const9(3)), dest: DataRegister(7) }
EQ { lhs: DataRegister(7), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 176, lhs: DataRegister(8), rhs: Const4(0) }
MOVU { src: Const16(65528), dest: DataRegister(DataRegister(7)) }
ADDIH { lhs: DataRegister(7), rhs: Const16(65535), dest: DataRegister(7) }
AND { lhs: DataRegister(1), rhs: DataRegister(DataRegister(7)), dest: DataRegister(2) }
ADDI { lhs: DataRegister(3), rhs: Const16(16), dest: DataRegister(7) }
GEU { lhs: DataRegister(7), rhs: DataRegister(DataRegister(2)), dest: DataRegister(8) }
JNE { target: 176, lhs: DataRegister(8), rhs: Const4(0) }
AND { lhs: DataRegister(1), rhs: Const9(Const9(1)), dest: DataRegister(7) }
OR { lhs: DataRegister(3), rhs: DataRegister(DataRegister(7)), dest: DataRegister(8) }
OR { lhs: DataRegister(8), rhs: Const9(Const9(2)), dest: DataRegister(9) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(9), base: AddressRegister(2), offset: Const16(4) }
ADD { lhs: DataRegister(0), rhs: DataRegister(DataRegister(3)), dest: DataRegister(1) }
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
SUB { lhs: DataRegister(2), rhs: DataRegister(3), dest: DataRegister(3) }
OR { lhs: DataRegister(3), rhs: Const9(Const9(3)), dest: DataRegister(7) }
LDAPI { base: AddressRegister(9), offset: Const10(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(7), base: AddressRegister(2), offset: Const16(4) }
ADD { lhs: DataRegister(0), rhs: DataRegister(DataRegister(2)), dest: DataRegister(2) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(4), dest: DataRegister(7) }
OR { lhs: DataRegister(7), rhs: Const9(Const9(1)), dest: DataRegister(7) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(7), base: AddressRegister(2), offset: Const16(4) }
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(3), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 22 }
ADDI { lhs: DataRegister(0), rhs: Const16(8), dest: DataRegister(2) }
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(0) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 28 }
LEA { base: AddressRegister(9), offset: Const16(4), dest: AddressRegister(9) }
RSLCX
RET
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(0) }
LDW { base: AddressRegister(1), offset: Const16(0), dest: DataRegister(4) }
ADDI { lhs: DataRegister(4), rhs: Const16(65520), dest: DataRegister(1) }
STW { src: DataRegister(1), base: AddressRegister(1), offset: Const16(0) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDA { base: AddressRegister(2), offset: Const16(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(2), rhs: AddressRegister(3), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(0), dest: AddressRegister(2) }
LDA { base: AddressRegister(2), offset: Const16(0), dest: AddressRegister(2) }
JI { src: AddressRegister(2) }
JNE { target: 178, lhs: DataRegister(3), rhs: Const4(0) }
MOVU { src: Const16(1), dest: DataRegister(DataRegister(2)) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(3)) }
J { target: 177 }
JNE { target: 178, lhs: DataRegister(3), rhs: Const4(0) }
J { target: 177 }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(2), base: AddressRegister(2), offset: Const16(12) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(4)) }
ADDIH { lhs: DataRegister(4), rhs: Const16(32768), dest: DataRegister(4) }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(4), base: AddressRegister(2), offset: Const16(0) }
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(380), dest: DataRegister(DataRegister(4)) }
ADDIH { lhs: DataRegister(4), rhs: Const16(16), dest: DataRegister(4) }
STWPI { src: DataRegister(4), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 38 }
Trap
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(3), base: AddressRegister(2), offset: Const16(4) }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(2), base: AddressRegister(2), offset: Const16(0) }
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(360), dest: DataRegister(DataRegister(4)) }
ADDIH { lhs: DataRegister(4), rhs: Const16(16), dest: DataRegister(4) }
STWPI { src: DataRegister(4), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 38 }
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(1) }
LDW { base: AddressRegister(9), offset: Const16(65532), dest: DataRegister(0) }
LDW { base: AddressRegister(1), offset: Const16(0), dest: DataRegister(3) }
ADDI { lhs: DataRegister(3), rhs: Const16(65488), dest: DataRegister(2) }
STW { src: DataRegister(2), base: AddressRegister(1), offset: Const16(0) }
ADDIHA { lhs: AddressRegister(0), rhs: Const16(16), dest: AddressRegister(2) }
LDBU { base: AddressRegister(2), offset: Const16(748), dest: DataRegister(3) }
EQ { lhs: DataRegister(3), rhs: Const9(Const9(0)), dest: DataRegister(3) }
JNE { target: 181, lhs: DataRegister(3), rhs: Const4(0) }
MOVU { src: Const16(2), dest: DataRegister(DataRegister(3)) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(3), base: AddressRegister(2), offset: Const16(12) }
MOVU { src: Const16(228), dest: DataRegister(DataRegister(3)) }
ADDIH { lhs: DataRegister(3), rhs: Const16(16), dest: DataRegister(3) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(3), base: AddressRegister(2), offset: Const16(8) }
MOV { src: Const16(Const16(1)), dest: ExtendedRegister(ExtendedRegister(4)) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STD { src: ExtendedRegister(4), base: AddressRegister(2), offset: Const16(20) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(1), base: AddressRegister(2), offset: Const16(44) }
MOVU { src: Const16(1), dest: DataRegister(DataRegister(4)) }
MOV { src: Const16(Const16(0)), dest: DataRegister(DataRegister(5)) }
SVLCX
MOV { src: Const16(Const16(32)), dest: ExtendedRegister(ExtendedRegister(6)) }
CALLLIBRARY(I64Shl)
RSLCX
ADDI { lhs: DataRegister(2), rhs: Const16(44), dest: DataRegister(4) }
MOV { src: DataRegister(DataRegister(4)), dest: DataRegister(DataRegister(6)) }
MOV { src: Const16(Const16(0)), dest: DataRegister(DataRegister(7)) }
OR { lhs: DataRegister(2), rhs: DataRegister(DataRegister(6)), dest: DataRegister(8) }
OR { lhs: DataRegister(3), rhs: DataRegister(DataRegister(7)), dest: DataRegister(9) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STD { src: ExtendedRegister(8), base: AddressRegister(2), offset: Const16(32) }
ADDI { lhs: DataRegister(2), rhs: Const16(32), dest: DataRegister(3) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(3), base: AddressRegister(2), offset: Const16(16) }
ADDI { lhs: DataRegister(2), rhs: Const16(8), dest: DataRegister(3) }
STWPI { src: DataRegister(3), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(268), dest: DataRegister(DataRegister(3)) }
ADDIH { lhs: DataRegister(3), rhs: Const16(16), dest: DataRegister(3) }
STWPI { src: DataRegister(3), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 46 }
ADDI { lhs: DataRegister(2), rhs: Const16(48), dest: DataRegister(3) }
STW { src: DataRegister(3), base: AddressRegister(1), offset: Const16(0) }
LEA { base: AddressRegister(9), offset: Const16(12), dest: AddressRegister(9) }
RSLCX
RET
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(1) }
LDW { base: AddressRegister(9), offset: Const16(65532), dest: DataRegister(0) }
LTU { lhs: DataRegister(1), rhs: Const9(Const9(9)), dest: DataRegister(2) }
JNE { target: 182, lhs: DataRegister(2), rhs: Const4(0) }
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 26 }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(0) }
LEA { base: AddressRegister(9), offset: Const16(8), dest: AddressRegister(9) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(4) }
RSLCX
RET
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 25 }
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(2) }
LDW { base: AddressRegister(9), offset: Const16(65532), dest: DataRegister(1) }
LDW { base: AddressRegister(9), offset: Const16(65528), dest: DataRegister(0) }
ADDI { lhs: DataRegister(0), rhs: Const16(65532), dest: DataRegister(5) }
MOVU { src: Const16(65528), dest: DataRegister(DataRegister(5)) }
ADDIH { lhs: DataRegister(5), rhs: Const16(65535), dest: DataRegister(5) }
AND { lhs: DataRegister(3), rhs: DataRegister(DataRegister(5)), dest: DataRegister(4) }
STWPI { src: DataRegister(4), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(4), dest: DataRegister(DataRegister(5)) }
STWPI { src: DataRegister(5), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(8), dest: DataRegister(DataRegister(5)) }
STWPI { src: DataRegister(5), base: AddressRegister(9), offset: Const10(-4) }
AND { lhs: DataRegister(3), rhs: Const9(Const9(3)), dest: DataRegister(3) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(5) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(5) }
SEL { selector: DataRegister(5), lhs: DataRegister(5), rhs: DataRegister(DataRegister(3)), dest: DataRegister(5) }
ADD { lhs: DataRegister(5), rhs: DataRegister(DataRegister(1)), dest: DataRegister(6) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(7) }
LTU { lhs: DataRegister(7), rhs: DataRegister(DataRegister(6)), dest: DataRegister(7) }
JNE { target: 184, lhs: DataRegister(7), rhs: Const4(0) }
EQ { lhs: DataRegister(3), rhs: Const9(Const9(0)), dest: DataRegister(5) }
JNE { target: 185, lhs: DataRegister(5), rhs: Const4(0) }
ADDI { lhs: DataRegister(1), rhs: Const16(39), dest: DataRegister(5) }
LTU { lhs: DataRegister(5), rhs: DataRegister(DataRegister(4)), dest: DataRegister(6) }
JNE { target: 183, lhs: DataRegister(6), rhs: Const4(0) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 24 }
LEA { base: AddressRegister(9), offset: Const16(20), dest: AddressRegister(9) }
RSLCX
RET
MOVU { src: Const16(65), dest: DataRegister(DataRegister(5)) }
ADDIH { lhs: DataRegister(5), rhs: Const16(16), dest: DataRegister(5) }
STWPI { src: DataRegister(5), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(46), dest: DataRegister(DataRegister(5)) }
STWPI { src: DataRegister(5), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(112), dest: DataRegister(DataRegister(5)) }
ADDIH { lhs: DataRegister(5), rhs: Const16(16), dest: DataRegister(5) }
STWPI { src: DataRegister(5), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 47 }
Trap
MOVU { src: Const16(128), dest: DataRegister(DataRegister(5)) }
ADDIH { lhs: DataRegister(5), rhs: Const16(16), dest: DataRegister(5) }
STWPI { src: DataRegister(5), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(46), dest: DataRegister(DataRegister(5)) }
STWPI { src: DataRegister(5), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(176), dest: DataRegister(DataRegister(5)) }
ADDIH { lhs: DataRegister(5), rhs: Const16(16), dest: DataRegister(5) }
STWPI { src: DataRegister(5), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 47 }
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(3) }
LDW { base: AddressRegister(9), offset: Const16(65532), dest: DataRegister(2) }
LDW { base: AddressRegister(9), offset: Const16(65528), dest: DataRegister(1) }
LDW { base: AddressRegister(9), offset: Const16(65524), dest: DataRegister(0) }
ADDI { lhs: DataRegister(0), rhs: Const16(65532), dest: DataRegister(4) }
MOVU { src: Const16(65528), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(65535), dest: DataRegister(8) }
AND { lhs: DataRegister(5), rhs: DataRegister(DataRegister(8)), dest: DataRegister(6) }
STWPI { src: DataRegister(6), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(4), dest: DataRegister(DataRegister(8)) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(8), dest: DataRegister(DataRegister(8)) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
AND { lhs: DataRegister(5), rhs: Const9(Const9(3)), dest: DataRegister(7) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
SEL { selector: DataRegister(8), lhs: DataRegister(8), rhs: DataRegister(DataRegister(7)), dest: DataRegister(8) }
ADD { lhs: DataRegister(8), rhs: DataRegister(DataRegister(1)), dest: DataRegister(9) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(10) }
LTU { lhs: DataRegister(10), rhs: DataRegister(DataRegister(9)), dest: DataRegister(10) }
JNE { target: 190, lhs: DataRegister(10), rhs: Const4(0) }
ADDI { lhs: DataRegister(1), rhs: Const16(39), dest: DataRegister(8) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(4) }
EQ { lhs: DataRegister(7), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 191, lhs: DataRegister(8), rhs: Const4(0) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
LTU { lhs: DataRegister(8), rhs: DataRegister(DataRegister(6)), dest: DataRegister(8) }
JNE { target: 189, lhs: DataRegister(8), rhs: Const4(0) }
LTU { lhs: DataRegister(2), rhs: Const9(Const9(9)), dest: DataRegister(8) }
JNE { target: 194, lhs: DataRegister(8), rhs: Const4(0) }
STWPI { src: DataRegister(2), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(3), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 26 }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(2) }
JNE { target: 193, lhs: DataRegister(2), rhs: Const4(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(0)) }
LEA { base: AddressRegister(9), offset: Const16(40), dest: AddressRegister(9) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(4) }
RSLCX
RET
MOVU { src: Const16(0), dest: DataRegister(DataRegister(2)) }
MOVU { src: Const16(65484), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(65534), dest: DataRegister(8) }
LTU { lhs: DataRegister(8), rhs: DataRegister(DataRegister(3)), dest: DataRegister(8) }
JNE { target: 192, lhs: DataRegister(8), rhs: Const4(0) }
ADDI { lhs: DataRegister(3), rhs: Const16(11), dest: DataRegister(8) }
MOVU { src: Const16(65528), dest: DataRegister(DataRegister(9)) }
ADDIH { lhs: DataRegister(9), rhs: Const16(65535), dest: DataRegister(9) }
AND { lhs: DataRegister(8), rhs: DataRegister(DataRegister(9)), dest: DataRegister(9) }
LTU { lhs: DataRegister(3), rhs: Const9(Const9(11)), dest: DataRegister(10) }
MOVU { src: Const16(16), dest: DataRegister(DataRegister(11)) }
SEL { selector: DataRegister(11), lhs: DataRegister(9), rhs: DataRegister(DataRegister(10)), dest: DataRegister(1) }
JNE { target: 196, lhs: DataRegister(7), rhs: Const4(0) }
LTU { lhs: DataRegister(1), rhs: Const9(Const9(256)), dest: DataRegister(8) }
JNE { target: 195, lhs: DataRegister(8), rhs: Const4(0) }
OR { lhs: DataRegister(1), rhs: Const9(Const9(4)), dest: DataRegister(8) }
LTU { lhs: DataRegister(6), rhs: DataRegister(DataRegister(8)), dest: DataRegister(9) }
JNE { target: 195, lhs: DataRegister(9), rhs: Const4(0) }
SUB { lhs: DataRegister(6), rhs: DataRegister(1), dest: DataRegister(8) }
MOVU { src: Const16(1), dest: DataRegister(DataRegister(9)) }
ADDIH { lhs: DataRegister(9), rhs: Const16(2), dest: DataRegister(9) }
GEU { lhs: DataRegister(8), rhs: DataRegister(DataRegister(9)), dest: DataRegister(9) }
JNE { target: 195, lhs: DataRegister(9), rhs: Const4(0) }
RSLCX
RET
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
ADDI { lhs: DataRegister(0), rhs: Const16(65528), dest: DataRegister(8) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(4) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
ADD { lhs: DataRegister(8), rhs: DataRegister(DataRegister(6)), dest: DataRegister(7) }
GEU { lhs: DataRegister(6), rhs: DataRegister(DataRegister(1)), dest: DataRegister(8) }
JNE { target: 201, lhs: DataRegister(8), rhs: Const4(0) }
ADDIHA { lhs: AddressRegister(0), rhs: Const16(16), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(1200), dest: DataRegister(8) }
EQ { lhs: DataRegister(7), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
JNE { target: 197, lhs: DataRegister(8), rhs: Const4(0) }
ADDIHA { lhs: AddressRegister(0), rhs: Const16(16), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(1196), dest: DataRegister(8) }
EQ { lhs: DataRegister(7), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
JNE { target: 199, lhs: DataRegister(8), rhs: Const4(0) }
AND { lhs: DataRegister(5), rhs: Const9(Const9(2)), dest: DataRegister(8) }
JNE { target: 195, lhs: DataRegister(8), rhs: Const4(0) }
MOVU { src: Const16(65528), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(65535), dest: DataRegister(8) }
AND { lhs: DataRegister(5), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(8) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
ADD { lhs: DataRegister(8), rhs: DataRegister(DataRegister(6)), dest: DataRegister(5) }
LTU { lhs: DataRegister(5), rhs: DataRegister(DataRegister(1)), dest: DataRegister(8) }
JNE { target: 195, lhs: DataRegister(8), rhs: Const4(0) }
STWPI { src: DataRegister(7), base: AddressRegister(9), offset: Const10(-4) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 21 }
SUB { lhs: DataRegister(5), rhs: DataRegister(1), dest: DataRegister(3) }
LTU { lhs: DataRegister(3), rhs: Const9(Const9(16)), dest: DataRegister(8) }
JNE { target: 200, lhs: DataRegister(8), rhs: Const4(0) }
MOVA { src: DataRegister(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(0), dest: DataRegister(8) }
AND { lhs: DataRegister(8), rhs: Const9(Const9(1)), dest: DataRegister(8) }
OR { lhs: DataRegister(1), rhs: DataRegister(DataRegister(8)), dest: DataRegister(9) }
OR { lhs: DataRegister(9), rhs: Const9(Const9(2)), dest: DataRegister(10) }
MOVA { src: DataRegister(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(10), base: AddressRegister(2), offset: Const16(0) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
ADD { lhs: DataRegister(8), rhs: DataRegister(DataRegister(1)), dest: DataRegister(1) }
OR { lhs: DataRegister(3), rhs: Const9(Const9(3)), dest: DataRegister(8) }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(4) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
ADD { lhs: DataRegister(8), rhs: DataRegister(DataRegister(5)), dest: DataRegister(2) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(4), dest: DataRegister(8) }
OR { lhs: DataRegister(8), rhs: Const9(Const9(1)), dest: DataRegister(8) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(4) }
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(3), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 22 }
RSLCX
RET
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
SUB { lhs: DataRegister(6), rhs: DataRegister(1), dest: DataRegister(3) }
GEU { lhs: DataRegister(3), rhs: Const9(Const9(16)), dest: DataRegister(8) }
JNE { target: 198, lhs: DataRegister(8), rhs: Const4(0) }
RSLCX
RET
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
MOVA { src: DataRegister(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(0), dest: DataRegister(8) }
AND { lhs: DataRegister(8), rhs: Const9(Const9(1)), dest: DataRegister(8) }
OR { lhs: DataRegister(5), rhs: DataRegister(DataRegister(8)), dest: DataRegister(9) }
OR { lhs: DataRegister(9), rhs: Const9(Const9(2)), dest: DataRegister(10) }
MOVA { src: DataRegister(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(10), base: AddressRegister(2), offset: Const16(0) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
ADD { lhs: DataRegister(8), rhs: DataRegister(DataRegister(5)), dest: DataRegister(1) }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(4), dest: DataRegister(8) }
OR { lhs: DataRegister(8), rhs: Const9(Const9(1)), dest: DataRegister(8) }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(4) }
RSLCX
RET
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
ADDIHA { lhs: AddressRegister(0), rhs: Const16(16), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(1188), dest: DataRegister(8) }
ADD { lhs: DataRegister(8), rhs: DataRegister(DataRegister(6)), dest: DataRegister(7) }
LTU { lhs: DataRegister(7), rhs: DataRegister(DataRegister(1)), dest: DataRegister(8) }
JNE { target: 195, lhs: DataRegister(8), rhs: Const4(0) }
SUB { lhs: DataRegister(7), rhs: DataRegister(1), dest: DataRegister(3) }
GEU { lhs: DataRegister(3), rhs: Const9(Const9(16)), dest: DataRegister(8) }
JNE { target: 203, lhs: DataRegister(8), rhs: Const4(0) }
AND { lhs: DataRegister(5), rhs: Const9(Const9(1)), dest: DataRegister(8) }
OR { lhs: DataRegister(8), rhs: DataRegister(DataRegister(7)), dest: DataRegister(9) }
OR { lhs: DataRegister(9), rhs: Const9(Const9(2)), dest: DataRegister(10) }
MOVA { src: DataRegister(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(10), base: AddressRegister(2), offset: Const16(0) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
ADD { lhs: DataRegister(8), rhs: DataRegister(DataRegister(7)), dest: DataRegister(1) }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(4), dest: DataRegister(8) }
OR { lhs: DataRegister(8), rhs: Const9(Const9(1)), dest: DataRegister(8) }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(4) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(3)) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(1)) }
J { target: 202 }
AND { lhs: DataRegister(5), rhs: Const9(Const9(1)), dest: DataRegister(8) }
OR { lhs: DataRegister(1), rhs: DataRegister(DataRegister(8)), dest: DataRegister(9) }
OR { lhs: DataRegister(9), rhs: Const9(Const9(2)), dest: DataRegister(10) }
MOVA { src: DataRegister(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(10), base: AddressRegister(2), offset: Const16(0) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
ADD { lhs: DataRegister(8), rhs: DataRegister(DataRegister(1)), dest: DataRegister(1) }
OR { lhs: DataRegister(3), rhs: Const9(Const9(1)), dest: DataRegister(8) }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(4) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
ADD { lhs: DataRegister(8), rhs: DataRegister(DataRegister(7)), dest: DataRegister(2) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(3), base: AddressRegister(2), offset: Const16(0) }
MOVU { src: Const16(65534), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(65535), dest: DataRegister(8) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(4), dest: DataRegister(8) }
AND { lhs: DataRegister(8), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(4) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(1), base: AddressRegister(2), offset: Const16(1196) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(3), base: AddressRegister(2), offset: Const16(1188) }
RSLCX
RET
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
AND { lhs: DataRegister(5), rhs: Const9(Const9(1)), dest: DataRegister(8) }
OR { lhs: DataRegister(1), rhs: DataRegister(DataRegister(8)), dest: DataRegister(9) }
OR { lhs: DataRegister(9), rhs: Const9(Const9(2)), dest: DataRegister(10) }
MOVA { src: DataRegister(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(10), base: AddressRegister(2), offset: Const16(0) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
ADD { lhs: DataRegister(8), rhs: DataRegister(DataRegister(1)), dest: DataRegister(1) }
OR { lhs: DataRegister(3), rhs: Const9(Const9(3)), dest: DataRegister(8) }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(4) }
MOVA { src: DataRegister(7), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(4), dest: DataRegister(8) }
OR { lhs: DataRegister(8), rhs: Const9(Const9(1)), dest: DataRegister(8) }
MOVA { src: DataRegister(7), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(4) }
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(3), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 22 }
RSLCX
RET
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
ADDIHA { lhs: AddressRegister(0), rhs: Const16(16), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(1192), dest: DataRegister(8) }
ADD { lhs: DataRegister(8), rhs: DataRegister(DataRegister(6)), dest: DataRegister(7) }
LTU { lhs: DataRegister(1), rhs: DataRegister(DataRegister(7)), dest: DataRegister(8) }
JNE { target: 186, lhs: DataRegister(8), rhs: Const4(0) }
STWPI { src: DataRegister(3), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 25 }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(1) }
EQ { lhs: DataRegister(1), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 192, lhs: DataRegister(8), rhs: Const4(0) }
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(65532), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(65535), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(65528), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(65535), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
AND { lhs: DataRegister(2), rhs: Const9(Const9(3)), dest: DataRegister(8) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(9) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(9) }
SEL { selector: DataRegister(9), lhs: DataRegister(9), rhs: DataRegister(DataRegister(8)), dest: DataRegister(9) }
MOVU { src: Const16(65528), dest: DataRegister(DataRegister(10)) }
ADDIH { lhs: DataRegister(10), rhs: Const16(65535), dest: DataRegister(10) }
AND { lhs: DataRegister(2), rhs: DataRegister(DataRegister(10)), dest: DataRegister(10) }
ADD { lhs: DataRegister(9), rhs: DataRegister(DataRegister(10)), dest: DataRegister(2) }
LTU { lhs: DataRegister(2), rhs: DataRegister(DataRegister(3)), dest: DataRegister(8) }
SEL { selector: DataRegister(2), lhs: DataRegister(3), rhs: DataRegister(DataRegister(8)), dest: DataRegister(9) }
STWPI { src: DataRegister(9), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 57 }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(1) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 24 }
RSLCX
RET
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(2), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
LTU { lhs: DataRegister(1), rhs: DataRegister(DataRegister(3)), dest: DataRegister(8) }
SEL { selector: DataRegister(1), lhs: DataRegister(3), rhs: DataRegister(DataRegister(8)), dest: DataRegister(9) }
STWPI { src: DataRegister(9), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 57 }
LEA { base: AddressRegister(9), offset: Const16(4), dest: AddressRegister(9) }
MOVU { src: Const16(65528), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(65535), dest: DataRegister(8) }
AND { lhs: DataRegister(3), rhs: DataRegister(DataRegister(8)), dest: DataRegister(7) }
STWPI { src: DataRegister(7), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(4), dest: DataRegister(DataRegister(8)) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(8), dest: DataRegister(DataRegister(8)) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
AND { lhs: DataRegister(3), rhs: Const9(Const9(3)), dest: DataRegister(3) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
SEL { selector: DataRegister(8), lhs: DataRegister(8), rhs: DataRegister(DataRegister(3)), dest: DataRegister(8) }
ADD { lhs: DataRegister(8), rhs: DataRegister(DataRegister(1)), dest: DataRegister(9) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(10) }
LTU { lhs: DataRegister(10), rhs: DataRegister(DataRegister(9)), dest: DataRegister(10) }
JNE { target: 188, lhs: DataRegister(10), rhs: Const4(0) }
EQ { lhs: DataRegister(3), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 204, lhs: DataRegister(8), rhs: Const4(0) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
LTU { lhs: DataRegister(8), rhs: DataRegister(DataRegister(7)), dest: DataRegister(8) }
JNE { target: 187, lhs: DataRegister(8), rhs: Const4(0) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 24 }
RSLCX
RET
STWPI { src: DataRegister(2), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(65), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(46), dest: DataRegister(DataRegister(8)) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(112), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 47 }
Trap
MOVU { src: Const16(128), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(46), dest: DataRegister(DataRegister(8)) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(176), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 47 }
Trap
MOVU { src: Const16(65), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(46), dest: DataRegister(DataRegister(8)) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(112), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 47 }
Trap
MOVU { src: Const16(128), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(46), dest: DataRegister(DataRegister(8)) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(176), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 47 }
Trap
AND { lhs: DataRegister(5), rhs: Const9(Const9(1)), dest: DataRegister(8) }
OR { lhs: DataRegister(1), rhs: DataRegister(DataRegister(8)), dest: DataRegister(9) }
OR { lhs: DataRegister(9), rhs: Const9(Const9(2)), dest: DataRegister(10) }
MOVA { src: DataRegister(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(10), base: AddressRegister(2), offset: Const16(0) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
ADD { lhs: DataRegister(8), rhs: DataRegister(DataRegister(1)), dest: DataRegister(3) }
STWPI { src: DataRegister(3), base: AddressRegister(9), offset: Const10(-4) }
SUB { lhs: DataRegister(7), rhs: DataRegister(1), dest: DataRegister(1) }
OR { lhs: DataRegister(1), rhs: Const9(Const9(1)), dest: DataRegister(8) }
LDAPI { base: AddressRegister(9), offset: Const10(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(4) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(1), base: AddressRegister(2), offset: Const16(1192) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(3), base: AddressRegister(2), offset: Const16(1200) }
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(0) }
LDW { base: AddressRegister(1), offset: Const16(0), dest: DataRegister(3) }
ADDI { lhs: DataRegister(3), rhs: Const16(65520), dest: DataRegister(1) }
STW { src: DataRegister(1), base: AddressRegister(1), offset: Const16(0) }
JNE { target: 205, lhs: DataRegister(2), rhs: Const4(0) }
MOVU { src: Const16(312), dest: DataRegister(DataRegister(3)) }
ADDIH { lhs: DataRegister(3), rhs: Const16(16), dest: DataRegister(3) }
STWPI { src: DataRegister(3), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 51 }
Trap
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(12), dest: DataRegister(3) }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(3), base: AddressRegister(2), offset: Const16(12) }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(8) }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(2), base: AddressRegister(2), offset: Const16(4) }
ADDI { lhs: DataRegister(1), rhs: Const16(4), dest: DataRegister(3) }
STWPI { src: DataRegister(3), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 27 }
LEA { base: AddressRegister(9), offset: Const16(12), dest: AddressRegister(9) }
RSLCX
RET
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(1) }
LDW { base: AddressRegister(9), offset: Const16(65532), dest: DataRegister(0) }
LDW { base: AddressRegister(1), offset: Const16(0), dest: DataRegister(5) }
ADDI { lhs: DataRegister(5), rhs: Const16(65488), dest: DataRegister(2) }
STW { src: DataRegister(2), base: AddressRegister(1), offset: Const16(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(5)) }
ADDIH { lhs: DataRegister(5), rhs: Const16(32768), dest: DataRegister(5) }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(0), dest: DataRegister(5) }
NE { lhs: DataRegister(5), rhs: DataRegister(DataRegister(5)), dest: DataRegister(5) }
JNE { target: 206, lhs: DataRegister(5), rhs: Const4(0) }
ADDI { lhs: DataRegister(2), rhs: Const16(36), dest: DataRegister(5) }
ADDI { lhs: DataRegister(5), rhs: Const16(8), dest: DataRegister(4) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(5)) }
MOVA { src: DataRegister(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(5), base: AddressRegister(2), offset: Const16(0) }
MOV { src: Const16(Const16(0)), dest: ExtendedRegister(ExtendedRegister(8)) }
MOV { src: Const16(Const16(1)), dest: DataRegister(DataRegister(9)) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STD { src: ExtendedRegister(8), base: AddressRegister(2), offset: Const16(36) }
ADDI { lhs: DataRegister(2), rhs: Const16(36), dest: DataRegister(5) }
STWPI { src: DataRegister(5), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(5)) }
ADDIH { lhs: DataRegister(5), rhs: Const16(16), dest: DataRegister(5) }
STWPI { src: DataRegister(5), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(3), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 49 }
LEA { base: AddressRegister(9), offset: Const16(4), dest: AddressRegister(9) }
ADDI { lhs: DataRegister(2), rhs: Const16(24), dest: DataRegister(5) }
ADDI { lhs: DataRegister(5), rhs: Const16(8), dest: DataRegister(6) }
STWPI { src: DataRegister(6), base: AddressRegister(9), offset: Const10(-4) }
LDAPI { base: AddressRegister(9), offset: Const10(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(3), base: AddressRegister(2), offset: Const16(0) }
STWPI { src: DataRegister(2), base: AddressRegister(9), offset: Const10(-4) }
LDAPI { base: AddressRegister(9), offset: Const10(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STD { src: ExtendedRegister(6), base: AddressRegister(2), offset: Const16(24) }
ADDI { lhs: DataRegister(1), rhs: Const16(8), dest: DataRegister(5) }
MOVA { src: DataRegister(5), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(3), base: AddressRegister(2), offset: Const16(0) }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STD { src: ExtendedRegister(6), base: AddressRegister(2), offset: Const16(0) }
MOV { src: Const16(Const16(0)), dest: ExtendedRegister(ExtendedRegister(8)) }
MOV { src: Const16(Const16(1)), dest: DataRegister(DataRegister(9)) }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STD { src: ExtendedRegister(8), base: AddressRegister(2), offset: Const16(0) }
ADDI { lhs: DataRegister(2), rhs: Const16(8), dest: DataRegister(5) }
ADDI { lhs: DataRegister(5), rhs: Const16(8), dest: DataRegister(3) }
STWPI { src: DataRegister(3), base: AddressRegister(9), offset: Const10(-4) }
ADDI { lhs: DataRegister(1), rhs: Const16(8), dest: DataRegister(1) }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(0), dest: DataRegister(5) }
LDAPI { base: AddressRegister(9), offset: Const10(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(5), base: AddressRegister(2), offset: Const16(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(5)) }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(5), base: AddressRegister(2), offset: Const16(0) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STD { src: ExtendedRegister(6), base: AddressRegister(2), offset: Const16(8) }
MOVU { src: Const16(12), dest: DataRegister(DataRegister(5)) }
STWPI { src: DataRegister(5), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(4), dest: DataRegister(DataRegister(5)) }
STWPI { src: DataRegister(5), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 6 }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(1) }
JNE { target: 207, lhs: DataRegister(1), rhs: Const4(0) }
MOVU { src: Const16(4), dest: DataRegister(DataRegister(5)) }
STWPI { src: DataRegister(5), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(12), dest: DataRegister(DataRegister(5)) }
STWPI { src: DataRegister(5), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 45 }
Trap
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDD { base: AddressRegister(2), offset: Const16(8), dest: ExtendedRegister(8) }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STD { src: ExtendedRegister(8), base: AddressRegister(2), offset: Const16(0) }
MOVA { src: DataRegister(3), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(0), dest: DataRegister(5) }
ADDI { lhs: DataRegister(1), rhs: Const16(8), dest: DataRegister(6) }
MOVA { src: DataRegister(6), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(5), base: AddressRegister(2), offset: Const16(0) }
MOVU { src: Const16(328), dest: DataRegister(DataRegister(5)) }
ADDIH { lhs: DataRegister(5), rhs: Const16(16), dest: DataRegister(5) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(5), base: AddressRegister(2), offset: Const16(4) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(1), base: AddressRegister(2), offset: Const16(0) }
ADDI { lhs: DataRegister(2), rhs: Const16(48), dest: DataRegister(5) }
STW { src: DataRegister(5), base: AddressRegister(1), offset: Const16(0) }
LEA { base: AddressRegister(9), offset: Const16(28), dest: AddressRegister(9) }
RSLCX
RET
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(1) }
LDW { base: AddressRegister(9), offset: Const16(65532), dest: DataRegister(0) }
LDW { base: AddressRegister(1), offset: Const16(0), dest: DataRegister(5) }
ADDI { lhs: DataRegister(5), rhs: Const16(65504), dest: DataRegister(2) }
STW { src: DataRegister(2), base: AddressRegister(1), offset: Const16(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(5)) }
ADDIH { lhs: DataRegister(5), rhs: Const16(32768), dest: DataRegister(5) }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(0), dest: DataRegister(5) }
NE { lhs: DataRegister(5), rhs: DataRegister(DataRegister(5)), dest: DataRegister(5) }
JNE { target: 208, lhs: DataRegister(5), rhs: Const4(0) }
ADDI { lhs: DataRegister(2), rhs: Const16(20), dest: DataRegister(5) }
ADDI { lhs: DataRegister(5), rhs: Const16(8), dest: DataRegister(4) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(5)) }
MOVA { src: DataRegister(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(5), base: AddressRegister(2), offset: Const16(0) }
MOV { src: Const16(Const16(0)), dest: ExtendedRegister(ExtendedRegister(8)) }
MOV { src: Const16(Const16(1)), dest: DataRegister(DataRegister(9)) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STD { src: ExtendedRegister(8), base: AddressRegister(2), offset: Const16(20) }
ADDI { lhs: DataRegister(2), rhs: Const16(20), dest: DataRegister(5) }
STWPI { src: DataRegister(5), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(5)) }
ADDIH { lhs: DataRegister(5), rhs: Const16(16), dest: DataRegister(5) }
STWPI { src: DataRegister(5), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(3), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 49 }
LEA { base: AddressRegister(9), offset: Const16(4), dest: AddressRegister(9) }
ADDI { lhs: DataRegister(2), rhs: Const16(8), dest: DataRegister(5) }
ADDI { lhs: DataRegister(5), rhs: Const16(8), dest: DataRegister(6) }
STWPI { src: DataRegister(6), base: AddressRegister(9), offset: Const10(-4) }
LDAPI { base: AddressRegister(9), offset: Const10(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(3), base: AddressRegister(2), offset: Const16(0) }
STWPI { src: DataRegister(2), base: AddressRegister(9), offset: Const10(-4) }
LDAPI { base: AddressRegister(9), offset: Const10(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STD { src: ExtendedRegister(6), base: AddressRegister(2), offset: Const16(8) }
ADDI { lhs: DataRegister(1), rhs: Const16(8), dest: DataRegister(5) }
MOVA { src: DataRegister(5), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(3), base: AddressRegister(2), offset: Const16(0) }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STD { src: ExtendedRegister(6), base: AddressRegister(2), offset: Const16(0) }
MOVU { src: Const16(328), dest: DataRegister(DataRegister(5)) }
ADDIH { lhs: DataRegister(5), rhs: Const16(16), dest: DataRegister(5) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(5), base: AddressRegister(2), offset: Const16(4) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(1), base: AddressRegister(2), offset: Const16(0) }
ADDI { lhs: DataRegister(2), rhs: Const16(32), dest: DataRegister(5) }
STW { src: DataRegister(5), base: AddressRegister(1), offset: Const16(0) }
LEA { base: AddressRegister(9), offset: Const16(28), dest: AddressRegister(9) }
RSLCX
RET
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(1) }
LDW { base: AddressRegister(9), offset: Const16(65532), dest: DataRegister(0) }
MOVU { src: Const16(8), dest: DataRegister(DataRegister(4)) }
STWPI { src: DataRegister(4), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(4), dest: DataRegister(DataRegister(4)) }
STWPI { src: DataRegister(4), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 6 }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(1) }
JNE { target: 209, lhs: DataRegister(1), rhs: Const4(0) }
MOVU { src: Const16(4), dest: DataRegister(DataRegister(4)) }
STWPI { src: DataRegister(4), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(8), dest: DataRegister(DataRegister(4)) }
STWPI { src: DataRegister(4), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 45 }
Trap
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(2), base: AddressRegister(2), offset: Const16(4) }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(3), base: AddressRegister(2), offset: Const16(0) }
MOVU { src: Const16(344), dest: DataRegister(DataRegister(4)) }
ADDIH { lhs: DataRegister(4), rhs: Const16(16), dest: DataRegister(4) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(4), base: AddressRegister(2), offset: Const16(4) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(1), base: AddressRegister(2), offset: Const16(0) }
LEA { base: AddressRegister(9), offset: Const16(16), dest: AddressRegister(9) }
RSLCX
RET
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(1) }
LDW { base: AddressRegister(9), offset: Const16(65532), dest: DataRegister(0) }
MOVU { src: Const16(344), dest: DataRegister(DataRegister(2)) }
ADDIH { lhs: DataRegister(2), rhs: Const16(16), dest: DataRegister(2) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(2), base: AddressRegister(2), offset: Const16(4) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(1), base: AddressRegister(2), offset: Const16(0) }
LEA { base: AddressRegister(9), offset: Const16(8), dest: AddressRegister(9) }
RSLCX
RET
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(5) }
LDW { base: AddressRegister(9), offset: Const16(65532), dest: DataRegister(4) }
LDW { base: AddressRegister(9), offset: Const16(65528), dest: DataRegister(3) }
LDW { base: AddressRegister(9), offset: Const16(65524), dest: DataRegister(2) }
LDW { base: AddressRegister(9), offset: Const16(65520), dest: DataRegister(1) }
LDW { base: AddressRegister(9), offset: Const16(65516), dest: DataRegister(0) }
LDW { base: AddressRegister(1), offset: Const16(0), dest: DataRegister(8) }
ADDI { lhs: DataRegister(8), rhs: Const16(65504), dest: DataRegister(6) }
STW { src: DataRegister(6), base: AddressRegister(1), offset: Const16(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(8)) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
ADDI { lhs: DataRegister(7), rhs: Const16(1), dest: DataRegister(8) }
LDAPI { base: AddressRegister(9), offset: Const10(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(768) }
LT { lhs: DataRegister(7), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 211, lhs: DataRegister(8), rhs: Const4(0) }
ADDIHA { lhs: AddressRegister(0), rhs: Const16(16), dest: AddressRegister(2) }
LDBU { base: AddressRegister(2), offset: Const16(1228), dest: DataRegister(8) }
AND { lhs: DataRegister(8), rhs: Const9(Const9(255)), dest: DataRegister(8) }
JNE { target: 211, lhs: DataRegister(8), rhs: Const4(0) }
MOVU { src: Const16(1), dest: DataRegister(DataRegister(8)) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STB { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1228) }
ADDIHA { lhs: AddressRegister(0), rhs: Const16(16), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(1224), dest: DataRegister(8) }
ADDI { lhs: DataRegister(8), rhs: Const16(1), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1224) }
MOVA { src: DataRegister(6), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STB { src: DataRegister(5), base: AddressRegister(2), offset: Const16(29) }
MOVA { src: DataRegister(6), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STB { src: DataRegister(4), base: AddressRegister(2), offset: Const16(28) }
MOVA { src: DataRegister(6), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(3), base: AddressRegister(2), offset: Const16(24) }
MOVA { src: DataRegister(6), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(2), base: AddressRegister(2), offset: Const16(20) }
MOVU { src: Const16(400), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(16), dest: DataRegister(8) }
MOVA { src: DataRegister(6), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(16) }
MOVU { src: Const16(1), dest: DataRegister(DataRegister(8)) }
MOVA { src: DataRegister(6), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(12) }
LT { lhs: DataRegister(7), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 211, lhs: DataRegister(8), rhs: Const4(0) }
ADDI { lhs: DataRegister(7), rhs: Const16(1), dest: DataRegister(8) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(756) }
ADDIHA { lhs: AddressRegister(0), rhs: Const16(16), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(760), dest: DataRegister(8) }
EQ { lhs: DataRegister(8), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 212, lhs: DataRegister(8), rhs: Const4(0) }
STWPI { src: DataRegister(6), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(16), dest: DataRegister(8) }
ADDSCA { lhs: AddressRegister(4), rhs: DataRegister(8), dest: AddressRegister(2), shift: Const4(2) }
LDA { base: AddressRegister(2), offset: Const16(0), dest: AddressRegister(2) }
CALLI { target: AddressRegister(2) }
MOVA { src: DataRegister(6), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDD { base: AddressRegister(2), offset: Const16(0), dest: ExtendedRegister(8) }
MOVA { src: DataRegister(6), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STD { src: ExtendedRegister(8), base: AddressRegister(2), offset: Const16(12) }
ADDI { lhs: DataRegister(6), rhs: Const16(12), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
ADDIHA { lhs: AddressRegister(0), rhs: Const16(16), dest: AddressRegister(2) }
LDA { base: AddressRegister(2), offset: Const16(764), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(20), dest: DataRegister(8) }
ADDSCA { lhs: AddressRegister(4), rhs: DataRegister(8), dest: AddressRegister(2), shift: Const4(2) }
LDA { base: AddressRegister(2), offset: Const16(0), dest: AddressRegister(2) }
CALLI { target: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(0), rhs: Const16(16), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(756), dest: DataRegister(8) }
ADDI { lhs: DataRegister(8), rhs: Const16(65535), dest: DataRegister(7) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STW { src: DataRegister(7), base: AddressRegister(2), offset: Const16(756) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(8)) }
MOVHA { src: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(16), dest: AddressRegister(2) }
STB { src: DataRegister(8), base: AddressRegister(2), offset: Const16(1228) }
JNE { target: 210, lhs: DataRegister(4), rhs: Const4(0) }
Trap
Trap
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 39 }
LEA { base: AddressRegister(9), offset: Const16(32), dest: AddressRegister(9) }
RSLCX
RET
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(1) }
LDW { base: AddressRegister(9), offset: Const16(65532), dest: DataRegister(0) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 41 }
LEA { base: AddressRegister(9), offset: Const16(4), dest: AddressRegister(9) }
LEA { base: AddressRegister(9), offset: Const16(8), dest: AddressRegister(9) }
RSLCX
RET
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(1) }
LDW { base: AddressRegister(9), offset: Const16(65532), dest: DataRegister(0) }
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
SELN { selector: DataRegister(2), lhs: DataRegister(2), rhs: Const9(Const9(2)), dest: DataRegister(3) }
ADDSCA { lhs: AddressRegister(4), rhs: DataRegister(3), dest: AddressRegister(2), shift: Const4(2) }
LDA { base: AddressRegister(2), offset: Const16(0), dest: AddressRegister(2) }
CALLI { target: AddressRegister(2) }
LEA { base: AddressRegister(9), offset: Const16(12), dest: AddressRegister(9) }
RSLCX
RET
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(1) }
LDW { base: AddressRegister(9), offset: Const16(65532), dest: DataRegister(0) }
Trap
LEA { base: AddressRegister(9), offset: Const16(8), dest: AddressRegister(9) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(4) }
RSLCX
RET
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(2) }
LDW { base: AddressRegister(9), offset: Const16(65532), dest: DataRegister(1) }
LDW { base: AddressRegister(9), offset: Const16(65528), dest: DataRegister(0) }
SHA { src: DataRegister(2), count: Const9(Const9(16)), dest: DataRegister(3) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(4)) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(4), base: AddressRegister(2), offset: Const16(8) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(4)) }
STWPI { src: DataRegister(4), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(4)) }
ADDIH { lhs: DataRegister(4), rhs: Const16(65535), dest: DataRegister(4) }
AND { lhs: DataRegister(2), rhs: DataRegister(DataRegister(4)), dest: DataRegister(4) }
STWPI { src: DataRegister(4), base: AddressRegister(9), offset: Const10(-4) }
EQ { lhs: DataRegister(3), rhs: Const9(Const9(511)), dest: DataRegister(2) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(4) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(4) }
SEL { selector: DataRegister(4), lhs: DataRegister(4), rhs: DataRegister(DataRegister(2)), dest: DataRegister(4) }
LDAPI { base: AddressRegister(9), offset: Const10(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(4), base: AddressRegister(2), offset: Const16(4) }
SH { src: DataRegister(3), count: Const9(Const9(16)), dest: DataRegister(4) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(5)) }
SEL { selector: DataRegister(5), lhs: DataRegister(4), rhs: DataRegister(DataRegister(2)), dest: DataRegister(5) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(5), base: AddressRegister(2), offset: Const16(0) }
LEA { base: AddressRegister(9), offset: Const16(16), dest: AddressRegister(9) }
RSLCX
RET
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(1), offset: Const16(0), dest: DataRegister(1) }
ADDI { lhs: DataRegister(1), rhs: Const16(65504), dest: DataRegister(0) }
STW { src: DataRegister(0), base: AddressRegister(1), offset: Const16(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(1)) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(1), base: AddressRegister(2), offset: Const16(24) }
MOVU { src: Const16(1), dest: DataRegister(DataRegister(1)) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(1), base: AddressRegister(2), offset: Const16(12) }
MOVU { src: Const16(436), dest: DataRegister(DataRegister(1)) }
ADDIH { lhs: DataRegister(1), rhs: Const16(16), dest: DataRegister(1) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(1), base: AddressRegister(2), offset: Const16(8) }
MOV { src: Const16(Const16(4)), dest: ExtendedRegister(ExtendedRegister(2)) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STD { src: ExtendedRegister(2), base: AddressRegister(2), offset: Const16(16) }
ADDI { lhs: DataRegister(0), rhs: Const16(8), dest: DataRegister(1) }
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(472), dest: DataRegister(DataRegister(1)) }
ADDIH { lhs: DataRegister(1), rhs: Const16(16), dest: DataRegister(1) }
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 46 }
LEA { base: AddressRegister(9), offset: Const16(4), dest: AddressRegister(9) }
RSLCX
RET
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(1) }
LDW { base: AddressRegister(9), offset: Const16(65532), dest: DataRegister(0) }
JNE { target: 213, lhs: DataRegister(0), rhs: Const4(0) }
CALL { target: 43 }
Trap
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 45 }
LEA { base: AddressRegister(9), offset: Const16(8), dest: AddressRegister(9) }
RSLCX
RET
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(1) }
LDW { base: AddressRegister(9), offset: Const16(65532), dest: DataRegister(0) }
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 9 }
LEA { base: AddressRegister(9), offset: Const16(8), dest: AddressRegister(9) }
RSLCX
RET
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(1) }
LDW { base: AddressRegister(9), offset: Const16(65532), dest: DataRegister(0) }
LDW { base: AddressRegister(1), offset: Const16(0), dest: DataRegister(3) }
ADDI { lhs: DataRegister(3), rhs: Const16(65504), dest: DataRegister(2) }
STW { src: DataRegister(2), base: AddressRegister(1), offset: Const16(0) }
MOVU { src: Const16(1), dest: DataRegister(DataRegister(3)) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STH { src: DataRegister(3), base: AddressRegister(2), offset: Const16(28) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(1), base: AddressRegister(2), offset: Const16(24) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(20) }
MOVU { src: Const16(532), dest: DataRegister(DataRegister(3)) }
ADDIH { lhs: DataRegister(3), rhs: Const16(16), dest: DataRegister(3) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(3), base: AddressRegister(2), offset: Const16(16) }
MOVU { src: Const16(1), dest: DataRegister(DataRegister(3)) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(3), base: AddressRegister(2), offset: Const16(12) }
ADDI { lhs: DataRegister(2), rhs: Const16(12), dest: DataRegister(3) }
STWPI { src: DataRegister(3), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 33 }
LEA { base: AddressRegister(9), offset: Const16(12), dest: AddressRegister(9) }
RSLCX
RET
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(2) }
LDW { base: AddressRegister(9), offset: Const16(65532), dest: DataRegister(1) }
LDW { base: AddressRegister(9), offset: Const16(65528), dest: DataRegister(0) }
LDW { base: AddressRegister(1), offset: Const16(0), dest: DataRegister(4) }
ADDI { lhs: DataRegister(4), rhs: Const16(65504), dest: DataRegister(3) }
STW { src: DataRegister(3), base: AddressRegister(1), offset: Const16(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(4)) }
MOVA { src: DataRegister(3), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(4), base: AddressRegister(2), offset: Const16(16) }
MOVU { src: Const16(1), dest: DataRegister(DataRegister(4)) }
MOVA { src: DataRegister(3), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(4), base: AddressRegister(2), offset: Const16(4) }
MOV { src: Const16(Const16(4)), dest: ExtendedRegister(ExtendedRegister(4)) }
MOVA { src: DataRegister(3), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STD { src: ExtendedRegister(4), base: AddressRegister(2), offset: Const16(8) }
MOVA { src: DataRegister(3), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(1), base: AddressRegister(2), offset: Const16(28) }
MOVA { src: DataRegister(3), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(24) }
ADDI { lhs: DataRegister(3), rhs: Const16(24), dest: DataRegister(4) }
MOVA { src: DataRegister(3), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(4), base: AddressRegister(2), offset: Const16(0) }
STWPI { src: DataRegister(3), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(2), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 46 }
LEA { base: AddressRegister(9), offset: Const16(16), dest: AddressRegister(9) }
RSLCX
RET
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(1) }
LDW { base: AddressRegister(9), offset: Const16(65532), dest: DataRegister(0) }
MOVU { src: Const16(1), dest: DataRegister(DataRegister(2)) }
STWPI { src: DataRegister(2), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 55 }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(0) }
LEA { base: AddressRegister(9), offset: Const16(8), dest: AddressRegister(9) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(4) }
RSLCX
RET
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(2) }
LDW { base: AddressRegister(9), offset: Const16(65532), dest: DataRegister(1) }
LDW { base: AddressRegister(9), offset: Const16(65528), dest: DataRegister(0) }
LDW { base: AddressRegister(1), offset: Const16(0), dest: DataRegister(8) }
ADDI { lhs: DataRegister(8), rhs: Const16(65488), dest: DataRegister(3) }
STW { src: DataRegister(3), base: AddressRegister(1), offset: Const16(0) }
MOVU { src: Const16(3), dest: DataRegister(DataRegister(8)) }
MOVA { src: DataRegister(3), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STB { src: DataRegister(8), base: AddressRegister(2), offset: Const16(44) }
MOVU { src: Const16(32), dest: DataRegister(DataRegister(8)) }
MOVA { src: DataRegister(3), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(28) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(4)) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(8)) }
MOVA { src: DataRegister(3), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(40) }
MOVA { src: DataRegister(3), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(1), base: AddressRegister(2), offset: Const16(36) }
MOVA { src: DataRegister(3), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(0), base: AddressRegister(2), offset: Const16(32) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(8)) }
MOVA { src: DataRegister(3), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(20) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(8)) }
MOVA { src: DataRegister(3), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(12) }
JNE { target: 218, lhs: DataRegister(5), rhs: Const4(0) }
EQ { lhs: DataRegister(0), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 217, lhs: DataRegister(8), rhs: Const4(0) }
SH { src: DataRegister(0), count: Const9(Const9(3)), dest: DataRegister(6) }
ADDI { lhs: DataRegister(0), rhs: Const16(65535), dest: DataRegister(8) }
MOVU { src: Const16(65535), dest: DataRegister(DataRegister(9)) }
ADDIH { lhs: DataRegister(9), rhs: Const16(8191), dest: DataRegister(9) }
AND { lhs: DataRegister(8), rhs: DataRegister(DataRegister(9)), dest: DataRegister(9) }
ADDI { lhs: DataRegister(9), rhs: Const16(1), dest: DataRegister(4) }
ADDI { lhs: DataRegister(0), rhs: Const16(4), dest: DataRegister(8) }
EQ { lhs: DataRegister(7), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 220, lhs: DataRegister(8), rhs: Const4(0) }
STWPI { src: DataRegister(7), base: AddressRegister(9), offset: Const10(-4) }
MOVA { src: DataRegister(3), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDA { base: AddressRegister(2), offset: Const16(36), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(12), dest: DataRegister(8) }
ADDSCA { lhs: AddressRegister(4), rhs: DataRegister(8), dest: AddressRegister(2), shift: Const4(2) }
LDA { base: AddressRegister(2), offset: Const16(0), dest: AddressRegister(2) }
CALLI { target: AddressRegister(2) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
JNE { target: 216, lhs: DataRegister(8), rhs: Const4(0) }
ADDI { lhs: DataRegister(3), rhs: Const16(12), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(4), dest: DataRegister(8) }
ADDSCA { lhs: AddressRegister(4), rhs: DataRegister(8), dest: AddressRegister(2), shift: Const4(2) }
LDA { base: AddressRegister(2), offset: Const16(0), dest: AddressRegister(2) }
CALLI { target: AddressRegister(2) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
JNE { target: 216, lhs: DataRegister(8), rhs: Const4(0) }
ADDI { lhs: DataRegister(1), rhs: Const16(8), dest: DataRegister(1) }
ADDI { lhs: DataRegister(0), rhs: Const16(8), dest: DataRegister(0) }
ADDI { lhs: DataRegister(6), rhs: Const16(65528), dest: DataRegister(6) }
JNE { target: 219, lhs: DataRegister(6), rhs: Const4(0) }
J { target: 217 }
EQ { lhs: DataRegister(1), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 217, lhs: DataRegister(8), rhs: Const4(0) }
SH { src: DataRegister(1), count: Const9(Const9(5)), dest: DataRegister(8) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(4) }
ADDI { lhs: DataRegister(1), rhs: Const16(65535), dest: DataRegister(8) }
MOVU { src: Const16(65535), dest: DataRegister(DataRegister(9)) }
ADDIH { lhs: DataRegister(9), rhs: Const16(2047), dest: DataRegister(9) }
AND { lhs: DataRegister(8), rhs: DataRegister(DataRegister(9)), dest: DataRegister(9) }
ADDI { lhs: DataRegister(9), rhs: Const16(1), dest: DataRegister(4) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(6)) }
ADDI { lhs: DataRegister(0), rhs: Const16(4), dest: DataRegister(8) }
EQ { lhs: DataRegister(1), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 222, lhs: DataRegister(8), rhs: Const4(0) }
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
MOVA { src: DataRegister(3), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDA { base: AddressRegister(2), offset: Const16(36), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(12), dest: DataRegister(8) }
ADDSCA { lhs: AddressRegister(4), rhs: DataRegister(8), dest: AddressRegister(2), shift: Const4(2) }
LDA { base: AddressRegister(2), offset: Const16(0), dest: AddressRegister(2) }
CALLI { target: AddressRegister(2) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
JNE { target: 216, lhs: DataRegister(8), rhs: Const4(0) }
STWPI { src: DataRegister(3), base: AddressRegister(9), offset: Const10(-4) }
ADD { lhs: DataRegister(5), rhs: DataRegister(DataRegister(6)), dest: DataRegister(1) }
ADDI { lhs: DataRegister(1), rhs: Const16(16), dest: DataRegister(8) }
MOVA { src: DataRegister(8), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(0), dest: DataRegister(8) }
LDAPI { base: AddressRegister(9), offset: Const10(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(28) }
ADDI { lhs: DataRegister(1), rhs: Const16(28), dest: DataRegister(8) }
MOVA { src: DataRegister(8), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDBU { base: AddressRegister(2), offset: Const16(0), dest: DataRegister(8) }
MOVA { src: DataRegister(3), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STB { src: DataRegister(8), base: AddressRegister(2), offset: Const16(44) }
ADDI { lhs: DataRegister(1), rhs: Const16(24), dest: DataRegister(8) }
MOVA { src: DataRegister(8), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(0), dest: DataRegister(8) }
MOVA { src: DataRegister(3), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(40) }
ADDI { lhs: DataRegister(1), rhs: Const16(12), dest: DataRegister(8) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(8)) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(12) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(8)) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(16) }
ADDI { lhs: DataRegister(1), rhs: Const16(8), dest: DataRegister(8) }
MOVA { src: DataRegister(8), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDA { base: AddressRegister(2), offset: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(2), rhs: AddressRegister(3), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(0), dest: AddressRegister(2) }
LDA { base: AddressRegister(2), offset: Const16(0), dest: AddressRegister(2) }
JI { src: AddressRegister(2) }
SH { src: DataRegister(7), count: Const9(Const9(3)), dest: DataRegister(8) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(20) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(8)) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(16) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
LDW { base: AddressRegister(10), offset: Const16(20), dest: DataRegister(8) }
ADD { lhs: DataRegister(8), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(20) }
LDA { base: AddressRegister(10), offset: Const16(20), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(4), dest: DataRegister(8) }
JNE { target: 223, lhs: DataRegister(8), rhs: Const4(0) }
MOVU { src: Const16(1), dest: DataRegister(DataRegister(8)) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(16) }
MOVA { src: DataRegister(3), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(7), base: AddressRegister(2), offset: Const16(16) }
LDW { base: AddressRegister(10), offset: Const16(16), dest: DataRegister(8) }
MOVA { src: DataRegister(3), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(12) }
ADDI { lhs: DataRegister(1), rhs: Const16(4), dest: DataRegister(8) }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDA { base: AddressRegister(2), offset: Const16(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(2), rhs: AddressRegister(3), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(0), dest: AddressRegister(2) }
LDA { base: AddressRegister(2), offset: Const16(3), dest: AddressRegister(2) }
JI { src: AddressRegister(2) }
SH { src: DataRegister(7), count: Const9(Const9(3)), dest: DataRegister(8) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(16) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
LDW { base: AddressRegister(10), offset: Const16(16), dest: DataRegister(8) }
ADD { lhs: DataRegister(8), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(16) }
LDA { base: AddressRegister(10), offset: Const16(16), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(4), dest: DataRegister(8) }
JNE { target: 226, lhs: DataRegister(8), rhs: Const4(0) }
MOVU { src: Const16(1), dest: DataRegister(DataRegister(8)) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(12) }
MOVA { src: DataRegister(3), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(7), base: AddressRegister(2), offset: Const16(24) }
LDW { base: AddressRegister(10), offset: Const16(12), dest: DataRegister(8) }
MOVA { src: DataRegister(3), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(20) }
ADDI { lhs: DataRegister(1), rhs: Const16(20), dest: DataRegister(8) }
MOVA { src: DataRegister(8), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(0), dest: DataRegister(9) }
SH { src: DataRegister(9), count: Const9(Const9(3)), dest: DataRegister(9) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(10) }
ADD { lhs: DataRegister(10), rhs: DataRegister(DataRegister(9)), dest: DataRegister(1) }
ADDI { lhs: DataRegister(3), rhs: Const16(12), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(4), dest: DataRegister(8) }
ADDSCA { lhs: AddressRegister(4), rhs: DataRegister(8), dest: AddressRegister(2), shift: Const4(2) }
LDA { base: AddressRegister(2), offset: Const16(0), dest: AddressRegister(2) }
CALLI { target: AddressRegister(2) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
JNE { target: 216, lhs: DataRegister(8), rhs: Const4(0) }
ADDI { lhs: DataRegister(0), rhs: Const16(8), dest: DataRegister(0) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
ADDI { lhs: DataRegister(6), rhs: Const16(32), dest: DataRegister(6) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
NE { lhs: DataRegister(8), rhs: DataRegister(DataRegister(6)), dest: DataRegister(8) }
JNE { target: 221, lhs: DataRegister(8), rhs: Const4(0) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(4), dest: DataRegister(8) }
GEU { lhs: DataRegister(4), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
JNE { target: 215, lhs: DataRegister(8), rhs: Const4(0) }
SH { src: DataRegister(4), count: Const9(Const9(3)), dest: DataRegister(8) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(0), dest: DataRegister(9) }
ADD { lhs: DataRegister(9), rhs: DataRegister(DataRegister(8)), dest: DataRegister(1) }
MOVA { src: DataRegister(3), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDA { base: AddressRegister(2), offset: Const16(36), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(12), dest: DataRegister(8) }
ADDSCA { lhs: AddressRegister(4), rhs: DataRegister(8), dest: AddressRegister(2), shift: Const4(2) }
LDA { base: AddressRegister(2), offset: Const16(0), dest: AddressRegister(2) }
CALLI { target: AddressRegister(2) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
EQ { lhs: DataRegister(8), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 215, lhs: DataRegister(8), rhs: Const4(0) }
MOVU { src: Const16(1), dest: DataRegister(DataRegister(1)) }
J { target: 214 }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(1)) }
ADDI { lhs: DataRegister(3), rhs: Const16(48), dest: DataRegister(8) }
STW { src: DataRegister(8), base: AddressRegister(1), offset: Const16(0) }
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(1) }
LDW { base: AddressRegister(9), offset: Const16(65532), dest: DataRegister(0) }
MOV { src: Const16(Const16(30541)), dest: ExtendedRegister(ExtendedRegister(2)) }
ADDIH { lhs: DataRegister(2), rhs: Const16(12380), dest: DataRegister(2) }
MOV { src: Const16(Const16(29002)), dest: DataRegister(DataRegister(3)) }
ADDIH { lhs: DataRegister(3), rhs: Const16(35391), dest: DataRegister(3) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STD { src: ExtendedRegister(2), base: AddressRegister(2), offset: Const16(8) }
MOV { src: Const16(Const16(55517)), dest: ExtendedRegister(ExtendedRegister(2)) }
ADDIH { lhs: DataRegister(2), rhs: Const16(14286), dest: DataRegister(2) }
MOV { src: Const16(Const16(23680)), dest: DataRegister(DataRegister(3)) }
ADDIH { lhs: DataRegister(3), rhs: Const16(41292), dest: DataRegister(3) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STD { src: ExtendedRegister(2), base: AddressRegister(2), offset: Const16(0) }
LEA { base: AddressRegister(9), offset: Const16(8), dest: AddressRegister(9) }
RSLCX
RET
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(0) }
MOVU { src: Const16(488), dest: DataRegister(DataRegister(1)) }
ADDIH { lhs: DataRegister(1), rhs: Const16(16), dest: DataRegister(1) }
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(43), dest: DataRegister(DataRegister(1)) }
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 47 }
LEA { base: AddressRegister(9), offset: Const16(4), dest: AddressRegister(9) }
RSLCX
RET
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(5) }
LDW { base: AddressRegister(9), offset: Const16(65532), dest: DataRegister(4) }
LDW { base: AddressRegister(9), offset: Const16(65528), dest: DataRegister(3) }
LDW { base: AddressRegister(9), offset: Const16(65524), dest: DataRegister(2) }
LDW { base: AddressRegister(9), offset: Const16(65520), dest: DataRegister(1) }
LDW { base: AddressRegister(9), offset: Const16(65516), dest: DataRegister(0) }
JNE { target: 230, lhs: DataRegister(1), rhs: Const4(0) }
ADDI { lhs: DataRegister(5), rhs: Const16(1), dest: DataRegister(6) }
MOVU { src: Const16(45), dest: DataRegister(DataRegister(8)) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(4) }
J { target: 229 }
MOVU { src: Const16(43), dest: DataRegister(DataRegister(8)) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(17), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
AND { lhs: DataRegister(7), rhs: Const9(Const9(1)), dest: DataRegister(1) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
SEL { selector: DataRegister(8), lhs: DataRegister(8), rhs: DataRegister(DataRegister(1)), dest: DataRegister(8) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(4) }
ADD { lhs: DataRegister(1), rhs: DataRegister(DataRegister(5)), dest: DataRegister(6) }
AND { lhs: DataRegister(7), rhs: Const9(Const9(4)), dest: DataRegister(8) }
JNE { target: 232, lhs: DataRegister(8), rhs: Const4(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(2)) }
J { target: 231 }
LTU { lhs: DataRegister(3), rhs: Const9(Const9(16)), dest: DataRegister(8) }
JNE { target: 234, lhs: DataRegister(8), rhs: Const4(0) }
STWPI { src: DataRegister(2), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(3), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 53 }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(1) }
J { target: 233 }
JNE { target: 235, lhs: DataRegister(3), rhs: Const4(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(1)) }
J { target: 233 }
AND { lhs: DataRegister(3), rhs: Const9(Const9(3)), dest: DataRegister(8) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(8) }
GEU { lhs: DataRegister(3), rhs: Const9(Const9(4)), dest: DataRegister(8) }
JNE { target: 237, lhs: DataRegister(8), rhs: Const4(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(1)) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(8)) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(12) }
J { target: 236 }
AND { lhs: DataRegister(3), rhs: Const9(Const9(12)), dest: DataRegister(8) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(16) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(1)) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(8)) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(12) }
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
LDW { base: AddressRegister(10), offset: Const16(12), dest: DataRegister(8) }
ADD { lhs: DataRegister(2), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(20) }
LDA { base: AddressRegister(10), offset: Const16(20), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDB { base: AddressRegister(2), offset: Const16(0), dest: DataRegister(8) }
GE { lhs: DataRegister(8), rhs: Const9(Const9(448)), dest: DataRegister(8) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(9) }
ADD { lhs: DataRegister(9), rhs: DataRegister(DataRegister(8)), dest: DataRegister(9) }
LDW { base: AddressRegister(10), offset: Const16(20), dest: DataRegister(10) }
ADDI { lhs: DataRegister(10), rhs: Const16(1), dest: DataRegister(10) }
MOVA { src: DataRegister(10), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDB { base: AddressRegister(2), offset: Const16(0), dest: DataRegister(11) }
GE { lhs: DataRegister(11), rhs: Const9(Const9(448)), dest: DataRegister(11) }
ADD { lhs: DataRegister(9), rhs: DataRegister(DataRegister(11)), dest: DataRegister(12) }
LDW { base: AddressRegister(10), offset: Const16(20), dest: DataRegister(13) }
ADDI { lhs: DataRegister(13), rhs: Const16(2), dest: DataRegister(13) }
MOVA { src: DataRegister(13), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDB { base: AddressRegister(2), offset: Const16(0), dest: DataRegister(14) }
GE { lhs: DataRegister(14), rhs: Const9(Const9(448)), dest: DataRegister(14) }
ADD { lhs: DataRegister(12), rhs: DataRegister(DataRegister(14)), dest: DataRegister(15) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
LDW { base: AddressRegister(10), offset: Const16(20), dest: DataRegister(8) }
ADDI { lhs: DataRegister(8), rhs: Const16(3), dest: DataRegister(8) }
MOVA { src: DataRegister(8), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDB { base: AddressRegister(2), offset: Const16(0), dest: DataRegister(9) }
GE { lhs: DataRegister(9), rhs: Const9(Const9(448)), dest: DataRegister(9) }
ADD { lhs: DataRegister(15), rhs: DataRegister(DataRegister(9)), dest: DataRegister(1) }
LDW { base: AddressRegister(10), offset: Const16(16), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
LDW { base: AddressRegister(10), offset: Const16(12), dest: DataRegister(8) }
ADDI { lhs: DataRegister(8), rhs: Const16(4), dest: DataRegister(8) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(12) }
LDW { base: AddressRegister(10), offset: Const16(12), dest: DataRegister(8) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
NE { lhs: DataRegister(8), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
JNE { target: 238, lhs: DataRegister(8), rhs: Const4(0) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
EQ { lhs: DataRegister(8), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 233, lhs: DataRegister(8), rhs: Const4(0) }
LDW { base: AddressRegister(10), offset: Const16(12), dest: DataRegister(8) }
ADD { lhs: DataRegister(2), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(20) }
LDA { base: AddressRegister(10), offset: Const16(20), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDB { base: AddressRegister(2), offset: Const16(0), dest: DataRegister(8) }
GE { lhs: DataRegister(8), rhs: Const9(Const9(448)), dest: DataRegister(8) }
ADD { lhs: DataRegister(1), rhs: DataRegister(DataRegister(8)), dest: DataRegister(1) }
LDW { base: AddressRegister(10), offset: Const16(20), dest: DataRegister(8) }
ADDI { lhs: DataRegister(8), rhs: Const16(1), dest: DataRegister(8) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(20) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
ADDI { lhs: DataRegister(8), rhs: Const16(65535), dest: DataRegister(8) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(8) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
JNE { target: 239, lhs: DataRegister(8), rhs: Const4(0) }
ADD { lhs: DataRegister(1), rhs: DataRegister(DataRegister(6)), dest: DataRegister(6) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(0), dest: DataRegister(8) }
JNE { target: 241, lhs: DataRegister(8), rhs: Const4(0) }
MOVU { src: Const16(1), dest: DataRegister(DataRegister(1)) }
LDW { base: AddressRegister(10), offset: Const16(20), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
LDW { base: AddressRegister(10), offset: Const16(12), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(2), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(3), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 54 }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
JNE { target: 240, lhs: DataRegister(8), rhs: Const4(0) }
LDW { base: AddressRegister(10), offset: Const16(20), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(4), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(5), base: AddressRegister(9), offset: Const10(-4) }
LDA { base: AddressRegister(10), offset: Const16(12), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(12), dest: DataRegister(8) }
ADDSCA { lhs: AddressRegister(4), rhs: DataRegister(8), dest: AddressRegister(2), shift: Const4(2) }
LDA { base: AddressRegister(2), offset: Const16(0), dest: AddressRegister(2) }
CALLI { target: AddressRegister(2) }
RSLCX
RET
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
LTU { lhs: DataRegister(6), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
JNE { target: 242, lhs: DataRegister(8), rhs: Const4(0) }
MOVU { src: Const16(1), dest: DataRegister(DataRegister(1)) }
LDW { base: AddressRegister(10), offset: Const16(20), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
LDW { base: AddressRegister(10), offset: Const16(12), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(2), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(3), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 54 }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
JNE { target: 240, lhs: DataRegister(8), rhs: Const4(0) }
LDW { base: AddressRegister(10), offset: Const16(20), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(4), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(5), base: AddressRegister(9), offset: Const10(-4) }
LDA { base: AddressRegister(10), offset: Const16(12), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(12), dest: DataRegister(8) }
ADDSCA { lhs: AddressRegister(4), rhs: DataRegister(8), dest: AddressRegister(2), shift: Const4(2) }
LDA { base: AddressRegister(2), offset: Const16(0), dest: AddressRegister(2) }
CALLI { target: AddressRegister(2) }
RSLCX
RET
AND { lhs: DataRegister(7), rhs: Const9(Const9(8)), dest: DataRegister(8) }
EQ { lhs: DataRegister(8), rhs: Const9(Const9(0)), dest: DataRegister(9) }
JNE { target: 243, lhs: DataRegister(9), rhs: Const4(0) }
MOVU { src: Const16(48), dest: DataRegister(DataRegister(8)) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(16) }
MOVU { src: Const16(1), dest: DataRegister(DataRegister(1)) }
MOVU { src: Const16(1), dest: DataRegister(DataRegister(8)) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STB { src: DataRegister(8), base: AddressRegister(2), offset: Const16(32) }
LDW { base: AddressRegister(10), offset: Const16(20), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
LDW { base: AddressRegister(10), offset: Const16(12), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(2), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(3), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 54 }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
JNE { target: 240, lhs: DataRegister(8), rhs: Const4(0) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
SUB { lhs: DataRegister(8), rhs: DataRegister(6), dest: DataRegister(8) }
ADDI { lhs: DataRegister(8), rhs: Const16(1), dest: DataRegister(1) }
ADDI { lhs: DataRegister(1), rhs: Const16(65535), dest: DataRegister(1) }
EQ { lhs: DataRegister(1), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 244, lhs: DataRegister(8), rhs: Const4(0) }
LDW { base: AddressRegister(10), offset: Const16(20), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(48), dest: DataRegister(DataRegister(8)) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
LDA { base: AddressRegister(10), offset: Const16(12), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(16), dest: DataRegister(8) }
ADDSCA { lhs: AddressRegister(4), rhs: DataRegister(8), dest: AddressRegister(2), shift: Const4(2) }
LDA { base: AddressRegister(2), offset: Const16(0), dest: AddressRegister(2) }
CALLI { target: AddressRegister(2) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
EQ { lhs: DataRegister(8), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 245, lhs: DataRegister(8), rhs: Const4(0) }
RSLCX
RET
MOVU { src: Const16(1), dest: DataRegister(DataRegister(8)) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(1), dest: DataRegister(DataRegister(1)) }
LDW { base: AddressRegister(10), offset: Const16(20), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(4), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(5), base: AddressRegister(9), offset: Const10(-4) }
LDA { base: AddressRegister(10), offset: Const16(12), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(12), dest: DataRegister(8) }
ADDSCA { lhs: AddressRegister(4), rhs: DataRegister(8), dest: AddressRegister(2), shift: Const4(2) }
LDA { base: AddressRegister(2), offset: Const16(0), dest: AddressRegister(2) }
CALLI { target: AddressRegister(2) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
JNE { target: 240, lhs: DataRegister(8), rhs: Const4(0) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STB { src: DataRegister(7), base: AddressRegister(2), offset: Const16(32) }
LDW { base: AddressRegister(10), offset: Const16(16), dest: DataRegister(8) }
MOVA { src: DataRegister(0), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(16) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(1)) }
J { target: 240 }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
SUB { lhs: DataRegister(8), rhs: DataRegister(6), dest: DataRegister(6) }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(2), rhs: AddressRegister(3), dest: AddressRegister(2) }
ADDIHA { lhs: AddressRegister(2), rhs: Const16(0), dest: AddressRegister(2) }
LDA { base: AddressRegister(2), offset: Const16(0), dest: AddressRegister(2) }
JI { src: AddressRegister(2) }
MOV { src: DataRegister(DataRegister(6)), dest: DataRegister(DataRegister(1)) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(6)) }
J { target: 246 }
SHA { src: DataRegister(6), count: Const9(Const9(31)), dest: DataRegister(1) }
ADDI { lhs: DataRegister(6), rhs: Const16(1), dest: DataRegister(8) }
SHA { src: DataRegister(8), count: Const9(Const9(31)), dest: DataRegister(6) }
ADDI { lhs: DataRegister(1), rhs: Const16(1), dest: DataRegister(1) }
ADDI { lhs: DataRegister(1), rhs: Const16(65535), dest: DataRegister(1) }
EQ { lhs: DataRegister(1), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 249, lhs: DataRegister(8), rhs: Const4(0) }
LDW { base: AddressRegister(10), offset: Const16(12), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
LDA { base: AddressRegister(10), offset: Const16(20), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(16), dest: DataRegister(8) }
ADDSCA { lhs: AddressRegister(4), rhs: DataRegister(8), dest: AddressRegister(2), shift: Const4(2) }
LDA { base: AddressRegister(2), offset: Const16(0), dest: AddressRegister(2) }
CALLI { target: AddressRegister(2) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
EQ { lhs: DataRegister(8), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 250, lhs: DataRegister(8), rhs: Const4(0) }
RSLCX
RET
MOVU { src: Const16(1), dest: DataRegister(DataRegister(8)) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(1), dest: DataRegister(DataRegister(1)) }
LDW { base: AddressRegister(10), offset: Const16(12), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
LDW { base: AddressRegister(10), offset: Const16(20), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(2), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(3), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 54 }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
JNE { target: 240, lhs: DataRegister(8), rhs: Const4(0) }
LDW { base: AddressRegister(10), offset: Const16(12), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(4), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(5), base: AddressRegister(9), offset: Const10(-4) }
LDA { base: AddressRegister(10), offset: Const16(20), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(12), dest: DataRegister(8) }
ADDSCA { lhs: AddressRegister(4), rhs: DataRegister(8), dest: AddressRegister(2), shift: Const4(2) }
LDA { base: AddressRegister(2), offset: Const16(0), dest: AddressRegister(2) }
CALLI { target: AddressRegister(2) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
JNE { target: 240, lhs: DataRegister(8), rhs: Const4(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(1)) }
NE { lhs: DataRegister(6), rhs: DataRegister(DataRegister(1)), dest: DataRegister(8) }
JNE { target: 252, lhs: DataRegister(8), rhs: Const4(0) }
RSLCX
RET
LTU { lhs: DataRegister(6), rhs: DataRegister(DataRegister(6)), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
ADDI { lhs: DataRegister(1), rhs: Const16(1), dest: DataRegister(1) }
LDW { base: AddressRegister(10), offset: Const16(12), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
LDA { base: AddressRegister(10), offset: Const16(20), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(16), dest: DataRegister(8) }
ADDSCA { lhs: AddressRegister(4), rhs: DataRegister(8), dest: AddressRegister(2), shift: Const4(2) }
LDA { base: AddressRegister(2), offset: Const16(0), dest: AddressRegister(2) }
CALLI { target: AddressRegister(2) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
EQ { lhs: DataRegister(8), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 251, lhs: DataRegister(8), rhs: Const4(0) }
RSLCX
RET
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(1) }
LDW { base: AddressRegister(9), offset: Const16(65532), dest: DataRegister(0) }
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
ADDI { lhs: DataRegister(0), rhs: Const16(3), dest: DataRegister(8) }
MOVU { src: Const16(65532), dest: DataRegister(DataRegister(9)) }
ADDIH { lhs: DataRegister(9), rhs: Const16(65535), dest: DataRegister(9) }
AND { lhs: DataRegister(8), rhs: DataRegister(DataRegister(9)), dest: DataRegister(2) }
SUB { lhs: DataRegister(2), rhs: DataRegister(0), dest: DataRegister(3) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
LTU { lhs: DataRegister(8), rhs: DataRegister(DataRegister(3)), dest: DataRegister(8) }
JNE { target: 254, lhs: DataRegister(8), rhs: Const4(0) }
SUB { lhs: DataRegister(1), rhs: DataRegister(3), dest: DataRegister(4) }
LTU { lhs: DataRegister(4), rhs: Const9(Const9(4)), dest: DataRegister(8) }
JNE { target: 254, lhs: DataRegister(8), rhs: Const4(0) }
AND { lhs: DataRegister(4), rhs: Const9(Const9(3)), dest: DataRegister(5) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(6)) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(1)) }
EQ { lhs: DataRegister(2), rhs: DataRegister(DataRegister(0)), dest: DataRegister(7) }
JNE { target: 255, lhs: DataRegister(7), rhs: Const4(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(1)) }
SUB { lhs: DataRegister(0), rhs: DataRegister(2), dest: DataRegister(8) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(4) }
MOVU { src: Const16(65532), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(65535), dest: DataRegister(8) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
GEU { lhs: DataRegister(8), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
JNE { target: 257, lhs: DataRegister(8), rhs: Const4(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(8)) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(8) }
J { target: 256 }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(8)) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(8) }
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
ADD { lhs: DataRegister(0), rhs: DataRegister(DataRegister(8)), dest: DataRegister(2) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDB { base: AddressRegister(2), offset: Const16(0), dest: DataRegister(8) }
GE { lhs: DataRegister(8), rhs: Const9(Const9(448)), dest: DataRegister(8) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(9) }
ADD { lhs: DataRegister(9), rhs: DataRegister(DataRegister(8)), dest: DataRegister(9) }
ADDI { lhs: DataRegister(2), rhs: Const16(1), dest: DataRegister(10) }
MOVA { src: DataRegister(10), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDB { base: AddressRegister(2), offset: Const16(0), dest: DataRegister(11) }
GE { lhs: DataRegister(11), rhs: Const9(Const9(448)), dest: DataRegister(11) }
ADD { lhs: DataRegister(9), rhs: DataRegister(DataRegister(11)), dest: DataRegister(12) }
ADDI { lhs: DataRegister(2), rhs: Const16(2), dest: DataRegister(13) }
MOVA { src: DataRegister(13), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDB { base: AddressRegister(2), offset: Const16(0), dest: DataRegister(14) }
GE { lhs: DataRegister(14), rhs: Const9(Const9(448)), dest: DataRegister(14) }
ADD { lhs: DataRegister(12), rhs: DataRegister(DataRegister(14)), dest: DataRegister(15) }
STWPI { src: DataRegister(2), base: AddressRegister(9), offset: Const10(-4) }
ADDI { lhs: DataRegister(2), rhs: Const16(3), dest: DataRegister(2) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDB { base: AddressRegister(2), offset: Const16(0), dest: DataRegister(8) }
GE { lhs: DataRegister(8), rhs: Const9(Const9(448)), dest: DataRegister(8) }
ADD { lhs: DataRegister(15), rhs: DataRegister(DataRegister(8)), dest: DataRegister(1) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
ADDI { lhs: DataRegister(8), rhs: Const16(4), dest: DataRegister(8) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(8) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
JNE { target: 258, lhs: DataRegister(8), rhs: Const4(0) }
JNE { target: 255, lhs: DataRegister(7), rhs: Const4(0) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
ADD { lhs: DataRegister(0), rhs: DataRegister(DataRegister(8)), dest: DataRegister(2) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDB { base: AddressRegister(2), offset: Const16(0), dest: DataRegister(8) }
GE { lhs: DataRegister(8), rhs: Const9(Const9(448)), dest: DataRegister(8) }
ADD { lhs: DataRegister(1), rhs: DataRegister(DataRegister(8)), dest: DataRegister(1) }
ADDI { lhs: DataRegister(2), rhs: Const16(1), dest: DataRegister(2) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
ADDI { lhs: DataRegister(8), rhs: Const16(1), dest: DataRegister(8) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(4) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
JNE { target: 259, lhs: DataRegister(8), rhs: Const4(0) }
ADD { lhs: DataRegister(0), rhs: DataRegister(DataRegister(3)), dest: DataRegister(8) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(8) }
EQ { lhs: DataRegister(5), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 260, lhs: DataRegister(8), rhs: Const4(0) }
MOVU { src: Const16(65532), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(65535), dest: DataRegister(8) }
AND { lhs: DataRegister(4), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(9) }
ADD { lhs: DataRegister(9), rhs: DataRegister(DataRegister(8)), dest: DataRegister(2) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDB { base: AddressRegister(2), offset: Const16(0), dest: DataRegister(8) }
GE { lhs: DataRegister(8), rhs: Const9(Const9(448)), dest: DataRegister(6) }
EQ { lhs: DataRegister(5), rhs: Const9(Const9(1)), dest: DataRegister(8) }
JNE { target: 260, lhs: DataRegister(8), rhs: Const4(0) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDB { base: AddressRegister(2), offset: Const16(1), dest: DataRegister(8) }
GE { lhs: DataRegister(8), rhs: Const9(Const9(448)), dest: DataRegister(8) }
ADD { lhs: DataRegister(6), rhs: DataRegister(DataRegister(8)), dest: DataRegister(6) }
EQ { lhs: DataRegister(5), rhs: Const9(Const9(2)), dest: DataRegister(8) }
JNE { target: 260, lhs: DataRegister(8), rhs: Const4(0) }
MOVA { src: DataRegister(2), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDB { base: AddressRegister(2), offset: Const16(2), dest: DataRegister(8) }
GE { lhs: DataRegister(8), rhs: Const9(Const9(448)), dest: DataRegister(8) }
ADD { lhs: DataRegister(6), rhs: DataRegister(DataRegister(8)), dest: DataRegister(6) }
SHA { src: DataRegister(4), count: Const9(Const9(30)), dest: DataRegister(3) }
ADD { lhs: DataRegister(6), rhs: DataRegister(DataRegister(1)), dest: DataRegister(8) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(4) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(4) }
EQ { lhs: DataRegister(3), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 253, lhs: DataRegister(8), rhs: Const4(0) }
LTU { lhs: DataRegister(3), rhs: Const9(Const9(192)), dest: DataRegister(8) }
SELN { selector: DataRegister(3), lhs: DataRegister(8), rhs: Const9(Const9(192)), dest: DataRegister(6) }
AND { lhs: DataRegister(6), rhs: Const9(Const9(3)), dest: DataRegister(7) }
SH { src: DataRegister(6), count: Const9(Const9(2)), dest: DataRegister(5) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(2)) }
LTU { lhs: DataRegister(3), rhs: Const9(Const9(4)), dest: DataRegister(8) }
JNE { target: 262, lhs: DataRegister(8), rhs: Const4(0) }
MOVU { src: Const16(1008), dest: DataRegister(DataRegister(8)) }
AND { lhs: DataRegister(5), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
ADD { lhs: DataRegister(4), rhs: DataRegister(DataRegister(8)), dest: DataRegister(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(2)) }
MOV { src: DataRegister(DataRegister(4)), dest: DataRegister(DataRegister(1)) }
MOVU { src: Const16(65535), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(65535), dest: DataRegister(8) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
XOR { lhs: DataRegister(8), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
SHA { src: DataRegister(8), count: Const9(Const9(25)), dest: DataRegister(9) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(10) }
SHA { src: DataRegister(10), count: Const9(Const9(26)), dest: DataRegister(10) }
OR { lhs: DataRegister(9), rhs: DataRegister(DataRegister(10)), dest: DataRegister(11) }
MOVU { src: Const16(257), dest: DataRegister(DataRegister(12)) }
ADDIH { lhs: DataRegister(12), rhs: Const16(257), dest: DataRegister(12) }
AND { lhs: DataRegister(11), rhs: DataRegister(DataRegister(12)), dest: DataRegister(12) }
STWPI { src: DataRegister(12), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(65535), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(65535), dest: DataRegister(8) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
XOR { lhs: DataRegister(8), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
SHA { src: DataRegister(8), count: Const9(Const9(25)), dest: DataRegister(9) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(10) }
SHA { src: DataRegister(10), count: Const9(Const9(26)), dest: DataRegister(10) }
OR { lhs: DataRegister(9), rhs: DataRegister(DataRegister(10)), dest: DataRegister(11) }
MOVU { src: Const16(257), dest: DataRegister(DataRegister(12)) }
ADDIH { lhs: DataRegister(12), rhs: Const16(257), dest: DataRegister(12) }
AND { lhs: DataRegister(11), rhs: DataRegister(DataRegister(12)), dest: DataRegister(12) }
STWPI { src: DataRegister(12), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(65535), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(65535), dest: DataRegister(8) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
XOR { lhs: DataRegister(8), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
SHA { src: DataRegister(8), count: Const9(Const9(25)), dest: DataRegister(9) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(10) }
SHA { src: DataRegister(10), count: Const9(Const9(26)), dest: DataRegister(10) }
OR { lhs: DataRegister(9), rhs: DataRegister(DataRegister(10)), dest: DataRegister(11) }
MOVU { src: Const16(257), dest: DataRegister(DataRegister(12)) }
ADDIH { lhs: DataRegister(12), rhs: Const16(257), dest: DataRegister(12) }
AND { lhs: DataRegister(11), rhs: DataRegister(DataRegister(12)), dest: DataRegister(12) }
STWPI { src: DataRegister(12), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(65535), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(65535), dest: DataRegister(8) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
XOR { lhs: DataRegister(8), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
SHA { src: DataRegister(8), count: Const9(Const9(25)), dest: DataRegister(9) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(10) }
SHA { src: DataRegister(10), count: Const9(Const9(26)), dest: DataRegister(10) }
OR { lhs: DataRegister(9), rhs: DataRegister(DataRegister(10)), dest: DataRegister(11) }
MOVU { src: Const16(257), dest: DataRegister(DataRegister(12)) }
ADDIH { lhs: DataRegister(12), rhs: Const16(257), dest: DataRegister(12) }
AND { lhs: DataRegister(11), rhs: DataRegister(DataRegister(12)), dest: DataRegister(12) }
ADD { lhs: DataRegister(12), rhs: DataRegister(DataRegister(2)), dest: DataRegister(13) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(14) }
ADD { lhs: DataRegister(14), rhs: DataRegister(DataRegister(13)), dest: DataRegister(14) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(15) }
ADD { lhs: DataRegister(15), rhs: DataRegister(DataRegister(14)), dest: DataRegister(15) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
ADD { lhs: DataRegister(8), rhs: DataRegister(DataRegister(15)), dest: DataRegister(2) }
ADDI { lhs: DataRegister(1), rhs: Const16(16), dest: DataRegister(1) }
NE { lhs: DataRegister(1), rhs: DataRegister(DataRegister(0)), dest: DataRegister(8) }
JNE { target: 263, lhs: DataRegister(8), rhs: Const4(0) }
SUB { lhs: DataRegister(3), rhs: DataRegister(6), dest: DataRegister(3) }
ADD { lhs: DataRegister(4), rhs: DataRegister(DataRegister(5)), dest: DataRegister(8) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(8) }
SHA { src: DataRegister(2), count: Const9(Const9(24)), dest: DataRegister(8) }
MOVU { src: Const16(255), dest: DataRegister(DataRegister(9)) }
ADDIH { lhs: DataRegister(9), rhs: Const16(255), dest: DataRegister(9) }
AND { lhs: DataRegister(8), rhs: DataRegister(DataRegister(9)), dest: DataRegister(9) }
MOVU { src: Const16(255), dest: DataRegister(DataRegister(10)) }
ADDIH { lhs: DataRegister(10), rhs: Const16(255), dest: DataRegister(10) }
AND { lhs: DataRegister(2), rhs: DataRegister(DataRegister(10)), dest: DataRegister(10) }
ADD { lhs: DataRegister(9), rhs: DataRegister(DataRegister(10)), dest: DataRegister(11) }
MOVU { src: Const16(1), dest: DataRegister(DataRegister(12)) }
ADDIH { lhs: DataRegister(12), rhs: Const16(1), dest: DataRegister(12) }
MUL { lhs: DataRegister(11), rhs: DataRegister(DataRegister(12)), dest: DataRegister(12) }
SHA { src: DataRegister(12), count: Const9(Const9(16)), dest: DataRegister(13) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(14) }
ADD { lhs: DataRegister(13), rhs: DataRegister(DataRegister(14)), dest: DataRegister(14) }
STW { src: DataRegister(14), base: AddressRegister(10), offset: Const16(4) }
EQ { lhs: DataRegister(7), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 261, lhs: DataRegister(8), rhs: Const4(0) }
AND { lhs: DataRegister(6), rhs: Const9(Const9(252)), dest: DataRegister(8) }
SH { src: DataRegister(8), count: Const9(Const9(2)), dest: DataRegister(9) }
ADD { lhs: DataRegister(4), rhs: DataRegister(DataRegister(9)), dest: DataRegister(2) }
MOVU { src: Const16(65535), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(65535), dest: DataRegister(8) }
XOR { lhs: DataRegister(1), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
SHA { src: DataRegister(8), count: Const9(Const9(25)), dest: DataRegister(9) }
SHA { src: DataRegister(1), count: Const9(Const9(26)), dest: DataRegister(10) }
OR { lhs: DataRegister(9), rhs: DataRegister(DataRegister(10)), dest: DataRegister(11) }
MOVU { src: Const16(257), dest: DataRegister(DataRegister(12)) }
ADDIH { lhs: DataRegister(12), rhs: Const16(257), dest: DataRegister(12) }
AND { lhs: DataRegister(11), rhs: DataRegister(DataRegister(12)), dest: DataRegister(1) }
EQ { lhs: DataRegister(7), rhs: Const9(Const9(1)), dest: DataRegister(8) }
JNE { target: 264, lhs: DataRegister(8), rhs: Const4(0) }
MOVU { src: Const16(65535), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(65535), dest: DataRegister(8) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
XOR { lhs: DataRegister(8), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
SHA { src: DataRegister(8), count: Const9(Const9(25)), dest: DataRegister(9) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(10) }
SHA { src: DataRegister(10), count: Const9(Const9(26)), dest: DataRegister(10) }
OR { lhs: DataRegister(9), rhs: DataRegister(DataRegister(10)), dest: DataRegister(11) }
MOVU { src: Const16(257), dest: DataRegister(DataRegister(12)) }
ADDIH { lhs: DataRegister(12), rhs: Const16(257), dest: DataRegister(12) }
AND { lhs: DataRegister(11), rhs: DataRegister(DataRegister(12)), dest: DataRegister(12) }
ADD { lhs: DataRegister(12), rhs: DataRegister(DataRegister(1)), dest: DataRegister(1) }
EQ { lhs: DataRegister(7), rhs: Const9(Const9(2)), dest: DataRegister(8) }
JNE { target: 264, lhs: DataRegister(8), rhs: Const4(0) }
MOVU { src: Const16(65535), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(65535), dest: DataRegister(8) }
XOR { lhs: DataRegister(2), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
SHA { src: DataRegister(8), count: Const9(Const9(25)), dest: DataRegister(9) }
SHA { src: DataRegister(2), count: Const9(Const9(26)), dest: DataRegister(10) }
OR { lhs: DataRegister(9), rhs: DataRegister(DataRegister(10)), dest: DataRegister(11) }
MOVU { src: Const16(257), dest: DataRegister(DataRegister(12)) }
ADDIH { lhs: DataRegister(12), rhs: Const16(257), dest: DataRegister(12) }
AND { lhs: DataRegister(11), rhs: DataRegister(DataRegister(12)), dest: DataRegister(12) }
ADD { lhs: DataRegister(12), rhs: DataRegister(DataRegister(1)), dest: DataRegister(1) }
RSLCX
RET
SHA { src: DataRegister(1), count: Const9(Const9(24)), dest: DataRegister(8) }
MOVU { src: Const16(255), dest: DataRegister(DataRegister(9)) }
ADDIH { lhs: DataRegister(9), rhs: Const16(7), dest: DataRegister(9) }
AND { lhs: DataRegister(8), rhs: DataRegister(DataRegister(9)), dest: DataRegister(9) }
MOVU { src: Const16(255), dest: DataRegister(DataRegister(10)) }
ADDIH { lhs: DataRegister(10), rhs: Const16(255), dest: DataRegister(10) }
AND { lhs: DataRegister(1), rhs: DataRegister(DataRegister(10)), dest: DataRegister(10) }
ADD { lhs: DataRegister(9), rhs: DataRegister(DataRegister(10)), dest: DataRegister(11) }
MOVU { src: Const16(1), dest: DataRegister(DataRegister(12)) }
ADDIH { lhs: DataRegister(12), rhs: Const16(1), dest: DataRegister(12) }
MUL { lhs: DataRegister(11), rhs: DataRegister(DataRegister(12)), dest: DataRegister(12) }
SHA { src: DataRegister(12), count: Const9(Const9(16)), dest: DataRegister(13) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(14) }
ADD { lhs: DataRegister(13), rhs: DataRegister(DataRegister(14)), dest: DataRegister(14) }
STWPI { src: DataRegister(14), base: AddressRegister(9), offset: Const10(-4) }
JNE { target: 265, lhs: DataRegister(1), rhs: Const4(0) }
RSLCX
RET
MOVU { src: Const16(0), dest: DataRegister(DataRegister(8)) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
AND { lhs: DataRegister(1), rhs: Const9(Const9(3)), dest: DataRegister(8) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(8) }
GEU { lhs: DataRegister(1), rhs: Const9(Const9(4)), dest: DataRegister(8) }
JNE { target: 267, lhs: DataRegister(8), rhs: Const4(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(8)) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(4) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(2)) }
J { target: 266 }
MOVU { src: Const16(65532), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(65535), dest: DataRegister(8) }
AND { lhs: DataRegister(1), rhs: DataRegister(DataRegister(8)), dest: DataRegister(3) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(8)) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(4) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(2)) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
ADD { lhs: DataRegister(0), rhs: DataRegister(DataRegister(2)), dest: DataRegister(1) }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDB { base: AddressRegister(2), offset: Const16(0), dest: DataRegister(8) }
GE { lhs: DataRegister(8), rhs: Const9(Const9(448)), dest: DataRegister(8) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(9) }
ADD { lhs: DataRegister(9), rhs: DataRegister(DataRegister(8)), dest: DataRegister(9) }
ADDI { lhs: DataRegister(1), rhs: Const16(1), dest: DataRegister(10) }
MOVA { src: DataRegister(10), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDB { base: AddressRegister(2), offset: Const16(0), dest: DataRegister(11) }
GE { lhs: DataRegister(11), rhs: Const9(Const9(448)), dest: DataRegister(11) }
ADD { lhs: DataRegister(9), rhs: DataRegister(DataRegister(11)), dest: DataRegister(12) }
ADDI { lhs: DataRegister(1), rhs: Const16(2), dest: DataRegister(13) }
MOVA { src: DataRegister(13), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDB { base: AddressRegister(2), offset: Const16(0), dest: DataRegister(14) }
GE { lhs: DataRegister(14), rhs: Const9(Const9(448)), dest: DataRegister(14) }
ADD { lhs: DataRegister(12), rhs: DataRegister(DataRegister(14)), dest: DataRegister(15) }
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
ADDI { lhs: DataRegister(1), rhs: Const16(3), dest: DataRegister(1) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDB { base: AddressRegister(2), offset: Const16(0), dest: DataRegister(8) }
GE { lhs: DataRegister(8), rhs: Const9(Const9(448)), dest: DataRegister(8) }
ADD { lhs: DataRegister(15), rhs: DataRegister(DataRegister(8)), dest: DataRegister(9) }
STW { src: DataRegister(9), base: AddressRegister(10), offset: Const16(4) }
STWPI { src: DataRegister(3), base: AddressRegister(9), offset: Const10(-4) }
ADDI { lhs: DataRegister(2), rhs: Const16(4), dest: DataRegister(2) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
NE { lhs: DataRegister(8), rhs: DataRegister(DataRegister(2)), dest: DataRegister(8) }
JNE { target: 268, lhs: DataRegister(8), rhs: Const4(0) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
EQ { lhs: DataRegister(8), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 253, lhs: DataRegister(8), rhs: Const4(0) }
ADD { lhs: DataRegister(0), rhs: DataRegister(DataRegister(2)), dest: DataRegister(1) }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDB { base: AddressRegister(2), offset: Const16(0), dest: DataRegister(8) }
GE { lhs: DataRegister(8), rhs: Const9(Const9(448)), dest: DataRegister(8) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(9) }
ADD { lhs: DataRegister(9), rhs: DataRegister(DataRegister(8)), dest: DataRegister(9) }
STW { src: DataRegister(9), base: AddressRegister(10), offset: Const16(4) }
ADDI { lhs: DataRegister(1), rhs: Const16(1), dest: DataRegister(1) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
ADDI { lhs: DataRegister(8), rhs: Const16(65535), dest: DataRegister(8) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(8) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
JNE { target: 269, lhs: DataRegister(8), rhs: Const4(0) }
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(4) }
LDW { base: AddressRegister(9), offset: Const16(65532), dest: DataRegister(3) }
LDW { base: AddressRegister(9), offset: Const16(65528), dest: DataRegister(2) }
LDW { base: AddressRegister(9), offset: Const16(65524), dest: DataRegister(1) }
LDW { base: AddressRegister(9), offset: Const16(65520), dest: DataRegister(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(6)) }
ADDIH { lhs: DataRegister(6), rhs: Const16(17), dest: DataRegister(6) }
EQ { lhs: DataRegister(2), rhs: DataRegister(DataRegister(6)), dest: DataRegister(6) }
JNE { target: 272, lhs: DataRegister(6), rhs: Const4(0) }
MOVU { src: Const16(1), dest: DataRegister(DataRegister(5)) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(2), base: AddressRegister(9), offset: Const10(-4) }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(16), dest: DataRegister(6) }
ADDSCA { lhs: AddressRegister(4), rhs: DataRegister(6), dest: AddressRegister(2), shift: Const4(2) }
LDA { base: AddressRegister(2), offset: Const16(0), dest: AddressRegister(2) }
CALLI { target: AddressRegister(2) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(6) }
JNE { target: 271, lhs: DataRegister(6), rhs: Const4(0) }
JNE { target: 270, lhs: DataRegister(3), rhs: Const4(0) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(5)) }
MOV { src: DataRegister(DataRegister(5)), dest: DataRegister(DataRegister(0)) }
LEA { base: AddressRegister(9), offset: Const16(24), dest: AddressRegister(9) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(4) }
RSLCX
RET
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(3), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(4), base: AddressRegister(9), offset: Const10(-4) }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(12), dest: DataRegister(6) }
ADDSCA { lhs: AddressRegister(4), rhs: DataRegister(6), dest: AddressRegister(2), shift: Const4(2) }
LDA { base: AddressRegister(2), offset: Const16(0), dest: AddressRegister(2) }
CALLI { target: AddressRegister(2) }
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(3) }
LDW { base: AddressRegister(9), offset: Const16(65532), dest: DataRegister(2) }
LDD { base: AddressRegister(9), offset: Const16(65528), dest: ExtendedRegister(0) }
LDW { base: AddressRegister(1), offset: Const16(0), dest: DataRegister(8) }
ADDI { lhs: DataRegister(8), rhs: Const16(65488), dest: DataRegister(4) }
STW { src: DataRegister(4), base: AddressRegister(1), offset: Const16(0) }
MOVU { src: Const16(39), dest: DataRegister(DataRegister(5)) }
SVLCX
MOV { src: Const16(Const16(10000)), dest: ExtendedRegister(ExtendedRegister(8)) }
MOV { src: RegisterCouple { lower: DataRegister(0), upper: DataRegister(1) }, dest: ExtendedRegister(ExtendedRegister(4)) }
CALLLIBRARY(I64GeU)
RSLCX
JNE { target: 274, lhs: DataRegister(2), rhs: Const4(0) }
MOV { src: RegisterCouple { lower: DataRegister(0), upper: DataRegister(1) }, dest: ExtendedRegister(ExtendedRegister(6)) }
J { target: 273 }
MOVU { src: Const16(39), dest: DataRegister(DataRegister(5)) }
ADDI { lhs: DataRegister(4), rhs: Const16(9), dest: DataRegister(8) }
ADD { lhs: DataRegister(8), rhs: DataRegister(DataRegister(5)), dest: DataRegister(9) }
STW { src: DataRegister(9), base: AddressRegister(10), offset: Const16(4) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
ADDI { lhs: DataRegister(8), rhs: Const16(65532), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
SVLCX
MOV { src: Const16(Const16(10000)), dest: ExtendedRegister(ExtendedRegister(8)) }
MOV { src: RegisterCouple { lower: DataRegister(0), upper: DataRegister(1) }, dest: ExtendedRegister(ExtendedRegister(4)) }
CALLLIBRARY(I64DivU)
MOV { src: RegisterCouple { lower: DataRegister(2), upper: DataRegister(3) }, dest: ExtendedRegister(ExtendedRegister(6)) }
RSLCX
SVLCX
MOV { src: Const16(Const16(10000)), dest: ExtendedRegister(ExtendedRegister(8)) }
MOV { src: RegisterCouple { lower: DataRegister(6), upper: DataRegister(7) }, dest: ExtendedRegister(ExtendedRegister(4)) }
CALLLIBRARY(I64Mul)
RSLCX
LDDPI { base: AddressRegister(9), offset: Const10(4), dest: ExtendedRegister(8) }
SUBX { lhs: DataRegister(8), rhs: DataRegister(DataRegister(2)), dest: DataRegister(8) }
SUBC { lhs: DataRegister(9), rhs: DataRegister(DataRegister(3)), dest: DataRegister(9) }
MOVU { src: Const16(65535), dest: DataRegister(DataRegister(8)) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
AND { lhs: DataRegister(8), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
MOVU { src: Const16(100), dest: DataRegister(DataRegister(9)) }
DIVU { lhs: DataRegister(8), rhs: DataRegister(9), dest: ExtendedRegister(10) }
STW { src: DataRegister(10), base: AddressRegister(10), offset: Const16(12) }
LDW { base: AddressRegister(10), offset: Const16(12), dest: DataRegister(8) }
SH { src: DataRegister(8), count: Const9(Const9(1)), dest: DataRegister(8) }
ADDI { lhs: DataRegister(8), rhs: Const16(548), dest: DataRegister(9) }
ADDIH { lhs: DataRegister(9), rhs: Const16(16), dest: DataRegister(9) }
MOVA { src: DataRegister(9), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDHU { base: AddressRegister(2), offset: Const16(0), dest: DataRegister(8) }
LDAPI { base: AddressRegister(9), offset: Const10(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STH { src: DataRegister(8), base: AddressRegister(2), offset: Const16(0) }
LDW { base: AddressRegister(10), offset: Const16(12), dest: DataRegister(8) }
MUL { lhs: DataRegister(8), rhs: Const9(Const9(100)), dest: DataRegister(8) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(9) }
SUB { lhs: DataRegister(9), rhs: DataRegister(8), dest: DataRegister(9) }
MOVU { src: Const16(65535), dest: DataRegister(DataRegister(10)) }
AND { lhs: DataRegister(9), rhs: DataRegister(DataRegister(10)), dest: DataRegister(10) }
SH { src: DataRegister(10), count: Const9(Const9(1)), dest: DataRegister(11) }
ADDI { lhs: DataRegister(11), rhs: Const16(548), dest: DataRegister(12) }
ADDIH { lhs: DataRegister(12), rhs: Const16(16), dest: DataRegister(12) }
MOVA { src: DataRegister(12), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDHU { base: AddressRegister(2), offset: Const16(0), dest: DataRegister(8) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(9) }
ADDI { lhs: DataRegister(9), rhs: Const16(65534), dest: DataRegister(9) }
MOVA { src: DataRegister(9), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STH { src: DataRegister(8), base: AddressRegister(2), offset: Const16(0) }
ADDI { lhs: DataRegister(5), rhs: Const16(65532), dest: DataRegister(5) }
SVLCX
MOV { src: Const16(Const16(57599)), dest: ExtendedRegister(ExtendedRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(1525), dest: DataRegister(8) }
MOV { src: RegisterCouple { lower: DataRegister(0), upper: DataRegister(1) }, dest: ExtendedRegister(ExtendedRegister(4)) }
CALLLIBRARY(I64GtU)
STW { src: DataRegister(2), base: AddressRegister(10), offset: Const16(4) }
RSLCX
MOV { src: RegisterCouple { lower: DataRegister(6), upper: DataRegister(7) }, dest: ExtendedRegister(ExtendedRegister(0)) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
JNE { target: 275, lhs: DataRegister(8), rhs: Const4(0) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
LTU { lhs: DataRegister(8), rhs: Const9(Const9(100)), dest: DataRegister(8) }
JNE { target: 276, lhs: DataRegister(8), rhs: Const4(0) }
ADDI { lhs: DataRegister(4), rhs: Const16(9), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
ADDI { lhs: DataRegister(5), rhs: Const16(65534), dest: DataRegister(5) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
ADD { lhs: DataRegister(8), rhs: DataRegister(DataRegister(5)), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(65535), dest: DataRegister(DataRegister(8)) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
AND { lhs: DataRegister(8), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
MOVU { src: Const16(100), dest: DataRegister(DataRegister(9)) }
DIVU { lhs: DataRegister(8), rhs: DataRegister(9), dest: ExtendedRegister(10) }
STW { src: DataRegister(10), base: AddressRegister(10), offset: Const16(4) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
MUL { lhs: DataRegister(8), rhs: Const9(Const9(100)), dest: DataRegister(8) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(9) }
SUB { lhs: DataRegister(9), rhs: DataRegister(8), dest: DataRegister(9) }
MOVU { src: Const16(65535), dest: DataRegister(DataRegister(10)) }
AND { lhs: DataRegister(9), rhs: DataRegister(DataRegister(10)), dest: DataRegister(10) }
SH { src: DataRegister(10), count: Const9(Const9(1)), dest: DataRegister(11) }
ADDI { lhs: DataRegister(11), rhs: Const16(548), dest: DataRegister(12) }
ADDIH { lhs: DataRegister(12), rhs: Const16(16), dest: DataRegister(12) }
MOVA { src: DataRegister(12), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDHU { base: AddressRegister(2), offset: Const16(0), dest: DataRegister(8) }
LDAPI { base: AddressRegister(9), offset: Const10(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STH { src: DataRegister(8), base: AddressRegister(2), offset: Const16(0) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
LTU { lhs: DataRegister(8), rhs: Const9(Const9(10)), dest: DataRegister(8) }
JNE { target: 278, lhs: DataRegister(8), rhs: Const4(0) }
ADDI { lhs: DataRegister(4), rhs: Const16(9), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
ADDI { lhs: DataRegister(5), rhs: Const16(65534), dest: DataRegister(5) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
SH { src: DataRegister(8), count: Const9(Const9(1)), dest: DataRegister(8) }
ADDI { lhs: DataRegister(8), rhs: Const16(548), dest: DataRegister(9) }
ADDIH { lhs: DataRegister(9), rhs: Const16(16), dest: DataRegister(9) }
MOVA { src: DataRegister(9), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDHU { base: AddressRegister(2), offset: Const16(0), dest: DataRegister(8) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(9) }
ADD { lhs: DataRegister(9), rhs: DataRegister(DataRegister(5)), dest: DataRegister(9) }
MOVA { src: DataRegister(9), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STH { src: DataRegister(8), base: AddressRegister(2), offset: Const16(0) }
J { target: 277 }
ADDI { lhs: DataRegister(4), rhs: Const16(9), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
ADDI { lhs: DataRegister(5), rhs: Const16(65535), dest: DataRegister(5) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
OR { lhs: DataRegister(8), rhs: Const9(Const9(48)), dest: DataRegister(8) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(9) }
ADD { lhs: DataRegister(9), rhs: DataRegister(DataRegister(5)), dest: DataRegister(9) }
MOVA { src: DataRegister(9), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STB { src: DataRegister(8), base: AddressRegister(2), offset: Const16(0) }
STWPI { src: DataRegister(3), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(2), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(1), dest: DataRegister(DataRegister(8)) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
MOVU { src: Const16(0), dest: DataRegister(DataRegister(8)) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
ADDI { lhs: DataRegister(4), rhs: Const16(9), dest: DataRegister(8) }
ADD { lhs: DataRegister(8), rhs: DataRegister(DataRegister(5)), dest: DataRegister(9) }
STWPI { src: DataRegister(9), base: AddressRegister(9), offset: Const10(-4) }
RSUB { lhs: Const9(39), rhs: DataRegister(5), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 52 }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(5) }
ADDI { lhs: DataRegister(4), rhs: Const16(48), dest: DataRegister(8) }
STW { src: DataRegister(8), base: AddressRegister(1), offset: Const16(0) }
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(2) }
LDW { base: AddressRegister(9), offset: Const16(65532), dest: DataRegister(1) }
LDW { base: AddressRegister(9), offset: Const16(65528), dest: DataRegister(0) }
GEU { lhs: DataRegister(2), rhs: Const9(Const9(16)), dest: DataRegister(8) }
JNE { target: 280, lhs: DataRegister(8), rhs: Const4(0) }
MOV { src: DataRegister(DataRegister(0)), dest: DataRegister(DataRegister(3)) }
J { target: 279 }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
RSUB0 { src: DataRegister(8) }
AND { lhs: DataRegister(8), rhs: Const9(Const9(3)), dest: DataRegister(4) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
ADD { lhs: DataRegister(8), rhs: DataRegister(DataRegister(4)), dest: DataRegister(5) }
EQ { lhs: DataRegister(4), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 281, lhs: DataRegister(8), rhs: Const4(0) }
MOV { src: DataRegister(DataRegister(0)), dest: DataRegister(DataRegister(3)) }
MOV { src: DataRegister(DataRegister(1)), dest: DataRegister(DataRegister(6)) }
MOVA { src: DataRegister(6), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDBU { base: AddressRegister(2), offset: Const16(0), dest: DataRegister(8) }
MOVA { src: DataRegister(3), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STB { src: DataRegister(8), base: AddressRegister(2), offset: Const16(0) }
ADDI { lhs: DataRegister(6), rhs: Const16(1), dest: DataRegister(6) }
ADDI { lhs: DataRegister(3), rhs: Const16(1), dest: DataRegister(3) }
LTU { lhs: DataRegister(3), rhs: DataRegister(DataRegister(5)), dest: DataRegister(8) }
JNE { target: 282, lhs: DataRegister(8), rhs: Const4(0) }
STWPI { src: DataRegister(5), base: AddressRegister(9), offset: Const10(-4) }
SUB { lhs: DataRegister(2), rhs: DataRegister(4), dest: DataRegister(7) }
MOVU { src: Const16(65532), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(65535), dest: DataRegister(8) }
AND { lhs: DataRegister(7), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(4) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(8) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
ADD { lhs: DataRegister(8), rhs: DataRegister(DataRegister(8)), dest: DataRegister(3) }
ADD { lhs: DataRegister(1), rhs: DataRegister(DataRegister(4)), dest: DataRegister(8) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(8) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
AND { lhs: DataRegister(8), rhs: Const9(Const9(3)), dest: DataRegister(8) }
EQ { lhs: DataRegister(8), rhs: Const9(Const9(0)), dest: DataRegister(9) }
JNE { target: 284, lhs: DataRegister(9), rhs: Const4(0) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
LT { lhs: DataRegister(8), rhs: Const9(Const9(1)), dest: DataRegister(8) }
JNE { target: 283, lhs: DataRegister(8), rhs: Const4(0) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
SH { src: DataRegister(8), count: Const9(Const9(3)), dest: DataRegister(6) }
AND { lhs: DataRegister(6), rhs: Const9(Const9(24)), dest: DataRegister(2) }
MOVU { src: Const16(65532), dest: DataRegister(DataRegister(8)) }
ADDIH { lhs: DataRegister(8), rhs: Const16(65535), dest: DataRegister(8) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
AND { lhs: DataRegister(8), rhs: DataRegister(DataRegister(8)), dest: DataRegister(8) }
STW { src: DataRegister(8), base: AddressRegister(10), offset: Const16(12) }
LDW { base: AddressRegister(10), offset: Const16(12), dest: DataRegister(8) }
ADDI { lhs: DataRegister(8), rhs: Const16(4), dest: DataRegister(1) }
RSUB0 { src: DataRegister(8) }
AND { lhs: DataRegister(8), rhs: Const9(Const9(24)), dest: DataRegister(4) }
STWPI { src: DataRegister(5), base: AddressRegister(9), offset: Const10(-4) }
RSUB0 { src: DataRegister(2) }
SHA { src: DataRegister(6), count: DataRegister(DataRegister(2)), dest: DataRegister(8) }
STWPI { src: DataRegister(8), base: AddressRegister(9), offset: Const10(-4) }
SH { src: DataRegister(6), count: DataRegister(DataRegister(4)), dest: DataRegister(8) }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(9) }
OR { lhs: DataRegister(9), rhs: DataRegister(DataRegister(8)), dest: DataRegister(9) }
LDAPI { base: AddressRegister(9), offset: Const10(4), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(9), base: AddressRegister(2), offset: Const16(0) }
ADDI { lhs: DataRegister(1), rhs: Const16(4), dest: DataRegister(1) }
ADDI { lhs: DataRegister(5), rhs: Const16(4), dest: DataRegister(5) }
LTU { lhs: DataRegister(5), rhs: DataRegister(DataRegister(3)), dest: DataRegister(8) }
JNE { target: 285, lhs: DataRegister(8), rhs: Const4(0) }
J { target: 283 }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
LT { lhs: DataRegister(8), rhs: Const9(Const9(1)), dest: DataRegister(8) }
JNE { target: 283, lhs: DataRegister(8), rhs: Const4(0) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(1) }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDW { base: AddressRegister(2), offset: Const16(0), dest: DataRegister(8) }
MOVA { src: DataRegister(5), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STW { src: DataRegister(8), base: AddressRegister(2), offset: Const16(0) }
ADDI { lhs: DataRegister(1), rhs: Const16(4), dest: DataRegister(1) }
ADDI { lhs: DataRegister(5), rhs: Const16(4), dest: DataRegister(5) }
LTU { lhs: DataRegister(5), rhs: DataRegister(DataRegister(3)), dest: DataRegister(8) }
JNE { target: 286, lhs: DataRegister(8), rhs: Const4(0) }
AND { lhs: DataRegister(7), rhs: Const9(Const9(3)), dest: DataRegister(2) }
LDW { base: AddressRegister(10), offset: Const16(8), dest: DataRegister(8) }
LDW { base: AddressRegister(10), offset: Const16(4), dest: DataRegister(8) }
ADD { lhs: DataRegister(8), rhs: DataRegister(DataRegister(8)), dest: DataRegister(1) }
EQ { lhs: DataRegister(2), rhs: Const9(Const9(0)), dest: DataRegister(8) }
JNE { target: 287, lhs: DataRegister(8), rhs: Const4(0) }
ADD { lhs: DataRegister(3), rhs: DataRegister(DataRegister(2)), dest: DataRegister(5) }
MOVA { src: DataRegister(1), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
LDBU { base: AddressRegister(2), offset: Const16(0), dest: DataRegister(8) }
MOVA { src: DataRegister(3), dest: AddressRegister(2) }
ADDA { lhs: AddressRegister(0), rhs: AddressRegister(2), dest: AddressRegister(2) }
STB { src: DataRegister(8), base: AddressRegister(2), offset: Const16(0) }
ADDI { lhs: DataRegister(1), rhs: Const16(1), dest: DataRegister(1) }
ADDI { lhs: DataRegister(3), rhs: Const16(1), dest: DataRegister(3) }
LTU { lhs: DataRegister(3), rhs: DataRegister(DataRegister(5)), dest: DataRegister(8) }
JNE { target: 288, lhs: DataRegister(8), rhs: Const4(0) }
SVLCX
LEA { base: AddressRegister(9), offset: Const16(0), dest: AddressRegister(10) }
LDW { base: AddressRegister(9), offset: Const16(0), dest: DataRegister(2) }
LDW { base: AddressRegister(9), offset: Const16(65532), dest: DataRegister(1) }
LDW { base: AddressRegister(9), offset: Const16(65528), dest: DataRegister(0) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(1), base: AddressRegister(9), offset: Const10(-4) }
STWPI { src: DataRegister(2), base: AddressRegister(9), offset: Const10(-4) }
CALL { target: 56 }
LDWPI { base: AddressRegister(9), offset: Const10(4), dest: DataRegister(0) }
LEA { base: AddressRegister(9), offset: Const16(12), dest: AddressRegister(9) }
STWPI { src: DataRegister(0), base: AddressRegister(9), offset: Const10(4) }
RSLCX
RET

use defmt::Format;
use crate::isa_model::{AddressRegister, Const10, Const16, Const18, Const4, Const9, DataRegister, ExtendedRegister, Register, RegisterOrConst, RegisterOrLargeConst, RegisterOrSmallConst};

#[derive(Debug, Clone, Format)]
pub enum Instr{
    Trap,
    NOP,
    RET,
    MOV {src: RegisterOrLargeConst, dest: Register},
    MOVU {src: Const16, dest: DataRegister},
    MOVA{src: DataRegister, dest: AddressRegister},
    MOVHA {src: Const16, dest: AddressRegister},
    LEA {base: AddressRegister, offset: Const16, dest: AddressRegister},
    LDA {base: AddressRegister, offset: Const16, dest: AddressRegister},
    LDAABS {address: Const18, dest: AddressRegister},
    LDAPI {base: AddressRegister, offset: Const10, dest: AddressRegister},
    LDB {base: AddressRegister, offset: Const16, dest: DataRegister},
    LDBU {base: AddressRegister, offset: Const16, dest: DataRegister},
    LDH {base: AddressRegister, offset: Const16, dest: DataRegister},
    LDHU {base: AddressRegister, offset: Const16, dest: DataRegister},
    LDW {base: AddressRegister, offset: Const16, dest: DataRegister},
    LDWABS {address: Const18, dest: DataRegister},
    LDWPI {base: AddressRegister, offset: Const10, dest: DataRegister},
    LDD {base: AddressRegister, offset: Const10, dest: ExtendedRegister},
    LDDABS {address: Const18, dest: ExtendedRegister},
    LDDPI {base: AddressRegister, offset: Const10, dest: ExtendedRegister},
    STB {src: DataRegister, base: AddressRegister, offset: Const16},
    STH {src: DataRegister, base: AddressRegister, offset: Const16},
    STW {src: DataRegister, base: AddressRegister, offset: Const16},
    STWABS {src: DataRegister, address: Const18},
    STD {src: ExtendedRegister, base: AddressRegister, offset: Const10},
    STDABS {src: ExtendedRegister, address: Const18},
    STDPI {src: ExtendedRegister, base: AddressRegister, offset: Const10},
    STWPI {src: DataRegister, base: AddressRegister, offset: Const10},
    MOVH {src: Const16, dest: DataRegister},
    CLZ {src:DataRegister, dest:DataRegister},
    SHUFFLE {src:DataRegister, dest:DataRegister, mask:Const9 },
    POPCNT {src:DataRegister, dest:DataRegister},
    AND {lhs:DataRegister, rhs:RegisterOrConst, dest:DataRegister},
    XOR {lhs:DataRegister, rhs:RegisterOrConst, dest:DataRegister},
    CALL {target: u32},
    CALLI {target: AddressRegister},
    SVLCX,
    RSLCX,
    EQ {lhs:DataRegister, rhs:RegisterOrConst, dest:DataRegister},
    NE {lhs:DataRegister, rhs:RegisterOrConst, dest:DataRegister},
    ADD {lhs: DataRegister, rhs: RegisterOrConst, dest: DataRegister},
    ADDF {lhs:DataRegister, rhs:DataRegister, dest:DataRegister},
    ADDX {lhs:DataRegister, rhs: RegisterOrConst, dest:DataRegister},
    ADDC {lhs:DataRegister, rhs:RegisterOrConst, dest:DataRegister},
    ADDI {lhs: DataRegister, rhs: Const16, dest: DataRegister},
    ADDIH {lhs: DataRegister, rhs: Const16, dest: DataRegister},
    ADDIHA { lhs: AddressRegister, rhs: Const16, dest: AddressRegister},
    ADDA {lhs: AddressRegister, rhs: AddressRegister, dest: AddressRegister},
    CADDN {lhs: DataRegister, rhs: RegisterOrConst, cond: DataRegister,  dest: DataRegister},
    SUB {lhs: DataRegister, rhs:DataRegister, dest:DataRegister},
    SUBF {lhs:DataRegister, rhs:DataRegister, dest:DataRegister},
    SUBX {lhs:DataRegister, rhs:DataRegister, dest:DataRegister},
    SUBC {lhs:DataRegister, rhs:DataRegister, dest:DataRegister},
    OR {lhs:DataRegister, rhs:RegisterOrConst, dest:DataRegister},
    LT {lhs:DataRegister, rhs:RegisterOrConst, dest:DataRegister},
    ANDLT {lhs:DataRegister, rhs:RegisterOrConst, dest:DataRegister},
    ORLT {lhs:DataRegister, rhs:RegisterOrConst, dest:DataRegister},
    ANDLTU {lhs:DataRegister, rhs:RegisterOrConst, dest:DataRegister},
    ORLTU {lhs:DataRegister, rhs:RegisterOrConst, dest:DataRegister},
    ANDGE {lhs:DataRegister, rhs:RegisterOrConst, dest:DataRegister},
    ORGE {lhs:DataRegister, rhs:RegisterOrConst, dest:DataRegister},
    ANDGEU {lhs:DataRegister, rhs:RegisterOrConst, dest:DataRegister},
    ORGEU {lhs:DataRegister, rhs:RegisterOrConst, dest:DataRegister},
    LTU {lhs:DataRegister, rhs:RegisterOrConst, dest:DataRegister},
    GE {lhs:DataRegister, rhs:RegisterOrConst, dest:DataRegister},
    GEU {lhs:DataRegister, rhs:RegisterOrConst, dest:DataRegister},
    FTOIZ {src:DataRegister, dest:DataRegister},
    FTOUZ {src:DataRegister, dest:DataRegister},
    ITOF {src:DataRegister, dest:DataRegister},
    UTOF {src:DataRegister, dest:DataRegister},
    MUL {lhs:DataRegister, rhs:RegisterOrConst, dest:DataRegister},
    MULU {lhs:DataRegister, rhs:RegisterOrConst, dest:ExtendedRegister},
    MADD {lhs:DataRegister, rhs:DataRegister, acc:DataRegister, dest:DataRegister},
    MULF {lhs:DataRegister, rhs:DataRegister, dest:DataRegister},
    DIV {lhs:DataRegister, rhs:DataRegister, dest:ExtendedRegister},
    DIVU{lhs:DataRegister, rhs:DataRegister, dest:ExtendedRegister},
    DIVF{lhs:DataRegister, rhs:DataRegister, dest:DataRegister},
    SH {src:DataRegister, count:RegisterOrConst, dest:DataRegister},
    SHA {src: DataRegister, count:RegisterOrConst, dest:DataRegister},
    CMPF{lhs: DataRegister, rhs: DataRegister, dest: DataRegister},
    SEL {selector:DataRegister, lhs:DataRegister, rhs:RegisterOrConst, dest:DataRegister},
    SELN {selector:DataRegister, lhs:DataRegister, rhs:RegisterOrConst, dest:DataRegister},
    RSUB { lhs : Const9, rhs: DataRegister, dest: DataRegister},
    RSUB0 { src: DataRegister},
    J {target: usize},
    JEQ {target: usize, lhs: DataRegister, rhs: RegisterOrSmallConst },
    JNE {target: usize, lhs: DataRegister, rhs: Const4 },
    JI {src: AddressRegister},
    ADDSCA{lhs: AddressRegister, rhs: DataRegister, dest: AddressRegister, shift: Const4},
    EXTRU{src: DataRegister, width_pos: ExtendedRegister, dest: DataRegister},
    EXTRUI{src: DataRegister, width: Const9, pos: Const9, dest: DataRegister},
    JZT {src: DataRegister, n: u8, target: usize},
    LOOPU {target: usize}
}